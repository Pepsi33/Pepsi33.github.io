<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Github Actions Config]]></title>
      <url>/2021/10/26/github%20actions%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<ol>
<li><p>生成ssh-key</p>
</li>
<li><p>在 blog 仓库 Settings -&gt; Secrets -&gt; Add a new secret 页面上添加生成的私钥</p>
</li>
<li><p>在 your.github.io 仓库 Settings -&gt; Deploy keys -&gt; Add deploy key 页面上添加生成的公钥, 并勾选 Allow write access 选项</p>
</li>
<li><p>编写 Github Actions</p>
<ul>
<li>在 blog 仓库根目录下创建 .github/workflows/deploy.yml 文件</li>
</ul>
</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">name: CI</div><div class="line">on:</div><div class="line">  push:</div><div class="line">    branches:</div><div class="line">      - hexo</div><div class="line"></div><div class="line">env:</div><div class="line">  GIT_USER: Pepsi33</div><div class="line">  GIT_EMAIL: xxx@xx.com</div><div class="line"></div><div class="line">jobs:</div><div class="line">  build:</div><div class="line">    name: Build on node $&#123;&#123; matrix.node_version &#125;&#125; and $&#123;&#123; matrix.os &#125;&#125;</div><div class="line">    runs-on: ubuntu-latest</div><div class="line">    strategy:</div><div class="line">      matrix:</div><div class="line">        os: [ubuntu-latest]</div><div class="line">        node_version: [12.x]</div><div class="line"></div><div class="line">    steps:</div><div class="line">      - name: Checkout source</div><div class="line">        uses: actions/checkout@v1</div><div class="line">        with:</div><div class="line">          ref: hexo</div><div class="line"></div><div class="line">      - name: Use Node.js $&#123;&#123; matrix.node_version &#125;&#125;</div><div class="line">        uses: actions/setup-node@v1</div><div class="line">        with:</div><div class="line">          version: $&#123;&#123; matrix.node_version &#125;&#125;</div><div class="line"></div><div class="line">      - name: Configuration environment</div><div class="line">        env:</div><div class="line">          ACTION_DEPLOY_KEY: $&#123;&#123; secrets.HEXO_DEPLOY_KEY &#125;&#125;</div><div class="line">        run: |</div><div class="line">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</div><div class="line">          mkdir -p ~/.ssh/</div><div class="line">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</div><div class="line">          chmod 600 ~/.ssh/id_rsa</div><div class="line">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</div><div class="line">          git config --global user.name $GIT_USER</div><div class="line">          git config --global user.email $GIT_EMAIL</div><div class="line"></div><div class="line">      - name: Install dependencies</div><div class="line">        run: |</div><div class="line">          npm install hexo-cli -g</div><div class="line">          npm install</div><div class="line"></div><div class="line">      - name: Hexo deploy</div><div class="line">        run: |</div><div class="line">          hexo clean</div><div class="line">          hexo d</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> CICD </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[防抖和节流]]></title>
      <url>/2019/03/15/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
      <content type="html"><![CDATA[<blockquote>
<p>防抖（Debouncing）和节流（Throttling）</p>
</blockquote>
<p>针对高频度触发事件问题（例如页面 scroll ，屏幕 resize，监听用户输入等）</p>
<h3 id="防抖（Debouncing）"><a href="#防抖（Debouncing）" class="headerlink" title="防抖（Debouncing）"></a>防抖（Debouncing）</h3><p>防抖技术即是可以把多个顺序地调用合并成一次，也就是在一定时间内，规定事件被触发的次数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// 防抖动函数</div><div class="line">function debounce(func, wait, immediate) &#123;</div><div class="line">    var timeout;</div><div class="line">    return function() &#123;</div><div class="line">        var context = this, args = arguments;</div><div class="line">        var later = function() &#123;</div><div class="line">            timeout = null;</div><div class="line">            if (!immediate) func.apply(context, args);</div><div class="line">        &#125;;</div><div class="line">        var callNow = immediate &amp;&amp; !timeout;</div><div class="line">        clearTimeout(timeout);</div><div class="line">        timeout = setTimeout(later, wait);</div><div class="line">        if (callNow) func.apply(context, args);</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"> </div><div class="line">var myEfficientFn = debounce(function() &#123;</div><div class="line">    // 滚动中的真正的操作</div><div class="line">&#125;, 250);</div><div class="line"> </div><div class="line">// 绑定监听</div><div class="line">window.addEventListener(&apos;resize&apos;, myEfficientFn);</div></pre></td></tr></table></figure>
<p>###节流（Throttling）<br>当我们做图片懒加载（lazyload）时，需要通过滚动位置，实时显示图片时，如果使用防抖函数，懒加载（lazyload）函数将会不断被延时，<br>只有停下来的时候才会被执行，对于这种需要实时触发事件的情况，就显得不是很友好了。<br>下面开始介绍函数节流，通过设定时间片，控制事件函数间断性的触发。</p>
<p>节流函数，只允许一个函数在 X 毫秒内执行一次。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// 简单的节流函数</div><div class="line">function throttle(func, wait, mustRun) &#123;</div><div class="line">    var timeout,</div><div class="line">        startTime = new Date();</div><div class="line"> </div><div class="line">    return function() &#123;</div><div class="line">        var context = this,</div><div class="line">            args = arguments,</div><div class="line">            curTime = new Date();</div><div class="line"> </div><div class="line">        clearTimeout(timeout);</div><div class="line">        // 如果达到了规定的触发时间间隔，触发 handler</div><div class="line">        if(curTime - startTime &gt;= mustRun)&#123;</div><div class="line">            func.apply(context,args);</div><div class="line">            startTime = curTime;</div><div class="line">        // 没达到触发间隔，重新设定定时器</div><div class="line">        &#125;else&#123;</div><div class="line">            timeout = setTimeout(func, wait);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line">// 实际想绑定在 scroll 事件上的 handler</div><div class="line">function realFunc()&#123;</div><div class="line">    console.log(&quot;Success&quot;);</div><div class="line">&#125;</div><div class="line">// 采用了节流函数</div><div class="line">window.addEventListener(&apos;scroll&apos;,throttle(realFunc,500,1000));</div></pre></td></tr></table></figure>
<p>###requestAnimationFrame触发滚动事件<br>window.requestAnimationFrame() 这个方法是用来在页面重绘之前，通知浏览器调用一个指定的函数。这个方法接受一个函数为参，该函数会在重绘前调用。<br>rAF 常用于 web 动画的制作，用于准确控制页面的帧刷新渲染，让动画效果更加流畅，当然它的作用不仅仅局限于动画制作，我们可以利用它的特性将它视为一个定时器。（当然它不是定时器）<br>通常来说，rAF 被调用的频率是每秒 60 次，也就是 1000/60 ，触发频率大概是 16.7ms 。（当执行复杂操作时，当它发现无法维持 60fps 的频率时，它会把频率降低到 30fps 来保持帧数的稳定。）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var ticking = false; // rAF 触发锁</div><div class="line"> </div><div class="line">function onScroll()&#123;</div><div class="line">  if(!ticking) &#123;</div><div class="line">    requestAnimationFrame(realFunc);</div><div class="line">    ticking = true;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">function realFunc()&#123;</div><div class="line">    // do something...</div><div class="line">    console.log(&quot;Success&quot;);</div><div class="line">    ticking = false;</div><div class="line">&#125;</div><div class="line">// 滚动事件监听</div><div class="line">window.addEventListener(&apos;scroll&apos;, onScroll, false);</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Javascript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[超过存储范围的数相加]]></title>
      <url>/2019/03/15/%E8%B6%85%E8%BF%87%E5%AD%98%E5%82%A8%E8%8C%83%E5%9B%B4%E7%9A%84%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      <content type="html"><![CDATA[<p>实现 字符串类型的数字 相加的一个方法</p>
<blockquote>
<p>JavaScript 能表示的最大安全整数是 9007199254740991 (Number.MAX_SAFE_INTEGER) 超出范围就会发生精度丢失</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">function add(a,b)&#123;</div><div class="line">    // 保存最终结果</div><div class="line">    var res=&apos;&apos;;</div><div class="line"></div><div class="line">    // 保存两位相加的结果 和 进位值</div><div class="line">    var c=0;</div><div class="line"></div><div class="line">    // 字符串转数组</div><div class="line">    a = a.split(&apos;&apos;);</div><div class="line">	b = b.split(&apos;&apos;);</div><div class="line"></div><div class="line">    while (a.length || b.length || c)&#123;</div><div class="line">        // ~~ 用来把String类型 转为 Number类型</div><div class="line">        // 把两位相加的结果 和 进位值相加</div><div class="line">        c += ~~a.pop() + ~~b.pop();</div><div class="line"></div><div class="line">        // 取余，把余数拼接到最终结果中</div><div class="line">        res = c % 10 + res;</div><div class="line"></div><div class="line">        // 保存进位，true 或者 false</div><div class="line">        c = c&gt;9;</div><div class="line">    &#125;</div><div class="line">    return res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原文和资料<br><a href="https://blog.csdn.net/FE_dev/article/details/80079372" target="_blank" rel="external">https://blog.csdn.net/FE_dev/article/details/80079372</a><br><a href="https://www.cnblogs.com/happy1992/p/7064114.html" target="_blank" rel="external">https://www.cnblogs.com/happy1992/p/7064114.html</a></p>
]]></content>
      
        <categories>
            
            <category> 面试题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[网络模型与tcp协议]]></title>
      <url>/2019/03/14/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B%E4%B8%8Etcp%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<p>OSI模型是ISO制定的网络模型规范，而TCP/IP模型是实际中更通用的协议族。</p>
<p><img src="/tfl/pictures/201901/tapd_20091751_1547276540_10.png" alt="图片描述"></p>
<p><img src="/tfl/pictures/201901/tapd_20091751_1547276563_65.png" alt="图片描述"></p>
<p>一个网络请求的顺序如下:<br>即IP路由寻址，再根据MAC地址确认目标机器，然后通过TCP/UDP进行端口数据传输，最后通过应用层协议解析数据。<br>MAC地址可以使用<code>ifconfig</code>，osx系统可以用<code>networksetup -listallhardwareports</code>,ether即MAC地址。</p>
<p><img src="/tfl/pictures/201901/tapd_20091751_1547276575_7.png" alt="图片描述"></p>
<h2 id="以太帧"><a href="#以太帧" class="headerlink" title="以太帧"></a>以太帧</h2><p>在TCP/IP模型中，数据是自顶向下包装的。最后的一个以太网帧如下结构</p>
<p><img src="/tfl/pictures/201901/tapd_20091751_1547276585_16.png" alt="图片描述"></p>
<h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><p>IP是无连接，无状态，不保证发送的包是否有序到达。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</div><div class="line">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class="line">   |Version|  IHL  |Type of Service|          Total Length         |</div><div class="line">   |版本号  | 头长度 |  服务类型(8位) |           总长度(16位)</div><div class="line">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class="line">   |         Identification        |Flags   |    Fragment Offset   |</div><div class="line">   |            标识(16位）         |标志(3位)|      分偏移段(13位)</div><div class="line">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class="line">   |  Time to Live |    Protocol   |         Header Checksum       |</div><div class="line">   |  生存时间(8位) | 挂载协议标识(8位)|            校验和(16位)</div><div class="line">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class="line">   |                       Source Address                          |</div><div class="line">   |                        源IP地址(16位）                          |</div><div class="line">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class="line">   |                    Destination Address                        |</div><div class="line">   |                      目标IP地址(16位)                           |</div><div class="line">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class="line">   |                    Options                    |    Padding    |</div><div class="line">   |                      选项                      |     填充      |</div><div class="line">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class="line">   |                             Data                              |</div><div class="line">   |                          TCP/UDP数据                           |</div><div class="line">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class="line">         </div><div class="line">- Version: IPv4/IPv6</div><div class="line">- Total Length: IP报文头与数据总长度，&lt;=MTU(Maximum Transmission Unit,以太网一般1500字节)</div><div class="line">- Identification：分片后+1，用于分片重组</div><div class="line">- Flags：3bit, 第一位0，第二位0可以分片1不可分片，第三位0最后一片，1不是最后一片</div><div class="line">- Fragment Offset: 分片后再原组中的相对偏移量</div><div class="line">- Time to Live: 可经过最大的路由器数</div><div class="line">- Protocol: 下一层协议，ICMP/TCP/UDP</div></pre></td></tr></table></figure></p>
<h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><blockquote>
<p>Transmission Control Protocol (TCP): TCP provides reliable, ordered, and error-checked delivery of a stream of octets (bytes) between applications running on hosts communicating via an IP network</p>
<p>TCP是面向连接、确保数据在端对端可靠传输的协议。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</div><div class="line">   +-------------------------------+-------------------------------+</div><div class="line">   |          Source Port          |       Destination Port        |</div><div class="line">   |        源机器端口号(16位)        |      目标机器端口号(16位)       |</div><div class="line">   +-------------------------------+-------------------------------+</div><div class="line">   |                        Sequence Number                        |</div><div class="line">   |                        序列号(32位）seq=？                      |</div><div class="line">   +---------------------------------------------------------------+</div><div class="line">   |                    Acknowledgment Number                      |</div><div class="line">   |                     确认序号(32位）ack=？                       |</div><div class="line">   +-------+-----------+-+-+-+-+-+-+-------------------------------+</div><div class="line">   |  Data |           |U|A|P|R|S|F|                               |</div><div class="line">   | Offset| Reserved  |R|C|S|S|Y|I|            Window             |</div><div class="line">   |       |           |G|K|H|T|N|N|                               |</div><div class="line">   |  头部  |           |           |                               |</div><div class="line">   |  长度  |   保留    |    FALG   |          滑动窗口大小           |</div><div class="line">   | (4位) |   (6位）   |           |           （16位）             |</div><div class="line">   +-------+-----------+-+-+-+-+-+-+-------------------------------+</div><div class="line">   |           Checksum            |         Urgent Pointer        |</div><div class="line">   |           校验和(16位)         |          紧急指针(16位）        |</div><div class="line">   +-------------------------------+---------------+---------------+</div><div class="line">   |                    Options                    |    Padding    |</div><div class="line">   +-----------------------------------------------+---------------+</div><div class="line">   |                             data                              |</div><div class="line">   +---------------------------------------------------------------+</div><div class="line">- Sequence Number: seq,本报文段所发送的数据的第1个字节的序号。解决的是包乱序的问题</div><div class="line">- Acknowledgment Number: ack,接受的seq+1。即解决是否丢包的问题</div><div class="line">- ACK(Acknowledgement Number): 根据ack确认收到的数据</div><div class="line">- SYN(Synchronize Sequence Numbers): 建立连接时的同步信息</div><div class="line">- FIN(Finish): 意味将要关闭连接</div><div class="line">- Window:TCP的流量控制，这个值是接收端期望接收的字节数。睡着ack一起发给发送方。</div></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="可靠传输保证"><a href="#可靠传输保证" class="headerlink" title="可靠传输保证"></a>可靠传输保证</h3><h4 id="seq-ack"><a href="#seq-ack" class="headerlink" title="seq+ack"></a>seq+ack</h4><p>seq的编号可以保障报传递时候的顺序<br>ack=seq+1，可以保证是否丢包，同时期望下次请求的seq=ack</p>
<h5 id="三次握手与四次挥手"><a href="#三次握手与四次挥手" class="headerlink" title="三次握手与四次挥手"></a>三次握手与四次挥手</h5><p><img src="/tfl/pictures/201901/tapd_20091751_1547276603_53.jpg" alt="图片描述"><br>我们通过WireShark抓包验证下：</p>
<p>3次握手抓包<br><img src="/tfl/pictures/201901/tapd_20091751_1547276617_99.png" alt="图片描述"><br>4次挥手抓包<br><img src="/tfl/pictures/201901/tapd_20091751_1547276624_40.png" alt="图片描述"></p>
<h4 id="TCP重传机制"><a href="#TCP重传机制" class="headerlink" title="TCP重传机制"></a>TCP重传机制</h4><p>seq+ack可以保证理想情况下的可靠和有序传播，如果遇到丢包或者网络超时这种非理想情况下，就需要重传机制来进行补偿。</p>
<p>重传触发有两种机制：</p>
<ol>
<li>时间维度(超时重传)。通过RTT(Round Trip Time)推算出Timeout，RTO（Retransmission TimeOut）。</li>
<li>数据维度(快速重传)。发送方连续收到3次相同的ack，就重传。<br>无论是哪种机制，都需要做一个选择，即丢包之后的数据如何处理？<br>例如发送端发送了1,2,3,4,5<br>其中3丢包了。<br>接收端实际接受了1,2,4,5，同时ack返回了3，但是4,5的ack并没有返回，发送方无法判断4,5是否丢包。<br>一种是仅重传timeout的包。也就是第3份数据。<br>另一种是重传timeout后所有的数据，也就是第3，4，5这三份数据。</li>
</ol>
<h5 id="SACK-Selective-Acknowledgment"><a href="#SACK-Selective-Acknowledgment" class="headerlink" title="SACK(Selective Acknowledgment)"></a>SACK(Selective Acknowledgment)</h5><p>在TCP头里加一个SACK,SACK存储的是收到的数据碎片，如下图所示。<br><img src="/tfl/pictures/201901/tapd_20091751_1547276654_94.jpg" alt="图片描述"></p>
<h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>在保证可靠传输的情况下，我们还需要根据网络拥堵情况与数据处理速度来进行流量控制，防止出现阻塞丢包的情况。</p>
<h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><p>滑动窗口类似<code>背压</code>的作用，接收端通过传给发送端window大小，从而控制发送端发送数据的大小。<br>滑动窗口分为接受窗口，发送窗口。<br>对于TCP字节流，分为4部分:  </p>
<ol>
<li>已发送且已ack</li>
<li>已发送但未ack</li>
<li>未发送但对方可接受</li>
<li>对方未允许发送  </li>
</ol>
<p>其中2和3即是发送窗口。<br><img src="/tfl/pictures/201901/tapd_20091751_1547276663_14.png" alt="图片描述"></p>
<p>下面是一个完整的请求实例：<br><img src="/tfl/pictures/201901/tapd_20091751_1547276671_32.png" alt="图片描述"></p>
<h4 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h4><p>滑动窗口只解决的客户端处理数据的能力，TCP协议还对拥堵控制进行一些管控。<br>TCP通过通信双方维护一个拥塞窗口（cwnd，congesion window）值来决定发送速率。网络越阻塞，cwnd值越小，发送越缓慢。</p>
<p>拥塞控制一般以慢热启动，即刚连接时，速率较慢，根据网络情况，指数级的增加cwnd值。<br>当到达ssthresh（slow start threshold，一般65535字节）后会运用拥塞避免算法进行一个线性增加，直至一个最佳的速率。<br>当然还有很多算法没有介绍，但最终的目的都是为了结合网络情况找到一个合适的传输速率、</p>
<hr>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li><a href="https://coolshell.cn/articles/11564.html" target="_blank" rel="external">TCP 的那些事儿</a> </li>
<li><a href="https://zh.wikipedia.org/wiki/TCP/IP%E5%8D%8F%E8%AE%AE%E6%97%8F" target="_blank" rel="external">https://zh.wikipedia.org/wiki/TCP/IP%E5%8D%8F%E8%AE%AE%E6%97%8F</a></li>
<li><a href="https://support.huawei.com/hedex/pages/EDOC100010596730006905/04/EDOC100010596730006905/04/resources/message/cd_feature_cover.html" target="_blank" rel="external">https://support.huawei.com/hedex/pages/EDOC100010596730006905/04/EDOC100010596730006905/04/resources/message/cd_feature_cover.html</a></li>
<li><a href="https://www.amazon.cn/dp/B07HCDC3C2/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1546455236&amp;sr=1-1&amp;keywords=%E7%A0%81%E5%87%BA%E9%AB%98%E6%95%88" target="_blank" rel="external">码出高效</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> Hexo教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> tcp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[es6里的异步实现]]></title>
      <url>/2019/03/14/es6%E9%87%8C%E7%9A%84%E5%BC%82%E6%AD%A5%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><h4 id="Promise-是什么？"><a href="#Promise-是什么？" class="headerlink" title="Promise 是什么？"></a>Promise 是什么？</h4><p><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="external">阮一峰: Promise 对象</a> </p>
<blockquote>
<p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。</p>
</blockquote>
<h4 id="Promise-的特点？"><a href="#Promise-的特点？" class="headerlink" title="Promise 的特点？"></a>Promise 的特点？</h4><blockquote>
<p>首先我们知道 promise 对象有三个状态，分别被为pending（等待）、fulfilled（完成）、rejected（失败）<br>状态只可以从pending -&gt; fulfilled 或者 pending -&gt; rejected</p>
</blockquote>
<ul>
<li>状态只能由它内部改变</li>
<li>状态不可逆</li>
</ul>
<a id="more"></a>
<ol>
<li>内部最好写异步操作，毕竟它是异步编程的一种解决方案 <blockquote>
<p>可以很方便的解决回调地狱这种问题</p>
</blockquote>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">$.ajax(<span class="string">'url'</span>, params, funtion (res) &#123;</div><div class="line"></div><div class="line">  $.ajax(<span class="string">'url'</span>, res , funtion (res1) &#123;</div><div class="line">  </div><div class="line">    $.ajax(<span class="string">'url'</span>, res1, funtion (res2) &#123;</div><div class="line">            <span class="built_in">console</span>.log(res2)</div><div class="line">        &#125;)</div><div class="line">        </div><div class="line">    &#125;)  </div><div class="line">    </div><div class="line">&#125;)</div><div class="line"></div><div class="line">fucntion ajax (url, params) &#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</div><div class="line">    </div><div class="line">         <span class="comment">// 异步操作 才有意义</span></div><div class="line">        $.ajax(url, params, funtion (res) &#123;</div><div class="line">            resolve(res);</div><div class="line">        &#125;)</div><div class="line">        </div><div class="line">    &#125;)</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">    ajax(<span class="string">'u1'</span>, <span class="string">'p1'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">         <span class="keyword">return</span> ajax(<span class="string">'u2'</span>, res); <span class="comment">// 将 ajax 返回的 promise中的值传递给 then返回的promise。 </span></div><div class="line">    &#125;).then(<span class="function">(<span class="params">res1</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> ajax(<span class="string">'u3'</span>, res1);</div><div class="line">    &#125;).then(<span class="function">(<span class="params">res2</span>) =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="number">2</span>)</div><div class="line">    &#125;)</div></pre></td></tr></table></figure>
<ol>
<li>Promise 构造函数的基本实现</li>
</ol>
<ul>
<li>再给实例化的promise中传递的回调中无法用return 代替 resolve <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// promise 其实就是一个状态机 通过不同的状态执行不同的操作</span></div><div class="line">      <span class="keyword">const</span> pending = <span class="string">'pending'</span>;</div><div class="line">      <span class="keyword">const</span> resolved = <span class="string">'resolved'</span>;</div><div class="line">      <span class="keyword">const</span> rejected = <span class="string">'rejected'</span>;</div><div class="line"></div><div class="line">      <span class="comment">// MyPromise 模拟 promise构造函数 简易的实现</span></div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">MyPromise</span> (<span class="params">fn</span>) </span>&#123; <span class="comment">// ‘func’ 方便this指向清晰</span></div><div class="line">          <span class="keyword">const</span> _this = <span class="keyword">this</span>; <span class="comment">// 缓存当前 promise 实例对象</span></div><div class="line">          _this.state = pending; <span class="comment">// 初始状态</span></div><div class="line">          _this.value = <span class="literal">undefined</span>; <span class="comment">// promise 中存的值</span></div><div class="line"></div><div class="line">          <span class="comment">/*</span></div><div class="line"><span class="comment">          * 当promise在pending的时候</span></div><div class="line"><span class="comment">          * 会将我们写在.then(() =&gt; &#123;&#125;, () =&gt; &#123;&#125;)中的回调传给下边的俩个数组</span></div><div class="line"><span class="comment">          * */</span></div><div class="line">          _this.resovleCallbacks = [];</div><div class="line">          _this.rejectCallbacks = [];</div><div class="line"></div><div class="line">          <span class="comment">// 为什么resolve 加setTimeout?</span></div><div class="line">          <span class="comment">// 实践中要确保 onFulfilled 和 onRejected 方法异步执行，且应该在 then </span></div><div class="line">          <span class="comment">// 方法被调用的那一轮事件循环之后的新执行栈中执行。</span></div><div class="line"></div><div class="line">          <span class="comment">// 我在平常的时候 以为在回调中 resolve了 状态就会立即改变 然而 并不是</span></div><div class="line">          _this.resolve = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123; <span class="comment">// 当我们在回调中 调用它的时候就会触发 异步代码</span></div><div class="line">              <span class="keyword">if</span> (val <span class="keyword">instanceof</span> MyPromise) &#123; <span class="comment">// 检测 resolve(val) 的值是不是 promise对象</span></div><div class="line">                <span class="keyword">return</span> val.then(_this.resolve, _this.reject); <span class="comment">// 通过递归 将 val(promise) 的值 传给最外层的promise </span></div><div class="line">              &#125;</div><div class="line"></div><div class="line">              <span class="keyword">if</span> (_this.state !== resolved) &#123; <span class="comment">// 第一次调用 状态是pending 所以为 true</span></div><div class="line">                  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 这里异步 then 中回调就会传到 callbacks = []</span></div><div class="line">                      <span class="comment">// 一个 promise 状态只可以改变一次</span></div><div class="line">                    _this.state = resolved;</div><div class="line">                    _this.value = val;</div><div class="line">                    _this.resovleCallbacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn());</div><div class="line">                  &#125;)</div><div class="line">              &#125;</div><div class="line">          &#125;;</div><div class="line"></div><div class="line">          <span class="keyword">this</span>.reject = <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123; <span class="comment">// 可以传递promise 但会报错</span></div><div class="line">            <span class="keyword">if</span> (_this.state === rejected) &#123;</div><div class="line">                setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    _this.state = rejected;</div><div class="line">                    _this.value = err;</div><div class="line">                    _this.rejectCallbacks.forEach(<span class="function"><span class="params">fn</span> =&gt;</span> fn());</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">          &#125;;</div><div class="line"></div><div class="line">          <span class="keyword">try</span> &#123;</div><div class="line">            fn(_this.resolve, _this.reject); <span class="comment">// 调用传入的回调函数</span></div><div class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">            _this.reject(e); <span class="comment">// 捕获 回调内部 报错</span></div><div class="line">          &#125;</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>then 方法<blockquote>
<p>Promise.prototype 上的一个属性，所以每一个promise实例都可以用它<br>then 方法必须返回一个 promise 对象<br>then 方法可以被同一个 promise 调用多次</p>
</blockquote>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>.then() 会生成一个新的promise实例</div><div class="line"></div><div class="line">    </div><div class="line">    MyPromise.prototype.then = <span class="function"><span class="keyword">function</span> (<span class="params">onResolved, onRejected</span>) </span>&#123;</div><div class="line">          <span class="keyword">const</span> self = <span class="keyword">this</span>;</div><div class="line">          <span class="keyword">let</span> newPromise = <span class="literal">null</span>;</div><div class="line">          </div><div class="line">          <span class="comment">// 如果类型不是函数需要忽略，同时也实现了透传</span></div><div class="line">          <span class="comment">// Promise.resolve(4).then().then((value) =&gt; console.log(value))</span></div><div class="line">          </div><div class="line">         <span class="comment">// onFulfilled 和 onRejected 必须被作为函数调用</span></div><div class="line">          onResolved = <span class="keyword">typeof</span> onResolved === <span class="string">'function'</span> ? onResolved : <span class="function"><span class="params">v</span> =&gt;</span> v;</div><div class="line">          onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="params">r</span> =&gt;</span> &#123;<span class="keyword">throw</span> r&#125;;</div><div class="line">          </div><div class="line">          <span class="keyword">if</span> (self.state === resolved) &#123;</div><div class="line">              newPromise = <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">                  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 保证 onResolved 和 onRejected 异步 // 该回调会在 当前promise实例的状态改变之后调用</span></div><div class="line">                      <span class="keyword">try</span> &#123; <span class="comment">// 防止报错</span></div><div class="line">                          <span class="keyword">const</span> x = onResolved(self.value);</div><div class="line">                          resolvePromise(newPromise, x, resolve, reject); <span class="comment">//  判断 x 的类型执行对应操作</span></div><div class="line">                      &#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">                          reject(err);</div><div class="line">                      &#125;</div><div class="line">                  &#125;);</div><div class="line"></div><div class="line">              &#125;);</div><div class="line"></div><div class="line">              <span class="keyword">return</span> newPromise;</div><div class="line">          &#125;</div><div class="line">          <span class="keyword">if</span> (self.state === pending) &#123;</div><div class="line">              newPromise = <span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">                  self.resovleCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="comment">// 该回调会在 当前promise实例的状态改变之前push进去</span></div><div class="line">                      <span class="keyword">try</span> &#123;</div><div class="line">                          <span class="keyword">const</span> x = onResolved(self.value);</div><div class="line">                          resolvePromise(newPromise, x, resolve, reject);</div><div class="line">                      &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">                          reject(e);</div><div class="line">                      &#125;</div><div class="line">                  &#125;);</div><div class="line"></div><div class="line">                  self.rejectCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                      <span class="keyword">try</span> &#123;</div><div class="line">                          <span class="keyword">const</span> x = onResolved(self.value);</div><div class="line">                          resolvePromise(newPromise, x, resolve, reject);</div><div class="line">                      &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">                          reject(e);</div><div class="line">                      &#125;</div><div class="line">                  &#125;);</div><div class="line">              &#125;);</div><div class="line"></div><div class="line">              <span class="keyword">return</span> newPromise;</div><div class="line">          &#125;</div><div class="line">      &#125;;</div><div class="line">      </div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span> (<span class="params">promise2, x, resolve, reject</span>) </span>&#123; <span class="comment">// 对内部生成的 newPromise 进行resolve 给下一个then 传值</span></div><div class="line">          <span class="keyword">if</span> (promise2 === x) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">'防止死循环'</span>);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (x <span class="keyword">instanceof</span> MyPromise) &#123; <span class="comment">// 把 x 的值传给当前的 newPromise</span></div><div class="line">              <span class="keyword">if</span> (x === pending) &#123;</div><div class="line">                  x.then(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</div><div class="line">                      resolvePromise(promise2, val, resolve, reject); <span class="comment">// 检测val的类型，如果合适就传给promise2</span></div><div class="line">                  &#125;, reject)</div><div class="line">              &#125; <span class="keyword">else</span> &#123;</div><div class="line">                  x.then(resolve, reject); <span class="comment">// 直接将x的值 传给promise2</span></div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="keyword">let</span> called = <span class="literal">false</span>; <span class="comment">// 防止thenable内的方法多次调用 例如 resolve 多次调用</span></div><div class="line">          <span class="comment">//</span></div><div class="line">          <span class="keyword">if</span> (x !== <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">'object'</span> || <span class="keyword">typeof</span> x === <span class="string">'function'</span>)) &#123; <span class="comment">// 判断当前 x thenable （函数或对象内具有then属性的方法）</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">               <span class="keyword">let</span> then = x.then; <span class="comment">// 获取 then 的值</span></div><div class="line">               <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">'function'</span>) &#123;</div><div class="line">                   then.call(</div><div class="line">                       x, <span class="comment">// 绑定当前 x 对象</span></div><div class="line">                       y =&gt; &#123; <span class="comment">// 将 then 中resolve的 值传递给 promise2 </span></div><div class="line">                           <span class="keyword">if</span> (called) <span class="keyword">return</span>; </div><div class="line">                           called = <span class="literal">true</span>;</div><div class="line">                           resolvePromise(promise2, y, resolve, reject); <span class="comment">// 验证 y 的类型</span></div><div class="line">                       &#125;,</div><div class="line">                        reason =&gt; &#123;</div><div class="line">                            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</div><div class="line">                            called = <span class="literal">true</span>;</div><div class="line">                            reject(reason);</div><div class="line">                        &#125;</div><div class="line">                       )</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   resolve(x);</div><div class="line">               &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">                <span class="keyword">if</span> (called) <span class="keyword">return</span>;</div><div class="line">                called = <span class="literal">true</span>;</div><div class="line">                reject(e);</div><div class="line">            &#125;</div><div class="line">          &#125; <span class="keyword">else</span> &#123; <span class="comment">// 普通值</span></div><div class="line">              resolve(x);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<ol>
<li>promise 错误处理</li>
</ol>
<p>promise 内部即使报错，它也不会强制导致代码停止运行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// promise内部代码都是在try...catch内部运行的</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// throw Error('错误');</span></div><div class="line">        reject(<span class="string">'错误'</span>);</div><div class="line">    &#125;)</div><div class="line">&#125; <span class="keyword">catch</span> (e) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'并不会捕获到'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// catch() === then(null, () =&gt; &#123;&#125;) catch其实就是then的另一种实现方式 </span></div><div class="line"></div><div class="line"><span class="keyword">let</span> rejected  = <span class="built_in">Promise</span>.reject(<span class="string">'报错'</span>);</div><div class="line"></div><div class="line">rejected.catch(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(val);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<ol>
<li>Promise.race([]) 将可以迭代对象（数组）中最先被改变的promise的值 传给return promies </li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">timerPromise</span>(<span class="params">delay</span>) </span>&#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">              setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                  <span class="keyword">if</span> (delay === <span class="number">40</span>) &#123;</div><div class="line">                      reject(delay);</div><div class="line">                  &#125; <span class="keyword">else</span> &#123;</div><div class="line">                      resolve(delay);</div><div class="line">                  &#125;</div><div class="line">              &#125;, delay);</div><div class="line">          &#125;);</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="built_in">Promise</span>.race([ <span class="comment">// 如果数组中的 promise 的状态改变了当前的promise状态也会随之改变</span></div><div class="line">          timerPromise(<span class="number">40</span>),</div><div class="line">          timerPromise(<span class="number">20</span>),</div><div class="line">          timerPromise(<span class="number">30</span>)</div><div class="line">      ]).then(<span class="function"><span class="params">values</span> =&gt;</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(values);</div><div class="line">      &#125;);</div><div class="line">      </div><div class="line">MyPromise.race = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123; <span class="comment">// 内部实现</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">        promises.forEach(<span class="function"><span class="params">p</span> =&gt;</span> &#123;  </div><div class="line">            p.then(resolve, reject);  <span class="comment">// 如果 p 的状态不是pending 了 resolve这个回调就会调用</span></div><div class="line">        &#125;)                            <span class="comment">// resolve 中具有 return promise对象 的this指针     </span></div><div class="line">                                      <span class="comment">// p 通过then 可以把自己的值传递给 return promise</span></div><div class="line">                                      <span class="comment">// 状态改变逻辑不能重复调用</span></div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>Promise.all([]); </li>
</ol>
<blockquote>
<p>Promise.all可以将多个Promise实例包装成一个新的Promise实例。<br>同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，<br>而失败的时候则返回最先被reject失败状态的值。</p>
</blockquote>
<ul>
<li>在处理多个异步处理时非常有用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span> (<span class="params">promises</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; <span class="comment">// 返回一个promise实例</span></div><div class="line">        <span class="keyword">const</span> length = promises.length;</div><div class="line">        <span class="keyword">let</span> result = gen(length, resolve)</div><div class="line">        promises.forEach(<span class="function">(<span class="params">p, i</span>) =&gt;</span> &#123;</div><div class="line">            <span class="comment">// 将所有的 promise 遍利出来</span></div><div class="line">            p.then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</div><div class="line">                result(i, val)</div><div class="line">            &#125;, reject)</div><div class="line">        &#125;) <span class="comment">// 如果有一个promise 被拒绝 就改变return promise 的状态</span></div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">gen</span> (<span class="params">length, resolve</span>) </span>&#123;</div><div class="line">        <span class="keyword">let</span> count = <span class="number">0</span>; <span class="comment">// 记录循环次数</span></div><div class="line">        <span class="keyword">let</span> values = [];</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            values[i] = value;</div><div class="line">            <span class="keyword">if</span> (++count === length) &#123; <span class="comment">// 遍历完成时改变 return promise 的状态</span></div><div class="line">                resolve(values);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="Iterator-迭代器、遍历器"><a href="#Iterator-迭代器、遍历器" class="headerlink" title="Iterator (迭代器、遍历器)"></a>Iterator (迭代器、遍历器)</h2><blockquote>
<p>为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作</p>
</blockquote>
<h4 id="迭代器的组成接口"><a href="#迭代器的组成接口" class="headerlink" title="迭代器的组成接口"></a>迭代器的组成接口</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> IteratorResult &#123; <span class="comment">// 迭代器结果</span></div><div class="line">    done: <span class="built_in">boolean</span>,</div><div class="line">    value: <span class="built_in">any</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">interface</span> Iterator &#123; <span class="comment">// 迭代器</span></div><div class="line">    next(): IteratorResult </div><div class="line">&#125;</div><div class="line"><span class="keyword">interface</span> Iterable &#123; <span class="comment">// 可迭代对象</span></div><div class="line">    [Symbol.iterator]: Iterator  <span class="comment">// 通过 Symbol.iterator(迭代器生成函数) 生成迭代器</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>什么是迭代器？</p>
<blockquote>
<p>迭代器是一个对象，它一定会有一个 ==next()== 方法，每次调用 ==next()== 方法，<br>就会返回一个迭代器结果。</p>
</blockquote>
<p>什么是迭代器结果？</p>
<blockquote>
<p>迭代器结也是一个对象，这个对象有两个属性：done和value，<br>其中done是一个布尔值，false表示迭代器迭代的序列没有结束；<br>true表示迭代器迭代的序列结束了。而value就是迭代器每次迭代真正返回的值。<br>（它们反应了当前元素和当前状态）</p>
</blockquote>
<p>什么是可迭代对象？</p>
<blockquote>
<p>具有 ==[Symbol.iterator]()== 这个接口的数据结构就叫可迭代对象</p>
<p>es6中原生具备这个接口的数据结构如下：<br>Array、Map、Set、String、函数内部的Arguments对象、NodeList、TypedArray</p>
<p>对象是非线性的数据结构所以没必要部署迭代器接口，因为迭代器是一种线性（有顺序的）处理，<br>而且对象实际上被当作 Map 结构使用，es6原生提供了，<br>如果非要可迭代可以自己添加 ==[Symbol.iterator]()== 这个属性。</p>
</blockquote>
<h4 id="用于操作可迭代对象的语法："><a href="#用于操作可迭代对象的语法：" class="headerlink" title="用于操作可迭代对象的语法："></a>用于操作可迭代对象的语法：</h4><ul>
<li>for … of </li>
<li>[…iterable] (扩展运算符)</li>
<li>Array.from(iterable)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</div><div class="line"></div><div class="line">    <span class="keyword">const</span> sequence = &#123;</div><div class="line">        [<span class="built_in">Symbol</span>.iterator]() &#123;</div><div class="line">            <span class="keyword">let</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                next() &#123;</div><div class="line">                    <span class="keyword">const</span> value = arr[i];</div><div class="line">                    i++;</div><div class="line">                    <span class="keyword">const</span> done = i &gt; arr.length;</div><div class="line">                    <span class="keyword">return</span> &#123;</div><div class="line">                        value,</div><div class="line">                        done</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> val <span class="keyword">of</span> sequence) &#123;</div><div class="line">        <span class="built_in">console</span>.log(val) <span class="comment">// 'a' 'b' 'c' 'd'</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">console</span>.log([...sequence]) <span class="comment">// ["a", "b", "c", "d"]</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(sequence)) <span class="comment">// ["a", "b", "c", "d"]</span></div></pre></td></tr></table></figure>
<h4 id="迭代器中的状态"><a href="#迭代器中的状态" class="headerlink" title="迭代器中的状态"></a>迭代器中的状态</h4><blockquote>
<p>如果迭代器中没有设置终止状态，可以通过for … of 来手动终止</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> random = &#123; <span class="comment">// 如果不改变迭代器结果的状态</span></div><div class="line">      [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</div><div class="line">        next: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">value</span>: <span class="built_in">Math</span>.random() &#125;) </div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [...random] <span class="comment">// 就会死循环</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> val <span class="keyword">of</span> random) &#123; <span class="comment">// for ... of可以通过 break 来退出循环</span></div><div class="line">        <span class="keyword">if</span> (val &gt; <span class="number">0.6</span>) &#123;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">console</span>.log(val);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h2><blockquote>
<p>generator函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。</p>
</blockquote>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">interface</span> Generator <span class="keyword">extends</span> Iterator &#123;</div><div class="line">    next(value?: <span class="built_in">any</span>): IteratorResult; <span class="comment">// 迭代器具有的特征</span></div><div class="line">    [Symbol.iterator](): Iterator; <span class="comment">// 可迭代对象具有的特征</span></div><div class="line">    <span class="keyword">throw</span>(exception: <span class="built_in">any</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成器是什么？</p>
<blockquote>
<p>生成器函数返回的是一个生成器，它内部既有迭代器具有的特征，也有可迭代对象具有的特征，所以说，它既是一个迭代器，又是一个可迭代对象。  </p>
<p>因为生成器还提供了一个 yield 关键字，它返回的序列值会自动包装在一个IteratorResult（迭代器结果）对象中,<br>所以生成器又是迭代器的“加强版”。</p>
</blockquote>
<p>验证一下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">gen</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'a'</span></div><div class="line">  <span class="keyword">yield</span> <span class="string">'b'</span></div><div class="line">  <span class="keyword">return</span> <span class="string">'c'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> g = gen();</div><div class="line"></div><div class="line"><span class="comment">// 生成器具有可迭代对象的特征</span></div><div class="line"><span class="keyword">typeof</span> g[<span class="built_in">Symbol</span>.iterator] === <span class="string">'function'</span> <span class="comment">// g 是个可迭代对象</span></div><div class="line"></div><div class="line"><span class="comment">// 说明它可以被 操作可迭代对象的语法 来操纵</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">const</span> val <span class="keyword">of</span> g) &#123;</div><div class="line">    <span class="built_in">console</span>.log(val) <span class="comment">// a, b</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// for ... of 在 done 为 true 时就停止运行，所以 return 的返回值并不会被遍历出来。</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">typeof</span> g.next === <span class="string">'function'</span>  <span class="comment">// g是迭代器</span></div><div class="line"></div><div class="line">g.next() <span class="comment">// &#123;value: 'a', done: false&#125; // 迭代器是可以直接调用 next 方法的</span></div></pre></td></tr></table></figure></p>
<h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><blockquote>
<p>==yield== 关键字 它可以使生成器函数 ++执行暂停++，yield关键字后面的表达式的值 返回给生成器的调用者。</p>
<p>yield关键字 返回一个IteratorResult对象，它有两个属性，value和done。value属性是对yield表达式求值的结果，而done是迭代完成的状态，一直都是false。（迭代完成或者return会改变done的状态）</p>
</blockquote>
<h4 id="生成器中的yield-与-return"><a href="#生成器中的yield-与-return" class="headerlink" title="生成器中的yield 与 return"></a>生成器中的yield 与 return</h4><blockquote>
<p>它们有些作用是相似的，都可以返回函数中的值，都可以暂停函数的执行。但是yield只是将函数暂时的挂起，而return则表示函数运行结束；</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span> (<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> y = x * (<span class="keyword">yield</span>);</div><div class="line">    <span class="keyword">return</span> y;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> it = gen(<span class="number">3</span>);</div><div class="line"></div><div class="line"><span class="comment">//启动生成器 </span></div><div class="line">it.next(); <span class="comment">// &#123;value: undefined, done: false&#125; </span></div><div class="line"></div><div class="line">it.next(<span class="number">4</span>); <span class="comment">// &#123;value: 12, done: true&#125;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>生成器的独到之处，就是在于它的 ==yiled== 关键字，它的有俩个神奇之处：</p>
<ol>
<li>它是生成器函数暂停和恢复执行的分界点；</li>
<li>它是向外和向内传值（包括错误/异常）的媒介。</li>
</ol>
</blockquote>
<h4 id="生成器的单向执行且不可逆"><a href="#生成器的单向执行且不可逆" class="headerlink" title="生成器的单向执行且不可逆"></a>生成器的单向执行且不可逆</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">gen</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="string">'a'</span></div><div class="line">  <span class="keyword">yield</span> <span class="string">'b'</span></div><div class="line">  <span class="keyword">return</span> <span class="string">'c'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> g = gen();</div><div class="line">[...g] <span class="comment">// ['a', 'b']</span></div><div class="line">[...g] <span class="comment">// []</span></div></pre></td></tr></table></figure>
<h4 id="导致生成器暂停的情况还有两种"><a href="#导致生成器暂停的情况还有两种" class="headerlink" title="导致生成器暂停的情况还有两种"></a>导致生成器暂停的情况还有两种</h4><ol>
<li>到达生成器底部也会停止，生成器执行完成</li>
<li>生成器内部有throw语句它也会导致生成器完全停止执行</li>
</ol>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><blockquote>
<p>生成器的错误可以‘由内而外’也可以‘由外而内再由外’，具体表现如下：</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 由内而外</span></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">testErr</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> x = yiled <span class="string">'hi'</span>;</div><div class="line">    <span class="keyword">yield</span> x.toLowerCase(); <span class="comment">// 内部报错,返回异常</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> it = main();</div><div class="line">it.next().value <span class="comment">// 'hi'</span></div><div class="line"></div><div class="line"><span class="keyword">try</span>&#123;</div><div class="line">    it.next(<span class="number">3</span>); <span class="comment">// 传入导致数值类型错误，外部接收异常</span></div><div class="line">&#125; <span class="keyword">catch</span>(e) &#123; </div><div class="line">    <span class="built_in">console</span>.error(e) <span class="comment">// TypeError</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 由外而内再由外</span></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">main</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> x = <span class="keyword">yield</span> <span class="string">'hi'</span>;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'never gets here'</span>); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> it = main();</div><div class="line">it.next().value; <span class="comment">// 'hi'</span></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line"><span class="comment">// .throw 会给 yield 传递异常信息 和 .next() 传值相似</span></div><div class="line">  it.throw(<span class="string">'报错'</span>); <span class="comment">//导致生成器终止运行</span></div><div class="line">                    <span class="comment">// 生成器接受到异常，又回抛出来</span></div><div class="line">&#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">  <span class="built_in">console</span>.error(err); <span class="comment">// 报错</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="异步迭代生成器"><a href="#异步迭代生成器" class="headerlink" title="异步迭代生成器"></a>异步迭代生成器</h3><blockquote>
<p>生成器的异步在于 ==yield== ,因为它不是++必须++同步等待 .next(val) 来给它传值的，而是可以在异步操作中来调用 .next(val) 把值传给它，所以 yield 是可以等待一个异步操作结果的</p>
<p>利用生成器，在生成器内部以同步的方式来写异步代码</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1 先封一个基于promise的http请求</span></div><div class="line"></div><div class="line">funtion get(url) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</div><div class="line">        $.post(url, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (!data.isErr) &#123;</div><div class="line">                resolve(data);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                reject(data);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 2. 在生成器中请求数据</span></div><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">const</span> data =  <span class="keyword">yield</span> get(<span class="string">'url'</span>);</div><div class="line">    <span class="built_in">console</span>.log(data); </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> f = foo();</div><div class="line"><span class="keyword">const</span> p = f.next().value; <span class="comment">// 获取到get中的promise</span></div><div class="line"></div><div class="line">p.then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</div><div class="line">    f.next(val) <span class="comment">// 获取到promise的值，再通过next返给yield，从而代码恢复执行，输出data</span></div><div class="line">&#125;, err =&gt; &#123;</div><div class="line">    f.throw(err)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="generator中-yiled-与-next"><a href="#generator中-yiled-与-next" class="headerlink" title="generator中 yiled 与 next"></a>generator中 yiled 与 next</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> a = <span class="number">1</span> + <span class="number">2</span>;</div><div class="line">    <span class="keyword">let</span> b = <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">    <span class="keyword">const</span> c = <span class="keyword">yield</span> b;</div><div class="line">    <span class="keyword">yield</span> c;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> b = test();</div><div class="line"><span class="built_in">console</span>.log(b.next());</div><div class="line"><span class="built_in">console</span>.log(b.next(<span class="number">1</span>));</div><div class="line"><span class="built_in">console</span>.log(b.next(<span class="number">2</span>));</div><div class="line"><span class="built_in">console</span>.log(b.next());</div><div class="line"></div><div class="line"><span class="comment">// es5</span></div><div class="line"><span class="keyword">var</span> _marked = <span class="comment">/*#__PURE__*/</span>regeneratorRuntime.mark(test);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a, b, c;</div><div class="line">    <span class="keyword">return</span> regeneratorRuntime.wrap(<span class="function"><span class="keyword">function</span> <span class="title">test$</span>(<span class="params">_context</span>) </span>&#123;</div><div class="line">        <span class="comment">// 可以发现通过 yield 将代码分割成几块</span></div><div class="line">        <span class="comment">// 每次执行 next 函数就执行一块代码</span></div><div class="line">        <span class="comment">// 并且表明下次需要执行哪块代码</span></div><div class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">switch</span> (_context.prev = _context.next) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">                    a = <span class="number">1</span> + <span class="number">2</span>;</div><div class="line">                    _context.next = <span class="number">3</span>;</div><div class="line">                    <span class="keyword">return</span> <span class="number">2</span>;</div><div class="line"></div><div class="line">                <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                    b = _context.sent;</div><div class="line">                    _context.next = <span class="number">6</span>;</div><div class="line">                    <span class="keyword">return</span> b;</div><div class="line"></div><div class="line">                <span class="keyword">case</span> <span class="number">6</span>:</div><div class="line">                    c = _context.sent;</div><div class="line">                    _context.next = <span class="number">9</span>;</div><div class="line">                    <span class="keyword">return</span> c;</div><div class="line"></div><div class="line">                <span class="keyword">case</span> <span class="number">9</span>:</div><div class="line">                <span class="keyword">case</span> <span class="string">"end"</span>:</div><div class="line">                    <span class="keyword">return</span> _context.stop();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;, _marked, <span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> b = test();</div><div class="line"><span class="built_in">console</span>.log(b.next());</div><div class="line"><span class="built_in">console</span>.log(b.next(<span class="number">1</span>));</div><div class="line"><span class="built_in">console</span>.log(b.next(<span class="number">2</span>));</div><div class="line"><span class="built_in">console</span>.log(b.next());</div></pre></td></tr></table></figure>
<h2 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h2><blockquote>
<p>async 函数是 Generator 函数的语法糖。使用 关键字 async 来表示，在函数内部使用 await 来表示异步。</p>
</blockquote>
<h3 id="async-await-可以让异步代码以同步的方式来编写"><a href="#async-await-可以让异步代码以同步的方式来编写" class="headerlink" title="async/await 可以让异步代码以同步的方式来编写"></a>async/await 可以让异步代码以同步的方式来编写</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">get(url, () =&gt; &#123;</div><div class="line">    get(url2, () =&gt; &#123;</div><div class="line">    </div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> getData = <span class="keyword">async</span> () =&gt; &#123; <span class="comment">// 改善了嵌套的问题</span></div><div class="line">    <span class="keyword">const</span> g1 = <span class="keyword">await</span> get(url1);  </div><div class="line">    <span class="keyword">const</span> g2 = <span class="keyword">await</span> get(url2);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// async 中的await 等的就是Promise </span></div><div class="line"><span class="comment">// 它可以将promise中resolve或reject（所以也可以在async用try...catch来捕获primise拒绝的信息）的值返回出来</span></div><div class="line"></div><div class="line"><span class="comment">// 它也可以等待原始类型的值（Number，string，boolean，但这时等同于同步操作）</span></div><div class="line"><span class="comment">// 但是这并没有多大意义</span></div></pre></td></tr></table></figure>
<h3 id="谨慎使用async-await"><a href="#谨慎使用async-await" class="headerlink" title="谨慎使用async/await"></a>谨慎使用async/await</h3><blockquote>
<p>如果将并发的请求中写在同一个 async 函数中会造成性能损失</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">get(url1, () =&gt; &#123;</div><div class="line">    get(url2, () =&gt; &#123;</div><div class="line">    </div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line">get(url3, () =&gt; &#123;</div><div class="line">    get(url4, () =&gt; &#123;</div><div class="line">    </div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> getData = <span class="keyword">async</span> () =&gt; &#123; <span class="comment">// 因为await会等待promise状态改变才会执行它下面的代码</span></div><div class="line">    <span class="keyword">const</span> g1 = <span class="keyword">await</span> get(url1);</div><div class="line">    <span class="keyword">const</span> g2 = <span class="keyword">await</span> get(url2);</div><div class="line">    <span class="keyword">const</span> g3 = <span class="keyword">await</span> get(url3);</div><div class="line">    <span class="keyword">const</span> g4 = <span class="keyword">await</span> get(url4);</div><div class="line">    </div><div class="line">&#125;</div><div class="line"><span class="comment">// 所以这样的写法在运行的过程中，其实是将 g3 并发的请求也嵌套了进去</span></div><div class="line">这就会加长请求的时间，影响性能</div><div class="line">get(url1, () =&gt; &#123;</div><div class="line">    get(url2, () =&gt; &#123;</div><div class="line">        get(url3, () =&gt; &#123;</div><div class="line">            get(url4, () =&gt; &#123;</div><div class="line">            </div><div class="line">            &#125;)</div><div class="line">&#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="Async-中-return-和-return-await"><a href="#Async-中-return-和-return-await" class="headerlink" title="Async 中 return 和 return await ;"></a>Async 中 return 和 return await ;</h3><blockquote>
<p>函数前面加了async 该函数会默认返回一个promise</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    reutrn <span class="built_in">Promise</span>.resolve(); <span class="comment">// promise 的值默认为 undefined</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'valeu'</span>; <span class="comment">// return返回的值 实际上是被包在了 promise 中</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Async 中的 await 后边的表达式是一个promise 才有有意义，promise 中值可以通过 await 来返回<br>Async 中 return 和 return await 只在 try…catch 中才有区别</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'错错错'</span>); <span class="comment">// reject(new Error('错错错'));</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 类似与</span></div><div class="line"><span class="keyword">const</span> test = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'错错错'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ul>
<li><p>Async 中的 return；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> test(); <span class="comment">// 重点关注</span></div><div class="line">    &#125;<span class="keyword">catch</span>(err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'这个并不会捕获到错误'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;)().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'resolved'</span>);</div><div class="line">&#125;, (err) =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'rejected'</span>); </div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 输出：rejected</span></div></pre></td></tr></table></figure>
</li>
<li><p>Async 中的 return await；</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">await</span> test(); <span class="comment">// 重点关注</span></div><div class="line">    &#125;<span class="keyword">catch</span>(err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'会捕获到这个错误'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;)().then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'resolved'</span>);</div><div class="line">&#125;, () =&gt; &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'rejected'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 输出：</span></div><div class="line"><span class="comment">// 会捕获到这个错误</span></div><div class="line"><span class="comment">// resolved</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Async-是-Generator的语法糖"><a href="#Async-是-Generator的语法糖" class="headerlink" title="Async 是 Generator的语法糖"></a>Async 是 Generator的语法糖</h3><blockquote>
<p>async 内部的语法逻辑 可以通过Generator加一个运行器来实现</p>
</blockquote>
<h4 id="运行器"><a href="#运行器" class="headerlink" title="运行器"></a>运行器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">generator</span>) </span>&#123;</div><div class="line">    <span class="comment">// 返回一个promise</span></div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</div><div class="line">  </div><div class="line">    <span class="keyword">const</span> it = generator() <span class="comment">// 返回生成器</span></div><div class="line">    </div><div class="line">    step(<span class="function"><span class="params">()</span> =&gt;</span> it.next())</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params">nextFn</span>) </span>&#123;</div><div class="line">      <span class="keyword">const</span> result = runNext(nextFn) <span class="comment">// 得到IteratorResult</span></div><div class="line">      <span class="keyword">if</span> (result.done) &#123; <span class="comment">// done 为 true说明 return语句 运行结束 </span></div><div class="line">        resolve(result.value) <span class="comment">// 将请求返回的值转给当前的promise</span></div><div class="line">        <span class="keyword">return</span></div><div class="line">      &#125;</div><div class="line">      <span class="built_in">Promise</span></div><div class="line">        .resolve(result.value) <span class="comment">// 获取生成器中的promise</span></div><div class="line">        .then(                      </div><div class="line">          value =&gt; step(<span class="function"><span class="params">()</span> =&gt;</span> it.next(value)), <span class="comment">// 将promise中的值传给生成器中yield</span></div><div class="line">          err =&gt; step(<span class="function"><span class="params">()</span> =&gt;</span> it.throw(err))</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">runNext</span>(<span class="params">nextFn</span>) </span>&#123; <span class="comment">// 错误处理</span></div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> nextFn()</div><div class="line">      &#125; <span class="keyword">catch</span> (err) &#123;</div><div class="line">        reject(err)</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">  &#125;)</div><div class="line">  </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 通过生成器运行程序控制异步代码</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> run(<span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</div><div class="line">    </div><div class="line">        <span class="keyword">const</span> r1 = <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</div><div class="line">            setTimeout(resolve, <span class="number">500</span>, <span class="string">'r1value'</span>);</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">         <span class="keyword">const</span> r2 = <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</div><div class="line">            setTimeout(resolve, <span class="number">200</span>, <span class="string">'r2value'</span>);</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> [r1, r2];</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line">example.then(<span class="function"><span class="params">val</span> =&gt;</span> <span class="built_in">console</span>.log(val)); <span class="comment">// ['r1value', 'r2value']</span></div><div class="line"></div><div class="line"><span class="comment">// async/await 来控制异步代码</span></div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 内置了运行器函数</span></div><div class="line">    <span class="keyword">const</span> r1 = <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</div><div class="line">            setTimeout(resolve, <span class="number">500</span>, <span class="string">'r1value'</span>);</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">    <span class="keyword">const</span> r2 = <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</div><div class="line">            setTimeout(resolve, <span class="number">200</span>, <span class="string">'r2value'</span>);</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">    <span class="keyword">return</span> [r1, r2];</div><div class="line">&#125;</div><div class="line"></div><div class="line">example.then(<span class="function"><span class="params">val</span> =&gt;</span> <span class="built_in">console</span>.log(val)); <span class="comment">// ['r1value', 'r2value']</span></div></pre></td></tr></table></figure>
<blockquote>
<p> async/await 其实是基于promise、iterator、generator的‘语法糖’</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[web缓存]]></title>
      <url>/2019/03/14/web%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<h3 id="前端缓存"><a href="#前端缓存" class="headerlink" title="前端缓存"></a>前端缓存</h3><p>前端缓存主要是分为HTTP缓存和浏览器缓存。<br>其中HTTP缓存是在HTTP请求传输时用到的缓存，主要在服务器代码上设置；而浏览器缓存则主要由前端开发在前端js上进行设置。</p>
<p><img src="/images/cache/00bf9849ec2780d4ae4764e7979023c9.png" alt="概述"></p>
]]></content>
      
        
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[bind方法实现]]></title>
      <url>/2019/03/12/bind%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">Function.prototype._bind = function()&#123;</div><div class="line">    var self = this;</div><div class="line">        context = [].shift.call(arguments),</div><div class="line">        args = [].slice.call(arguments);</div><div class="line">    return function()&#123;</div><div class="line">        self.apply(context, [].contact.call(args, [].slice.call(arguments)));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// MDN Polyfill</div><div class="line">if (!Function.prototype.bind) &#123;</div><div class="line">  Function.prototype.bind = function(oThis) &#123;</div><div class="line">    if (typeof this !== &apos;function&apos;) &#123;</div><div class="line">      // closest thing possible to the ECMAScript 5</div><div class="line">      // internal IsCallable function</div><div class="line">      throw new TypeError(&apos;Function.prototype.bind - what is trying to be bound is not callable&apos;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    var aArgs   = Array.prototype.slice.call(arguments, 1),</div><div class="line">        fToBind = this,</div><div class="line">        fNOP    = function() &#123;&#125;,</div><div class="line">        fBound  = function() &#123;</div><div class="line">          // this instanceof fBound === true时,说明返回的fBound被当做new的构造函数调用</div><div class="line">          return fToBind.apply(this instanceof fBound</div><div class="line">                 ? this</div><div class="line">                 : oThis,</div><div class="line">                 // 获取调用时(fBound)的传参.bind 返回的函数入参往往是这么传递的</div><div class="line">                 aArgs.concat(Array.prototype.slice.call(arguments)));</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">    // 维护原型关系</div><div class="line">    if (this.prototype) &#123;</div><div class="line">      // Function.prototype doesn&apos;t have a prototype property</div><div class="line">      fNOP.prototype = this.prototype; </div><div class="line">    &#125;</div><div class="line">    // 下行的代码使fBound.prototype是fNOP的实例,因此</div><div class="line">    // 返回的fBound若作为new的构造函数,new生成的新对象作为this传入fBound,新对象的__proto__就是fNOP的实例</div><div class="line">    fBound.prototype = new fNOP();</div><div class="line"></div><div class="line">    return fBound;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility" target="_blank" rel="external">MDN Polyfill</a></p>
]]></content>
      
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[new Object发生了什么]]></title>
      <url>/2019/03/11/new%E6%93%8D%E4%BD%9C%E7%AC%A6/</url>
      <content type="html"><![CDATA[<h3 id="new-XXX-发生了什么？"><a href="#new-XXX-发生了什么？" class="headerlink" title="new XXX()发生了什么？"></a>new XXX()发生了什么？</h3><ol>
<li>创建一个新对象</li>
<li>将构造函数的作用域赋给新对象（因此this就指向了这个新对象）</li>
<li>执行构造函数中的代码（为这个新对象添加属性）</li>
<li>返回新对象</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">function creatObj() &#123;</div><div class="line">    var obj = new Object(),</div><div class="line">        Constructor = [].shift.call(arguments);</div><div class="line">    obj.__proto__ = Constructor.prototype;</div><div class="line">    var ret = Constructor.apply(obj, arguments);</div><div class="line">    return typeof ret === &apos;Object&apos; ? ret : obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line">function Person(name)&#123;</div><div class="line">    this.name = name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person.prototype.getName = function()&#123;</div><div class="line">    return this.name;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var a = creatObj(Person, &apos;seven&apos;);</div><div class="line">console.log(a.name)   // seven</div><div class="line">console.log(a.getName)   // seven</div><div class="line">console.log(Object.getPrototypeOf(a) === Person.prototype)   // true</div><div class="line"></div><div class="line">下面两句代码产生了一样的结果</div><div class="line">var a = creatObj(Person, &apos;seven&apos;)</div><div class="line">var a = new Person(&apos;seven&apos;)</div><div class="line"></div><div class="line">// 另一种写法</div><div class="line">function creatObj() &#123;</div><div class="line">    var Constructor = [].shift.call(arguments),</div><div class="line">        obj = Object.create(Constructor.prototype);</div><div class="line">    var ret = Constructor.apply(obj, arguments);</div><div class="line">    return typeof ret === &apos;Object&apos; ? ret : obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[css常用技巧]]></title>
      <url>/2017/12/22/css%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      <content type="html"><![CDATA[<p>1.<strong>黑白图像</strong><br>这段代码会让你的彩色照片显示为黑白照片，是不是很酷？<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">img</span><span class="selector-class">.desaturate</span> &#123;</div><div class="line">    <span class="attribute">filter</span>: <span class="built_in">grayscale</span>(100%);</div><div class="line">    <span class="attribute">-webkit-filter</span>: <span class="built_in">grayscale</span>(100%);</div><div class="line">    <span class="attribute">-moz-filter</span>: <span class="built_in">grayscale</span>(100%);</div><div class="line">    <span class="attribute">-ms-filter</span>: <span class="built_in">grayscale</span>(100%);</div><div class="line">    <span class="attribute">-o-filter</span>: <span class="built_in">grayscale</span>(100%);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>2.<strong>使用 :not() 在菜单上应用/取消应用边框</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">先给每一个菜单项添加边框</div><div class="line"><span class="comment">/* add border */</span></div><div class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span> &#123;</div><div class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#666</span>;</div><div class="line">&#125;</div><div class="line">……然后再除去最后一个元素……</div><div class="line">// remove border /</div><div class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</div><div class="line">  <span class="attribute">border-right</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以直接使用 :not() 伪类来应用元素：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:last-child)</span> &#123;</div><div class="line">  <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="number">#666</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样代码就干净，易读，易于理解了。<br>当然，如果你的新元素有兄弟元素的话，也可以使用通用的兄弟选择符（~）：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.nav</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span> ~ <span class="selector-tag">li</span> &#123;</div><div class="line">  <span class="attribute">border-left</span>: <span class="number">1px</span> solid <span class="number">#666</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.<strong>页面顶部阴影</strong><br>下面这个简单的 CSS3 代码片段可以给网页加上漂亮的顶部阴影效果：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">          <span class="attribute">content</span>: <span class="string">""</span>;</div><div class="line">          <span class="attribute">position</span>: fixed;</div><div class="line">          <span class="attribute">top</span>: -<span class="number">10px</span>;</div><div class="line">          <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">          <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">          <span class="attribute">height</span>: <span class="number">10px</span>;</div><div class="line">          <span class="attribute">-webkit-box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0,0,0,.8);</div><div class="line">          <span class="attribute">-moz-box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0,0,0,.8);</div><div class="line">          <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0,0,0,.8);</div><div class="line">          <span class="attribute">z-index</span>: <span class="number">100</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4.<strong>给 body 添加行高</strong><br>你不需要分别添加 line-height 到每个p,h标记等。只要添加到 body 即可：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样文本元素就可以很容易地从 body 继承。<br>所有一切都垂直居中<br>要将所有元素垂直居中，太简单了：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">-webkit-align-items</span>: center;  </div><div class="line">  <span class="attribute">-ms-flex-align</span>: center;  </div><div class="line">  <span class="attribute">align-items</span>: center;</div><div class="line">  <span class="attribute">display</span>: -webkit-flex;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>看，是不是很简单。<br>注意：在IE11中要小心flexbox。</p>
<p>5.<strong>逗号分隔的列表</strong><br>让HTML列表项看上去像一个真正的，用逗号分隔的列表：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:last-child)</span><span class="selector-pseudo">::after</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">","</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>对最后一个列表项使用 :not() 伪类。<br>使用负的 nth-child 选择项目<br>在CSS中使用负的 nth-child 选择项目1到项目n。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">li</span> &#123;</div><div class="line">  <span class="attribute">display</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* select items 1 through 3 and display them */</span></div><div class="line"><span class="selector-tag">li</span><span class="selector-pseudo">:nth-child(-n+3)</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>6.<strong>对图标使用 SVG</strong><br>我们没有理由不对图标使用SVG：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.logo</span> &#123;</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"logo.svg"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>SVG对所有的分辨率类型都具有良好的扩展性，并支持所有浏览器都回归到IE9。这样可以避开.png、.jpg或.gif文件了。</p>
<p>7.<strong>优化显示文本</strong><br>有时，字体并不能在所有设备上都达到最佳的显示，所以可以让设备浏览器来帮助你：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span> &#123;</div><div class="line">  <span class="attribute">-moz-osx-font-smoothing</span>: grayscale;</div><div class="line">  <span class="attribute">-webkit-font-smoothing</span>: antialiased;</div><div class="line">  <span class="attribute">text-rendering</span>: optimizeLegibility;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>注：请负责任地使用 optimizeLegibility。此外，IE /Edge没有 text-rendering 支持。</code></p>
<p>8.<strong>对纯 CSS 滑块使用 max-height</strong><br>使用 max-height 和溢出隐藏来实现只有CSS的滑块：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.slider</span> <span class="selector-tag">ul</span> &#123;</div><div class="line">  <span class="attribute">max-height</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">overlow</span>: hidden;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.slider</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">ul</span> &#123;</div><div class="line">  <span class="attribute">max-height</span>: <span class="number">1000px</span>;</div><div class="line">  <span class="attribute">transition</span>: .<span class="number">3s</span> ease;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>9.<strong>继承 box-sizing</strong><br>让 box-sizing 继承 html：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span> &#123;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div><div class="line">*, *<span class="selector-pseudo">:before</span>, *<span class="selector-pseudo">:after</span> &#123;</div><div class="line">  <span class="attribute">box-sizing</span>: inherit;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样在插件或杠杆其他行为的其他组件中就能更容易地改变 box-sizing 了。</p>
<p>10.<strong>表格单元格等宽</strong><br>表格工作起来很麻烦，所以务必尽量使用 table-layout: fixed 来保持单元格的等宽：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.calendar</span> &#123;</div><div class="line">  <span class="attribute">table-layout</span>: fixed;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>11.<strong>用 Flexbox 摆脱外边距的各种 hack</strong><br>当需要用到列分隔符时，通过flexbox的 space-between 属性，你就可以摆脱nth-，first-，和 last-child 的hack了：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.list</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: space-between;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.list</span> <span class="selector-class">.person</span> &#123;</div><div class="line">  <span class="attribute">flex-basis</span>: <span class="number">23%</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>现在，列表分隔符就会在均匀间隔的位置出现。</p>
<p>12.<strong>使用属性选择器用于空链接</strong><br>当a元素没有文本值，但 href 属性有链接的时候显示链接：<br>a[href^=”http”]:empty::before {<br>  content: attr(href);<br>}<br>相当方便。</p>
<p>13.<strong>检测鼠标双击</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">HTML：</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test3"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">" "</span> <span class="attr">readonly</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.fly33.top"</span>&gt;</span>Double click me<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">CSS</span>：</div><div class="line"><span class="selector-class">.test3</span> <span class="selector-tag">span</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.test3</span> <span class="selector-tag">span</span> <span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.test3</span> <span class="selector-tag">span</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.test3</span> <span class="selector-tag">span</span> <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">4</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.test3</span> <span class="selector-tag">span</span> <span class="selector-tag">input</span> &#123;</div><div class="line">  <span class="attribute">background</span>: transparent;</div><div class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">cursor</span>: pointer;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: -<span class="number">1px</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">101%</span>;  <span class="comment">/* Hacky */</span></div><div class="line">  <span class="attribute">height</span>: <span class="number">301%</span>; <span class="comment">/* Hacky */</span></div><div class="line">  <span class="attribute">z-index</span>: <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.test3</span> <span class="selector-tag">span</span> <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</div><div class="line">  <span class="attribute">background</span>: transparent;</div><div class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>14.<strong>CSS 写出三角形</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* create an arrow that points up */</span></div><div class="line"><span class="selector-tag">div</span><span class="selector-class">.arrow-up</span> &#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">0px</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">0px</span>;</div><div class="line">  <span class="attribute">border-left</span>:<span class="number">5px</span> solid transparent;  <span class="comment">/* left arrow slant */</span></div><div class="line">  <span class="attribute">border-right</span>:<span class="number">5px</span> solid transparent; <span class="comment">/* right arrow slant */</span></div><div class="line">  <span class="attribute">border-bottom</span>:<span class="number">5px</span> solid <span class="number">#2f2f2f</span>; <span class="comment">/* bottom, add background color here */</span></div><div class="line">  <span class="attribute">font-size</span>:<span class="number">0px</span>;</div><div class="line">  <span class="attribute">line-height</span>:<span class="number">0px</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* create an arrow that points down */</span></div><div class="line"><span class="selector-tag">div</span><span class="selector-class">.arrow-down</span> &#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">0px</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">0px</span>;</div><div class="line">  <span class="attribute">border-left</span>:<span class="number">5px</span> solid transparent;</div><div class="line">  <span class="attribute">border-right</span>:<span class="number">5px</span> solid transparent;</div><div class="line">  <span class="attribute">border-top</span>:<span class="number">5px</span> solid <span class="number">#2f2f2f</span>;</div><div class="line">  <span class="attribute">font-size</span>:<span class="number">0px</span>;</div><div class="line">  <span class="attribute">line-height</span>:<span class="number">0px</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* create an arrow that points left */</span></div><div class="line"><span class="selector-tag">div</span><span class="selector-class">.arrow-left</span> &#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">0px</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">0px</span>;</div><div class="line">  <span class="attribute">border-bottom</span>:<span class="number">5px</span> solid transparent;  <span class="comment">/* left arrow slant */</span></div><div class="line">  <span class="attribute">border-top</span>:<span class="number">5px</span> solid transparent; <span class="comment">/* right arrow slant */</span></div><div class="line">  <span class="attribute">border-right</span>:<span class="number">5px</span> solid <span class="number">#2f2f2f</span>; <span class="comment">/* bottom, add background color here */</span></div><div class="line">  <span class="attribute">font-size</span>:<span class="number">0px</span>;</div><div class="line">  <span class="attribute">line-height</span>:<span class="number">0px</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">/* create an arrow that points right */</span></div><div class="line"><span class="selector-tag">div</span><span class="selector-class">.arrow-right</span> &#123;</div><div class="line">  <span class="attribute">width</span>:<span class="number">0px</span>;</div><div class="line">  <span class="attribute">height</span>:<span class="number">0px</span>;</div><div class="line">  <span class="attribute">border-bottom</span>:<span class="number">5px</span> solid transparent;  <span class="comment">/* left arrow slant */</span></div><div class="line">  <span class="attribute">border-top</span>:<span class="number">5px</span> solid transparent; <span class="comment">/* right arrow slant */</span></div><div class="line">  <span class="attribute">border-left</span>:<span class="number">5px</span> solid <span class="number">#2f2f2f</span>; <span class="comment">/* bottom, add background color here */</span></div><div class="line">  <span class="attribute">font-size</span>:<span class="number">0px</span>;</div><div class="line">  <span class="attribute">line-height</span>:<span class="number">0px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>15.<strong>CSS3 calc() 的使用</strong><br>calc() 用法类似于函数，能够给元素设置动态的值：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* basic calc */</span></div><div class="line"><span class="selector-class">.simpleBlock</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 100px);</div><div class="line">&#125;</div><div class="line"><span class="comment">/* calc in calc */</span></div><div class="line"><span class="selector-class">.complexBlock</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 50% / 3);</div><div class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="built_in">calc</span>(3% - 2px);</div><div class="line">  <span class="attribute">margin-left</span>: <span class="built_in">calc</span>(10% + 10px);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>16.<strong>文本渐变</strong><br>文本渐变效果很流行，使用 CSS3 能够很简单就实现：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">h2</span><span class="selector-attr">[data-text]</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">h2</span><span class="selector-attr">[data-text]</span><span class="selector-pseudo">::after</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(data-text);</div><div class="line">  <span class="attribute">z-index</span>: <span class="number">10</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#e3e3e3</span>;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">-webkit-mask-image</span>: <span class="built_in">-webkit-gradient</span>(linear, left top, left bottom, from(rgba(0,0,0,0)), <span class="built_in">color-stop</span>(50%, rgba(0,0,0,1)), <span class="built_in">to</span>(rgba(0,0,0,0)));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>17.<strong>禁用鼠标事件</strong><br>CSS3 新增的 pointer-events 让你能够禁用元素的鼠标事件，例如，一个连接如果设置了下面的样式就无法点击了。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.disabled</span> &#123; <span class="attribute">pointer-events</span>: none; &#125;</div></pre></td></tr></table></figure></p>
<p>18.<strong>模糊文本</strong><br>简单但很漂亮的文本模糊效果，简单又好看！<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.blur</span> &#123;</div><div class="line">   <span class="attribute">color</span>: transparent;</div><div class="line">   <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(0,0,0,0.5);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> css </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[this]]></title>
      <url>/2017/11/09/this/</url>
      <content type="html"><![CDATA[<p>this 不是编写时绑定，而是运行时绑定。它依赖于函数调用的上下文条件。this 绑定与函数声明的位置没有任何关系，而与函数被调用的方式紧密相连。</p>
<p>当一个函数被调用时，会建立一个称为执行环境的活动记录。这个记录包含函数是从何处（调用栈 —— call-stack）被调用的，函数是 如何 被调用的，被传递了什么参数等信息。这个记录的属性之一，就是在函数执行期间将被使用的 this 引用。</p>
<blockquote>
<p><strong>this 实际上是在函数被调用时建立的一个绑定，它指向 什么 是完全由函数被调用的调用点来 (Call-site)决定的。</strong></p>
<p>考虑 <strong>调用栈（call-stack）</strong> （使我们到达当前执行位置而被调用的所有方法的堆栈）是十分重要的。我们关心的调用点就位于当前执行中的函数 之前 的调用。</p>
</blockquote>
<p>当在函数前面被加入 new 调用时，也就是构造器调用时，下面这些事情会自动完成：</p>
<ul>
<li>一个全新的对象会凭空创建（就是被构建）</li>
<li>这个新构建的对象会被接入原形链（[[Prototype]]-linked）</li>
<li>这个新构建的对象被设置为函数调用的 this 绑定</li>
<li>除非函数返回一个它自己的其他 对象，否则这个被 new 调用的函数将 自动 返回这个新构建的对象。</li>
</ul>
<p>var ø = {};</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> YDKJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[模块]]></title>
      <url>/2017/11/07/module/</url>
      <content type="html"><![CDATA[<h2 id="现代的模块"><a href="#现代的模块" class="headerlink" title="现代的模块"></a>现代的模块</h2><p>各种模块依赖加载器/消息机制实质上都是将这种模块定义包装进一个友好的API。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> MyModules = (<span class="function"><span class="keyword">function</span> <span class="title">Manager</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="keyword">var</span> modules = &#123;&#125;;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">define</span>(<span class="params">name, deps, impl</span>) </span>&#123;</div><div class="line">		<span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;deps.length; i++) &#123;</div><div class="line">			deps[i] = modules[deps[i]];</div><div class="line">		&#125;</div><div class="line">		modules[name] = impl.apply( impl, deps );</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> modules[name];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		define: define,</div><div class="line">		get: get</div><div class="line">	&#125;;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<blockquote>
<p>这段代码的关键部分是 modules[name] = impl.apply(impl, deps)。这为一个模块调用了它的定义的包装函数（传入所有依赖），并将返回值，也就是模块的API，存储到一个用名称追踪的内部模块列表中。</p>
</blockquote>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">MyModules.define( <span class="string">"bar"</span>, [], <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">who</span>) </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"Let me introduce: "</span> + who;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		hello: hello</div><div class="line">	&#125;;</div><div class="line">&#125; );</div><div class="line"></div><div class="line">MyModules.define( <span class="string">"foo"</span>, [<span class="string">"bar"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">bar</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> hungry = <span class="string">"hippo"</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">awesome</span>(<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="built_in">console</span>.log( bar.hello( hungry ).toUpperCase() );</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">return</span> &#123;</div><div class="line">		awesome: awesome</div><div class="line">	&#125;;</div><div class="line">&#125; );</div><div class="line"></div><div class="line"><span class="keyword">var</span> bar = MyModules.get( <span class="string">"bar"</span> );</div><div class="line"><span class="keyword">var</span> foo = MyModules.get( <span class="string">"foo"</span> );</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(</div><div class="line">	bar.hello( <span class="string">"hippo"</span> )</div><div class="line">); <span class="comment">// Let me introduce: hippo</span></div><div class="line"></div><div class="line">foo.awesome(); <span class="comment">// LET ME INTRODUCE: HIPPO</span></div></pre></td></tr></table></figure>
<h2 id="未来的模块"><a href="#未来的模块" class="headerlink" title="未来的模块"></a>未来的模块</h2><p>ES6 为模块的概念增加了头等的语法支持。当通过模块系统加载时，ES6 将一个文件视为一个独立的模块。每个模块可以导入其他的模块或者特定的API成员，也可以导出它们自己的公有API成员。</p>
<p><strong>注意：</strong> 基于函数的模块不是一个可以被静态识别的模式（编译器可以知道的东西），所以它们的API语义直到运行时才会被考虑。也就是，你实际上可以在运行时期间修改模块的API。</p>
<p>相比之下，ES6 模块API是静态的（这些API不会在运行时改变）。因为编译器知道它，它可以（也确实在这么作！）在（文件加载和）编译期间检查一个指向被导入模块的成员的引用是否 实际存在。如果API引用不存在，编译器就会在编译时抛出一个“早期”错误，而不是等待传统的动态运行时解决方案（和错误，如果有的话）。</p>
<p>ES6 模块 没有 “内联”格式，它们必须被定义在一个分离的文件中（每个模块一个）。浏览器/引擎拥有一个默认的“模块加载器”（它是可以被覆盖的，但是这超出我们在此讨论的范围），它在模块被导入时同步地加载模块文件。</p>
<p><strong>bar.js</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">who</span>) </span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="string">"Let me introduce: "</span> + who;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> hello;</div></pre></td></tr></table></figure></p>
<p><strong>foo.js</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 仅导入“bar”模块中的`hello()`</span></div><div class="line"><span class="keyword">import</span> hello <span class="keyword">from</span> <span class="string">"bar"</span>;</div><div class="line"></div><div class="line"><span class="keyword">var</span> hungry = <span class="string">"hippo"</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">awesome</span>(<span class="params"></span>) </span>&#123;</div><div class="line">	<span class="built_in">console</span>.log(</div><div class="line">		hello( hungry ).toUpperCase()</div><div class="line">	);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> awesome;</div><div class="line"><span class="comment">// 导入`foo`和`bar`整个模块</span></div><div class="line"><span class="built_in">module</span> foo <span class="keyword">from</span> <span class="string">"foo"</span>;</div><div class="line"><span class="built_in">module</span> bar <span class="keyword">from</span> <span class="string">"bar"</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(</div><div class="line">	bar.hello( <span class="string">"rhino"</span> )</div><div class="line">); <span class="comment">// Let me introduce: rhino</span></div><div class="line"></div><div class="line">foo.awesome(); <span class="comment">// LET ME INTRODUCE: HIPPO</span></div></pre></td></tr></table></figure></p>
<p><strong>注意：</strong> 需要使用前两个代码片段中的内容分别创建两个分离的文件 “foo.js” 和 “bar.js”。然后，你的程序将加载/导入这些模块来使用它们，就像第三个片段那样。</p>
<p>import 在当前的作用域中导入一个模块的API的一个或多个成员，每个都绑定到一个变量（这个例子中是 hello）。module 将整个模块的API导入到一个被绑定的变量（这个例子中是 foo，bar）。export 为当前模块的公有API导出一个标识符（变量，函数）。在一个模块的定义中，这些操作符可以根据需要使用任意多次。</p>
]]></content>
      
        <categories>
            
            <category> 学习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> javascript </tag>
            
            <tag> YDKJS </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
