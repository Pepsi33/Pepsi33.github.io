{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/images/cache/v2-78461056b1ab65ea3ad247309d492d2b_hd.jpg","path":"images/cache/v2-78461056b1ab65ea3ad247309d492d2b_hd.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/images/cache/00bf9849ec2780d4ae4764e7979023c9.png","path":"images/cache/00bf9849ec2780d4ae4764e7979023c9.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"ddfcb23e1c723ee313598acdfd0832f3c24dc4c2","modified":1632911398736},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1632911398741},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1632911398742},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1632911398742},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1632911398744},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1632911398744},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1632911398744},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1632911398744},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1632911398744},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1632911398745},{"_id":"themes/next/README.cn.md","hash":"6d9177e7dad87e6129760e4b559bd3f7a15429d7","modified":1632911398745},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1632911398745},{"_id":"themes/next/README.md","hash":"529d53dfa97678f8ce4c95620b26e61154162a29","modified":1632911398745},{"_id":"themes/next/_config.yml","hash":"135b27cac3f35f9f7d9b9a84754bd26031331a5b","modified":1632911398745},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1632911398746},{"_id":"themes/next/bower.json","hash":"6d6ae7531cf3fedc97c58cdad664f5793eb3cc88","modified":1632911398746},{"_id":"themes/next/package.json","hash":"93a74dbc0fe3a1208a02e9cec3c15c2375339cc1","modified":1632911398760},{"_id":"source/_posts/bind方法实现.md","hash":"0e8f65cff81b05b0bdc2a28f2312981c9357be76","modified":1632911398737},{"_id":"source/_posts/module.md","hash":"a1f42d576d0ac8975094465e4f5001b30c4b9177","modified":1632911398737},{"_id":"source/_posts/css常用技巧.md","hash":"9712c8e5076d0d36534557adbb1402f62e7d9799","modified":1632911398737},{"_id":"source/_posts/es6里的异步实现.md","hash":"43a714ed19076096a99bf8c3873a96e2a257b234","modified":1632911398737},{"_id":"source/_posts/new操作符.md","hash":"e24e7b11eb43edd7d817098756366e5db6ed2fb7","modified":1632911398738},{"_id":"source/_posts/web缓存.md","hash":"a27cf9c779e2ae77b8a6b3e90a1e87856ef51bf3","modified":1635218001952},{"_id":"source/_posts/this.md","hash":"218401e4a5ef27a07a2c70c4effb258019f5efc3","modified":1632911398738},{"_id":"source/_posts/网络模型与tcp协议.md","hash":"65fc6b4b609bd17759b3a519b868a078f6cca072","modified":1632911398738},{"_id":"source/_posts/超过存储范围的数相加.md","hash":"cae07f3ee28fb4b61e02d73afab1dc36911a4997","modified":1632911398739},{"_id":"source/_posts/防抖和节流.md","hash":"1a9b881026103a340d2af18de86b3f5eef290f3d","modified":1632911398739},{"_id":"source/about/index.md","hash":"d84337fdca99afda2d1f70e82a43546e8f3d7d8d","modified":1632911398739},{"_id":"source/categories/index.md","hash":"0c9f5d4d6498ca571a320a299c8dc488c46c3157","modified":1632911398739},{"_id":"source/images/avatar.jpg","hash":"086142ea247be55b235b6aa16bf269f92af017be","modified":1632911398740},{"_id":"source/tags/index.md","hash":"6e627b3e5b2bb47177287b0e702f4161d54b507c","modified":1632911398741},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1632911398742},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"352093a1b210c72136687fd2eee649244cee402c","modified":1632911398742},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1632911398742},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1632911398743},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1632911398746},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1632911398746},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1632911398746},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1632911398746},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1632911398747},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1632911398747},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1632911398747},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1632911398747},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1632911398747},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1632911398748},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1632911398747},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1632911398748},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1632911398748},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1632911398748},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1632911398748},{"_id":"themes/next/layout/_layout.swig","hash":"c596907c6411e5e77da9d3c4874ea48b76623e4c","modified":1632911398749},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1632911398759},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1632911398760},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1632911398760},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1632911398759},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1632911398760},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1632911398760},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1632911398760},{"_id":"themes/next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1632911398760},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1632911398761},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1632911398834},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1632911398834},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1632911398835},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632911398794},{"_id":"source/images/cache/v2-78461056b1ab65ea3ad247309d492d2b_hd.jpg","hash":"0c0d351e437a4d2e3c00370697b2514d4eaf7bcf","modified":1632911398741},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1632911398749},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1632911398749},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1632911398749},{"_id":"themes/next/layout/_macro/post.swig","hash":"9af9ced7a77aacd1cda2b3ed553ef11ab806a736","modified":1632911398749},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9efc455894921a66bbc074055d3b39c8a34a48a4","modified":1632911398750},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1632911398750},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1632911398750},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d727e4a84f9db96afd2edf5f1d89c370c21e0673","modified":1632911398750},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1632911398751},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1632911398751},{"_id":"themes/next/layout/_partials/head.swig","hash":"cd8d1398f20f0db62ebc6eabbd5f76a127791fc1","modified":1632911398750},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1632911398751},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1632911398752},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1632911398748},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1632911398748},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1632911398757},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1632911398758},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1632911398758},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1632911398758},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1632911398758},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1632911398758},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1632911398758},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1632911398753},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1632911398753},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1632911398754},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1632911398761},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1632911398761},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1632911398761},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1632911398761},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1632911398761},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1632911398761},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1632911398762},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1632911398762},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1632911398762},{"_id":"themes/next/source/css/main.styl","hash":"d7dd7967d53f80d0b823ba59a0cb28df81bf4f7e","modified":1632911398794},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1632911398794},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1632911398794},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1632911398794},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1632911398795},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1632911398795},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1632911398795},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1632911398795},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1632911398796},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1632911398795},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1632911398796},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1632911398796},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1632911398796},{"_id":"themes/next/source/images/favicon.png","hash":"4a9d8376199f12cabd461bca99e53bdd71c89632","modified":1632911398796},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1632911398796},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1632911398797},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1632911398797},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1632911398797},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1632911398797},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1632911398797},{"_id":"source/images/cache/00bf9849ec2780d4ae4764e7979023c9.png","hash":"d7f896fe3ebc2faea9a790238967a21842432f4a","modified":1632911398741},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632911398754},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632911398754},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632911398788},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632911398789},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632911398789},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632911398793},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1632911398794},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1632911398751},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1632911398751},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1632911398752},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1632911398752},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1632911398752},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1632911398752},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1632911398753},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1632911398753},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1632911398753},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1632911398754},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1632911398754},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1632911398755},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"28bbb9bbd5466a20885bd9272c6040f91552b3ea","modified":1632911398755},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1632911398755},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1632911398755},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1632911398755},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1632911398755},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1632911398755},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1632911398755},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1632911398756},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1632911398756},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1632911398756},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1632911398756},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1632911398756},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1632911398756},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1632911398756},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1632911398756},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1632911398757},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1632911398757},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4617daf810f42b3f3908a40f246538cb1e5970da","modified":1632911398757},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1632911398757},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1632911398759},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1632911398759},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1632911398759},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1632911398759},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1632911398754},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1632911398754},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1632911398754},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1632911398788},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1632911398788},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1632911398789},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1632911398789},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1632911398793},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1632911398793},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1632911398793},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1632911398794},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1632911398798},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1632911398798},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1632911398798},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1632911398798},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1632911398799},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1632911398799},{"_id":"themes/next/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1632911398800},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1632911398800},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1632911398800},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1632911398802},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1632911398802},{"_id":"themes/next/source/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1632911398802},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1632911398809},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1632911398809},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1632911398806},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1632911398812},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1632911398813},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1632911398813},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1632911398813},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1632911398813},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1632911398814},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1632911398814},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1632911398814},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1632911398814},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1632911398824},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1632911398823},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1632911398824},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1632911398824},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1632911398824},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1632911398824},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1632911398824},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1632911398825},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1632911398825},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1632911398825},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1632911398828},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1632911398828},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1632911398825},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1632911398825},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1632911398828},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1632911398826},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1632911398826},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1632911398826},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1632911398826},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1632911398826},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1632911398826},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1632911398826},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1632911398827},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1632911398827},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1632911398827},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1632911398827},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1632911398827},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1632911398832},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1632911398831},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1632911398834},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1632911398834},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1632911398833},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1632911398823},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1632911398759},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1632911398759},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1632911398767},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1632911398768},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1632911398768},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1632911398768},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1632911398768},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1632911398773},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1632911398781},{"_id":"themes/next/source/css/_common/components/scoll.styl","hash":"79575e6286e6ed63bca812e198c50911c613ec2f","modified":1632911398778},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1632911398785},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1632911398786},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1632911398786},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1632911398786},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1632911398787},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1632911398787},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1632911398787},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1632911398789},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1632911398790},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1632911398789},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1632911398790},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1632911398790},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1632911398790},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1632911398790},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1632911398790},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1632911398791},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1632911398792},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1632911398792},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1632911398791},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1632911398791},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1632911398792},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1632911398792},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1632911398792},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1632911398793},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1632911398793},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"bcf52192942c0afc410c74a0fb458e7936ddc3d5","modified":1632911398793},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1632911398801},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1632911398805},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1632911398809},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1632911398806},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1632911398810},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1632911398810},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1632911398810},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1632911398806},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1632911398810},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1632911398810},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1632911398811},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1632911398812},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1632911398812},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1632911398813},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1632911398813},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1632911398815},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1632911398814},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1632911398815},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1632911398831},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1632911398831},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1632911398806},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1632911398822},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1632911398822},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1632911398833},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1632911398769},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1632911398769},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1632911398769},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1632911398770},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1632911398770},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1632911398771},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1632911398771},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1632911398770},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1632911398771},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1632911398772},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1632911398772},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1632911398773},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1632911398772},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1632911398773},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1632911398773},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1632911398774},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1632911398774},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1632911398774},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1632911398775},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1632911398775},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1632911398775},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1632911398775},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1632911398776},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1632911398776},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1632911398776},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1632911398776},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1632911398777},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1632911398777},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1632911398779},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1632911398777},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1632911398778},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1632911398779},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1632911398779},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1632911398779},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1632911398780},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1632911398780},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1632911398780},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1632911398780},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1632911398781},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1632911398781},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1632911398782},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1632911398782},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1632911398782},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1632911398782},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1632911398782},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1632911398783},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1632911398783},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1632911398783},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1632911398783},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1632911398783},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1632911398784},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1632911398784},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1632911398784},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1632911398784},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1632911398784},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1632911398784},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1632911398785},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1632911398785},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1632911398791},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1632911398791},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1632911398792},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1632911398804},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1632911398804},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1632911398804},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1632911398805},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1632911398805},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1632911398810},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1632911398811},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1632911398811},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1632911398811},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1632911398811},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1632911398811},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1632911398818},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1632911398816},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1632911398822},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1632911398809},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1632911398831},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1632911398820},{"_id":"source/_posts/github actions配置.md","hash":"eaeb36170d4ff1bc0f4e247ec24d3945e4851fcb","modified":1635218658466}],"Category":[{"name":"学习","_id":"ckv7i9bnd00056o9km31oz1qx"},{"name":"Hexo教程","_id":"ckv7i9br0000u6o9ko8lkepyu"},{"name":"面试题","_id":"ckv7i9br200106o9koyl9v6s7"},{"name":"Javascript","_id":"ckv7i9br300146o9kl495f49f"}],"Data":[],"Page":[{"_content":"< !DOCTYPE html>\n    <html lang=\"en\">\n\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>404页面</title>\n    </head>\n\n    <body>\n        <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n    </body>\n\n    </html>","source":"404.html","raw":"< !DOCTYPE html>\n    <html lang=\"en\">\n\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>404页面</title>\n    </head>\n\n    <body>\n        <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n    </body>\n\n    </html>","date":"2021-10-15T09:00:23.292Z","updated":"2021-09-29T10:29:58.736Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ckv7i9bmh00006o9ks10mwszs","content":"< !DOCTYPE html>\n    <html lang=\"en\">\n\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>404页面</title>\n    </head>\n\n    <body>\n        <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n    </body>\n\n    </html>","site":{"data":{}},"excerpt":"","more":"< !DOCTYPE html>\n    <html lang=\"en\">\n\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>404页面</title>\n    </head>\n\n    <body>\n        <script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n    </body>\n\n    </html>"},{"title":"关于","date":"2017-11-09T07:27:24.000Z","_content":"\n\n## Javascript Developer","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2017-11-09 15:27:24\n---\n\n\n## Javascript Developer","updated":"2021-09-29T10:29:58.739Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckv7i9bqr000h6o9k5dt8ult0","content":"<h2 id=\"Javascript-Developer\"><a href=\"#Javascript-Developer\" class=\"headerlink\" title=\"Javascript Developer\"></a>Javascript Developer</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Javascript-Developer\"><a href=\"#Javascript-Developer\" class=\"headerlink\" title=\"Javascript Developer\"></a>Javascript Developer</h2>"},{"title":"分类","date":"2017-11-09T07:38:41.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-11-09 15:38:41\ntype: \"categories\"\n---\n","updated":"2021-09-29T10:29:58.739Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckv7i9bqt000j6o9ksaaoxb5n","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-11-09T07:37:12.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-11-09 15:37:12\ntype: \"tags\"\n---\n","updated":"2021-09-29T10:29:58.741Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckv7i9bqv000m6o9kbd1w8mfl","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"bind方法实现","date":"2019-03-12T04:53:36.000Z","_content":"\n```\nFunction.prototype._bind = function(){\n    var self = this;\n        context = [].shift.call(arguments),\n        args = [].slice.call(arguments);\n    return function(){\n        self.apply(context, [].contact.call(args, [].slice.call(arguments)));\n    }\n}\n\n// MDN Polyfill\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function(oThis) {\n    if (typeof this !== 'function') {\n      // closest thing possible to the ECMAScript 5\n      // internal IsCallable function\n      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n    }\n\n    var aArgs   = Array.prototype.slice.call(arguments, 1),\n        fToBind = this,\n        fNOP    = function() {},\n        fBound  = function() {\n          // this instanceof fBound === true时,说明返回的fBound被当做new的构造函数调用\n          return fToBind.apply(this instanceof fBound\n                 ? this\n                 : oThis,\n                 // 获取调用时(fBound)的传参.bind 返回的函数入参往往是这么传递的\n                 aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n\n    // 维护原型关系\n    if (this.prototype) {\n      // Function.prototype doesn't have a prototype property\n      fNOP.prototype = this.prototype; \n    }\n    // 下行的代码使fBound.prototype是fNOP的实例,因此\n    // 返回的fBound若作为new的构造函数,new生成的新对象作为this传入fBound,新对象的__proto__就是fNOP的实例\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n\n\n```\n\n[MDN Polyfill](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility)\n","source":"_posts/bind方法实现.md","raw":"---\ntitle: bind方法实现\ndate: 2019-03-12 12:53:36\ntags: [\"javascript\"]\n---\n\n```\nFunction.prototype._bind = function(){\n    var self = this;\n        context = [].shift.call(arguments),\n        args = [].slice.call(arguments);\n    return function(){\n        self.apply(context, [].contact.call(args, [].slice.call(arguments)));\n    }\n}\n\n// MDN Polyfill\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function(oThis) {\n    if (typeof this !== 'function') {\n      // closest thing possible to the ECMAScript 5\n      // internal IsCallable function\n      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n    }\n\n    var aArgs   = Array.prototype.slice.call(arguments, 1),\n        fToBind = this,\n        fNOP    = function() {},\n        fBound  = function() {\n          // this instanceof fBound === true时,说明返回的fBound被当做new的构造函数调用\n          return fToBind.apply(this instanceof fBound\n                 ? this\n                 : oThis,\n                 // 获取调用时(fBound)的传参.bind 返回的函数入参往往是这么传递的\n                 aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n\n    // 维护原型关系\n    if (this.prototype) {\n      // Function.prototype doesn't have a prototype property\n      fNOP.prototype = this.prototype; \n    }\n    // 下行的代码使fBound.prototype是fNOP的实例,因此\n    // 返回的fBound若作为new的构造函数,new生成的新对象作为this传入fBound,新对象的__proto__就是fNOP的实例\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n\n\n```\n\n[MDN Polyfill](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility)\n","slug":"bind方法实现","published":1,"updated":"2021-09-29T10:29:58.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv7i9bn500016o9ka2rb46xs","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">Function.prototype._bind = function()&#123;</div><div class=\"line\">    var self = this;</div><div class=\"line\">        context = [].shift.call(arguments),</div><div class=\"line\">        args = [].slice.call(arguments);</div><div class=\"line\">    return function()&#123;</div><div class=\"line\">        self.apply(context, [].contact.call(args, [].slice.call(arguments)));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// MDN Polyfill</div><div class=\"line\">if (!Function.prototype.bind) &#123;</div><div class=\"line\">  Function.prototype.bind = function(oThis) &#123;</div><div class=\"line\">    if (typeof this !== &apos;function&apos;) &#123;</div><div class=\"line\">      // closest thing possible to the ECMAScript 5</div><div class=\"line\">      // internal IsCallable function</div><div class=\"line\">      throw new TypeError(&apos;Function.prototype.bind - what is trying to be bound is not callable&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var aArgs   = Array.prototype.slice.call(arguments, 1),</div><div class=\"line\">        fToBind = this,</div><div class=\"line\">        fNOP    = function() &#123;&#125;,</div><div class=\"line\">        fBound  = function() &#123;</div><div class=\"line\">          // this instanceof fBound === true时,说明返回的fBound被当做new的构造函数调用</div><div class=\"line\">          return fToBind.apply(this instanceof fBound</div><div class=\"line\">                 ? this</div><div class=\"line\">                 : oThis,</div><div class=\"line\">                 // 获取调用时(fBound)的传参.bind 返回的函数入参往往是这么传递的</div><div class=\"line\">                 aArgs.concat(Array.prototype.slice.call(arguments)));</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">    // 维护原型关系</div><div class=\"line\">    if (this.prototype) &#123;</div><div class=\"line\">      // Function.prototype doesn&apos;t have a prototype property</div><div class=\"line\">      fNOP.prototype = this.prototype; </div><div class=\"line\">    &#125;</div><div class=\"line\">    // 下行的代码使fBound.prototype是fNOP的实例,因此</div><div class=\"line\">    // 返回的fBound若作为new的构造函数,new生成的新对象作为this传入fBound,新对象的__proto__就是fNOP的实例</div><div class=\"line\">    fBound.prototype = new fNOP();</div><div class=\"line\"></div><div class=\"line\">    return fBound;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility\" target=\"_blank\" rel=\"external\">MDN Polyfill</a></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">Function.prototype._bind = function()&#123;</div><div class=\"line\">    var self = this;</div><div class=\"line\">        context = [].shift.call(arguments),</div><div class=\"line\">        args = [].slice.call(arguments);</div><div class=\"line\">    return function()&#123;</div><div class=\"line\">        self.apply(context, [].contact.call(args, [].slice.call(arguments)));</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// MDN Polyfill</div><div class=\"line\">if (!Function.prototype.bind) &#123;</div><div class=\"line\">  Function.prototype.bind = function(oThis) &#123;</div><div class=\"line\">    if (typeof this !== &apos;function&apos;) &#123;</div><div class=\"line\">      // closest thing possible to the ECMAScript 5</div><div class=\"line\">      // internal IsCallable function</div><div class=\"line\">      throw new TypeError(&apos;Function.prototype.bind - what is trying to be bound is not callable&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var aArgs   = Array.prototype.slice.call(arguments, 1),</div><div class=\"line\">        fToBind = this,</div><div class=\"line\">        fNOP    = function() &#123;&#125;,</div><div class=\"line\">        fBound  = function() &#123;</div><div class=\"line\">          // this instanceof fBound === true时,说明返回的fBound被当做new的构造函数调用</div><div class=\"line\">          return fToBind.apply(this instanceof fBound</div><div class=\"line\">                 ? this</div><div class=\"line\">                 : oThis,</div><div class=\"line\">                 // 获取调用时(fBound)的传参.bind 返回的函数入参往往是这么传递的</div><div class=\"line\">                 aArgs.concat(Array.prototype.slice.call(arguments)));</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">    // 维护原型关系</div><div class=\"line\">    if (this.prototype) &#123;</div><div class=\"line\">      // Function.prototype doesn&apos;t have a prototype property</div><div class=\"line\">      fNOP.prototype = this.prototype; </div><div class=\"line\">    &#125;</div><div class=\"line\">    // 下行的代码使fBound.prototype是fNOP的实例,因此</div><div class=\"line\">    // 返回的fBound若作为new的构造函数,new生成的新对象作为this传入fBound,新对象的__proto__就是fNOP的实例</div><div class=\"line\">    fBound.prototype = new fNOP();</div><div class=\"line\"></div><div class=\"line\">    return fBound;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Compatibility\" target=\"_blank\" rel=\"external\">MDN Polyfill</a></p>\n"},{"title":"模块","date":"2017-11-07T03:30:05.000Z","_content":"\n## 现代的模块\n\n各种模块依赖加载器/消息机制实质上都是将这种模块定义包装进一个友好的API。\n\n``` javascript\n\t\n\tvar MyModules = (function Manager() {\n\t\tvar modules = {};\n\n\t\tfunction define(name, deps, impl) {\n\t\t\tfor (var i=0; i<deps.length; i++) {\n\t\t\t\tdeps[i] = modules[deps[i]];\n\t\t\t}\n\t\t\tmodules[name] = impl.apply( impl, deps );\n\t\t}\n\n\t\tfunction get(name) {\n\t\t\treturn modules[name];\n\t\t}\n\n\t\treturn {\n\t\t\tdefine: define,\n\t\t\tget: get\n\t\t};\n\t})();\n\n```\n\n> 这段代码的关键部分是 modules[name] = impl.apply(impl, deps)。这为一个模块调用了它的定义的包装函数（传入所有依赖），并将返回值，也就是模块的API，存储到一个用名称追踪的内部模块列表中。\n\n<!--more-->\n\n``` javascript\nMyModules.define( \"bar\", [], function(){\n\tfunction hello(who) {\n\t\treturn \"Let me introduce: \" + who;\n\t}\n\n\treturn {\n\t\thello: hello\n\t};\n} );\n\nMyModules.define( \"foo\", [\"bar\"], function(bar){\n\tvar hungry = \"hippo\";\n\n\tfunction awesome() {\n\t\tconsole.log( bar.hello( hungry ).toUpperCase() );\n\t}\n\n\treturn {\n\t\tawesome: awesome\n\t};\n} );\n\nvar bar = MyModules.get( \"bar\" );\nvar foo = MyModules.get( \"foo\" );\n\nconsole.log(\n\tbar.hello( \"hippo\" )\n); // Let me introduce: hippo\n\nfoo.awesome(); // LET ME INTRODUCE: HIPPO\n```\n\n## 未来的模块\n\nES6 为模块的概念增加了头等的语法支持。当通过模块系统加载时，ES6 将一个文件视为一个独立的模块。每个模块可以导入其他的模块或者特定的API成员，也可以导出它们自己的公有API成员。\n\n**注意：** 基于函数的模块不是一个可以被静态识别的模式（编译器可以知道的东西），所以它们的API语义直到运行时才会被考虑。也就是，你实际上可以在运行时期间修改模块的API。\n\n相比之下，ES6 模块API是静态的（这些API不会在运行时改变）。因为编译器知道它，它可以（也确实在这么作！）在（文件加载和）编译期间检查一个指向被导入模块的成员的引用是否 实际存在。如果API引用不存在，编译器就会在编译时抛出一个“早期”错误，而不是等待传统的动态运行时解决方案（和错误，如果有的话）。\n\nES6 模块 没有 “内联”格式，它们必须被定义在一个分离的文件中（每个模块一个）。浏览器/引擎拥有一个默认的“模块加载器”（它是可以被覆盖的，但是这超出我们在此讨论的范围），它在模块被导入时同步地加载模块文件。\n\n**bar.js**\n``` javascript\nfunction hello(who) {\n\treturn \"Let me introduce: \" + who;\n}\n\nexport hello;\n```\n\n\n**foo.js**\n```javascript\n// 仅导入“bar”模块中的`hello()`\nimport hello from \"bar\";\n\nvar hungry = \"hippo\";\n\nfunction awesome() {\n\tconsole.log(\n\t\thello( hungry ).toUpperCase()\n\t);\n}\n\nexport awesome;\n// 导入`foo`和`bar`整个模块\nmodule foo from \"foo\";\nmodule bar from \"bar\";\n\nconsole.log(\n\tbar.hello( \"rhino\" )\n); // Let me introduce: rhino\n\nfoo.awesome(); // LET ME INTRODUCE: HIPPO\n```\n**注意：** 需要使用前两个代码片段中的内容分别创建两个分离的文件 “foo.js” 和 “bar.js”。然后，你的程序将加载/导入这些模块来使用它们，就像第三个片段那样。\n\nimport 在当前的作用域中导入一个模块的API的一个或多个成员，每个都绑定到一个变量（这个例子中是 hello）。module 将整个模块的API导入到一个被绑定的变量（这个例子中是 foo，bar）。export 为当前模块的公有API导出一个标识符（变量，函数）。在一个模块的定义中，这些操作符可以根据需要使用任意多次。\n\n","source":"_posts/module.md","raw":"---\ntitle: 模块\ndate: 2017-11-07 11:30:05\ntags: [\"javascript\",\"YDKJS\"]\ncategories: 学习\n---\n\n## 现代的模块\n\n各种模块依赖加载器/消息机制实质上都是将这种模块定义包装进一个友好的API。\n\n``` javascript\n\t\n\tvar MyModules = (function Manager() {\n\t\tvar modules = {};\n\n\t\tfunction define(name, deps, impl) {\n\t\t\tfor (var i=0; i<deps.length; i++) {\n\t\t\t\tdeps[i] = modules[deps[i]];\n\t\t\t}\n\t\t\tmodules[name] = impl.apply( impl, deps );\n\t\t}\n\n\t\tfunction get(name) {\n\t\t\treturn modules[name];\n\t\t}\n\n\t\treturn {\n\t\t\tdefine: define,\n\t\t\tget: get\n\t\t};\n\t})();\n\n```\n\n> 这段代码的关键部分是 modules[name] = impl.apply(impl, deps)。这为一个模块调用了它的定义的包装函数（传入所有依赖），并将返回值，也就是模块的API，存储到一个用名称追踪的内部模块列表中。\n\n<!--more-->\n\n``` javascript\nMyModules.define( \"bar\", [], function(){\n\tfunction hello(who) {\n\t\treturn \"Let me introduce: \" + who;\n\t}\n\n\treturn {\n\t\thello: hello\n\t};\n} );\n\nMyModules.define( \"foo\", [\"bar\"], function(bar){\n\tvar hungry = \"hippo\";\n\n\tfunction awesome() {\n\t\tconsole.log( bar.hello( hungry ).toUpperCase() );\n\t}\n\n\treturn {\n\t\tawesome: awesome\n\t};\n} );\n\nvar bar = MyModules.get( \"bar\" );\nvar foo = MyModules.get( \"foo\" );\n\nconsole.log(\n\tbar.hello( \"hippo\" )\n); // Let me introduce: hippo\n\nfoo.awesome(); // LET ME INTRODUCE: HIPPO\n```\n\n## 未来的模块\n\nES6 为模块的概念增加了头等的语法支持。当通过模块系统加载时，ES6 将一个文件视为一个独立的模块。每个模块可以导入其他的模块或者特定的API成员，也可以导出它们自己的公有API成员。\n\n**注意：** 基于函数的模块不是一个可以被静态识别的模式（编译器可以知道的东西），所以它们的API语义直到运行时才会被考虑。也就是，你实际上可以在运行时期间修改模块的API。\n\n相比之下，ES6 模块API是静态的（这些API不会在运行时改变）。因为编译器知道它，它可以（也确实在这么作！）在（文件加载和）编译期间检查一个指向被导入模块的成员的引用是否 实际存在。如果API引用不存在，编译器就会在编译时抛出一个“早期”错误，而不是等待传统的动态运行时解决方案（和错误，如果有的话）。\n\nES6 模块 没有 “内联”格式，它们必须被定义在一个分离的文件中（每个模块一个）。浏览器/引擎拥有一个默认的“模块加载器”（它是可以被覆盖的，但是这超出我们在此讨论的范围），它在模块被导入时同步地加载模块文件。\n\n**bar.js**\n``` javascript\nfunction hello(who) {\n\treturn \"Let me introduce: \" + who;\n}\n\nexport hello;\n```\n\n\n**foo.js**\n```javascript\n// 仅导入“bar”模块中的`hello()`\nimport hello from \"bar\";\n\nvar hungry = \"hippo\";\n\nfunction awesome() {\n\tconsole.log(\n\t\thello( hungry ).toUpperCase()\n\t);\n}\n\nexport awesome;\n// 导入`foo`和`bar`整个模块\nmodule foo from \"foo\";\nmodule bar from \"bar\";\n\nconsole.log(\n\tbar.hello( \"rhino\" )\n); // Let me introduce: rhino\n\nfoo.awesome(); // LET ME INTRODUCE: HIPPO\n```\n**注意：** 需要使用前两个代码片段中的内容分别创建两个分离的文件 “foo.js” 和 “bar.js”。然后，你的程序将加载/导入这些模块来使用它们，就像第三个片段那样。\n\nimport 在当前的作用域中导入一个模块的API的一个或多个成员，每个都绑定到一个变量（这个例子中是 hello）。module 将整个模块的API导入到一个被绑定的变量（这个例子中是 foo，bar）。export 为当前模块的公有API导出一个标识符（变量，函数）。在一个模块的定义中，这些操作符可以根据需要使用任意多次。\n\n","slug":"module","published":1,"updated":"2021-09-29T10:29:58.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv7i9bn800026o9kq5q3ill3","content":"<h2 id=\"现代的模块\"><a href=\"#现代的模块\" class=\"headerlink\" title=\"现代的模块\"></a>现代的模块</h2><p>各种模块依赖加载器/消息机制实质上都是将这种模块定义包装进一个友好的API。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> MyModules = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Manager</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> modules = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">define</span>(<span class=\"params\">name, deps, impl</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;deps.length; i++) &#123;</div><div class=\"line\">\t\t\tdeps[i] = modules[deps[i]];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tmodules[name] = impl.apply( impl, deps );</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> modules[name];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\tdefine: define,</div><div class=\"line\">\t\tget: get</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这段代码的关键部分是 modules[name] = impl.apply(impl, deps)。这为一个模块调用了它的定义的包装函数（传入所有依赖），并将返回值，也就是模块的API，存储到一个用名称追踪的内部模块列表中。</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">MyModules.define( <span class=\"string\">\"bar\"</span>, [], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">who</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Let me introduce: \"</span> + who;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\thello: hello</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125; );</div><div class=\"line\"></div><div class=\"line\">MyModules.define( <span class=\"string\">\"foo\"</span>, [<span class=\"string\">\"bar\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bar</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> hungry = <span class=\"string\">\"hippo\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">awesome</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log( bar.hello( hungry ).toUpperCase() );</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\tawesome: awesome</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125; );</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar = MyModules.get( <span class=\"string\">\"bar\"</span> );</div><div class=\"line\"><span class=\"keyword\">var</span> foo = MyModules.get( <span class=\"string\">\"foo\"</span> );</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(</div><div class=\"line\">\tbar.hello( <span class=\"string\">\"hippo\"</span> )</div><div class=\"line\">); <span class=\"comment\">// Let me introduce: hippo</span></div><div class=\"line\"></div><div class=\"line\">foo.awesome(); <span class=\"comment\">// LET ME INTRODUCE: HIPPO</span></div></pre></td></tr></table></figure>\n<h2 id=\"未来的模块\"><a href=\"#未来的模块\" class=\"headerlink\" title=\"未来的模块\"></a>未来的模块</h2><p>ES6 为模块的概念增加了头等的语法支持。当通过模块系统加载时，ES6 将一个文件视为一个独立的模块。每个模块可以导入其他的模块或者特定的API成员，也可以导出它们自己的公有API成员。</p>\n<p><strong>注意：</strong> 基于函数的模块不是一个可以被静态识别的模式（编译器可以知道的东西），所以它们的API语义直到运行时才会被考虑。也就是，你实际上可以在运行时期间修改模块的API。</p>\n<p>相比之下，ES6 模块API是静态的（这些API不会在运行时改变）。因为编译器知道它，它可以（也确实在这么作！）在（文件加载和）编译期间检查一个指向被导入模块的成员的引用是否 实际存在。如果API引用不存在，编译器就会在编译时抛出一个“早期”错误，而不是等待传统的动态运行时解决方案（和错误，如果有的话）。</p>\n<p>ES6 模块 没有 “内联”格式，它们必须被定义在一个分离的文件中（每个模块一个）。浏览器/引擎拥有一个默认的“模块加载器”（它是可以被覆盖的，但是这超出我们在此讨论的范围），它在模块被导入时同步地加载模块文件。</p>\n<p><strong>bar.js</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">who</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"Let me introduce: \"</span> + who;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> hello;</div></pre></td></tr></table></figure></p>\n<p><strong>foo.js</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 仅导入“bar”模块中的`hello()`</span></div><div class=\"line\"><span class=\"keyword\">import</span> hello <span class=\"keyword\">from</span> <span class=\"string\">\"bar\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> hungry = <span class=\"string\">\"hippo\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">awesome</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(</div><div class=\"line\">\t\thello( hungry ).toUpperCase()</div><div class=\"line\">\t);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> awesome;</div><div class=\"line\"><span class=\"comment\">// 导入`foo`和`bar`整个模块</span></div><div class=\"line\"><span class=\"built_in\">module</span> foo <span class=\"keyword\">from</span> <span class=\"string\">\"foo\"</span>;</div><div class=\"line\"><span class=\"built_in\">module</span> bar <span class=\"keyword\">from</span> <span class=\"string\">\"bar\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(</div><div class=\"line\">\tbar.hello( <span class=\"string\">\"rhino\"</span> )</div><div class=\"line\">); <span class=\"comment\">// Let me introduce: rhino</span></div><div class=\"line\"></div><div class=\"line\">foo.awesome(); <span class=\"comment\">// LET ME INTRODUCE: HIPPO</span></div></pre></td></tr></table></figure></p>\n<p><strong>注意：</strong> 需要使用前两个代码片段中的内容分别创建两个分离的文件 “foo.js” 和 “bar.js”。然后，你的程序将加载/导入这些模块来使用它们，就像第三个片段那样。</p>\n<p>import 在当前的作用域中导入一个模块的API的一个或多个成员，每个都绑定到一个变量（这个例子中是 hello）。module 将整个模块的API导入到一个被绑定的变量（这个例子中是 foo，bar）。export 为当前模块的公有API导出一个标识符（变量，函数）。在一个模块的定义中，这些操作符可以根据需要使用任意多次。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"现代的模块\"><a href=\"#现代的模块\" class=\"headerlink\" title=\"现代的模块\"></a>现代的模块</h2><p>各种模块依赖加载器/消息机制实质上都是将这种模块定义包装进一个友好的API。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> MyModules = (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Manager</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> modules = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">define</span>(<span class=\"params\">name, deps, impl</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i&lt;deps.length; i++) &#123;</div><div class=\"line\">\t\t\tdeps[i] = modules[deps[i]];</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tmodules[name] = impl.apply( impl, deps );</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> modules[name];</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\tdefine: define,</div><div class=\"line\">\t\tget: get</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这段代码的关键部分是 modules[name] = impl.apply(impl, deps)。这为一个模块调用了它的定义的包装函数（传入所有依赖），并将返回值，也就是模块的API，存储到一个用名称追踪的内部模块列表中。</p>\n</blockquote>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">MyModules.define( <span class=\"string\">\"bar\"</span>, [], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">who</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"Let me introduce: \"</span> + who;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\thello: hello</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125; );</div><div class=\"line\"></div><div class=\"line\">MyModules.define( <span class=\"string\">\"foo\"</span>, [<span class=\"string\">\"bar\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">bar</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> hungry = <span class=\"string\">\"hippo\"</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">awesome</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log( bar.hello( hungry ).toUpperCase() );</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\tawesome: awesome</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125; );</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> bar = MyModules.get( <span class=\"string\">\"bar\"</span> );</div><div class=\"line\"><span class=\"keyword\">var</span> foo = MyModules.get( <span class=\"string\">\"foo\"</span> );</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(</div><div class=\"line\">\tbar.hello( <span class=\"string\">\"hippo\"</span> )</div><div class=\"line\">); <span class=\"comment\">// Let me introduce: hippo</span></div><div class=\"line\"></div><div class=\"line\">foo.awesome(); <span class=\"comment\">// LET ME INTRODUCE: HIPPO</span></div></pre></td></tr></table></figure>\n<h2 id=\"未来的模块\"><a href=\"#未来的模块\" class=\"headerlink\" title=\"未来的模块\"></a>未来的模块</h2><p>ES6 为模块的概念增加了头等的语法支持。当通过模块系统加载时，ES6 将一个文件视为一个独立的模块。每个模块可以导入其他的模块或者特定的API成员，也可以导出它们自己的公有API成员。</p>\n<p><strong>注意：</strong> 基于函数的模块不是一个可以被静态识别的模式（编译器可以知道的东西），所以它们的API语义直到运行时才会被考虑。也就是，你实际上可以在运行时期间修改模块的API。</p>\n<p>相比之下，ES6 模块API是静态的（这些API不会在运行时改变）。因为编译器知道它，它可以（也确实在这么作！）在（文件加载和）编译期间检查一个指向被导入模块的成员的引用是否 实际存在。如果API引用不存在，编译器就会在编译时抛出一个“早期”错误，而不是等待传统的动态运行时解决方案（和错误，如果有的话）。</p>\n<p>ES6 模块 没有 “内联”格式，它们必须被定义在一个分离的文件中（每个模块一个）。浏览器/引擎拥有一个默认的“模块加载器”（它是可以被覆盖的，但是这超出我们在此讨论的范围），它在模块被导入时同步地加载模块文件。</p>\n<p><strong>bar.js</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">who</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">\"Let me introduce: \"</span> + who;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> hello;</div></pre></td></tr></table></figure></p>\n<p><strong>foo.js</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 仅导入“bar”模块中的`hello()`</span></div><div class=\"line\"><span class=\"keyword\">import</span> hello <span class=\"keyword\">from</span> <span class=\"string\">\"bar\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> hungry = <span class=\"string\">\"hippo\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">awesome</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(</div><div class=\"line\">\t\thello( hungry ).toUpperCase()</div><div class=\"line\">\t);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> awesome;</div><div class=\"line\"><span class=\"comment\">// 导入`foo`和`bar`整个模块</span></div><div class=\"line\"><span class=\"built_in\">module</span> foo <span class=\"keyword\">from</span> <span class=\"string\">\"foo\"</span>;</div><div class=\"line\"><span class=\"built_in\">module</span> bar <span class=\"keyword\">from</span> <span class=\"string\">\"bar\"</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(</div><div class=\"line\">\tbar.hello( <span class=\"string\">\"rhino\"</span> )</div><div class=\"line\">); <span class=\"comment\">// Let me introduce: rhino</span></div><div class=\"line\"></div><div class=\"line\">foo.awesome(); <span class=\"comment\">// LET ME INTRODUCE: HIPPO</span></div></pre></td></tr></table></figure></p>\n<p><strong>注意：</strong> 需要使用前两个代码片段中的内容分别创建两个分离的文件 “foo.js” 和 “bar.js”。然后，你的程序将加载/导入这些模块来使用它们，就像第三个片段那样。</p>\n<p>import 在当前的作用域中导入一个模块的API的一个或多个成员，每个都绑定到一个变量（这个例子中是 hello）。module 将整个模块的API导入到一个被绑定的变量（这个例子中是 foo，bar）。export 为当前模块的公有API导出一个标识符（变量，函数）。在一个模块的定义中，这些操作符可以根据需要使用任意多次。</p>"},{"title":"css常用技巧","date":"2017-12-22T03:30:08.000Z","_content":"\n\n1.**黑白图像**\n这段代码会让你的彩色照片显示为黑白照片，是不是很酷？\n``` css\nimg.desaturate {\n    filter: grayscale(100%);\n    -webkit-filter: grayscale(100%);\n    -moz-filter: grayscale(100%);\n    -ms-filter: grayscale(100%);\n    -o-filter: grayscale(100%);\n}\n```\n<!--more-->\n\n2.**使用 :not() 在菜单上应用/取消应用边框**\n```css\n先给每一个菜单项添加边框\n/* add border */\n.nav li {\n  border-right: 1px solid #666;\n}\n……然后再除去最后一个元素……\n// remove border /\n.nav li:last-child {\n  border-right: none;\n}\n```\n可以直接使用 :not() 伪类来应用元素：\n```css\n.nav li:not(:last-child) {\n  border-right: 1px solid #666;\n}\n```\n这样代码就干净，易读，易于理解了。\n当然，如果你的新元素有兄弟元素的话，也可以使用通用的兄弟选择符（~）：\n```css\n.nav li:first-child ~ li {\n  border-left: 1px solid #666;\n}\n```\n\n3.**页面顶部阴影**\n下面这个简单的 CSS3 代码片段可以给网页加上漂亮的顶部阴影效果：\n```css\nbody:before {\n          content: \"\";\n          position: fixed;\n          top: -10px;\n          left: 0;\n          width: 100%;\n          height: 10px;\n          -webkit-box-shadow: 0px 0px 10px rgba(0,0,0,.8);\n          -moz-box-shadow: 0px 0px 10px rgba(0,0,0,.8);\n          box-shadow: 0px 0px 10px rgba(0,0,0,.8);\n          z-index: 100;\n}\n```\n\n4.**给 body 添加行高**\n你不需要分别添加 line-height 到每个p,h标记等。只要添加到 body 即可：\n```css\nbody {\n  line-height: 1;\n}\n```\n这样文本元素就可以很容易地从 body 继承。\n所有一切都垂直居中\n要将所有元素垂直居中，太简单了：\n```css\nhtml, body {\n  height: 100%;\n  margin: 0;\n}\nbody {\n  -webkit-align-items: center;  \n  -ms-flex-align: center;  \n  align-items: center;\n  display: -webkit-flex;\n  display: flex;\n}\n```\n看，是不是很简单。\n注意：在IE11中要小心flexbox。\n\n5.**逗号分隔的列表**\n让HTML列表项看上去像一个真正的，用逗号分隔的列表：\n```css\nul > li:not(:last-child)::after {\n  content: \",\";\n}\n```\n对最后一个列表项使用 :not() 伪类。\n使用负的 nth-child 选择项目\n在CSS中使用负的 nth-child 选择项目1到项目n。\n```css\nli {\n  display: none;\n}\n/* select items 1 through 3 and display them */\nli:nth-child(-n+3) {\n  display: block;\n}\n```\n\n6.**对图标使用 SVG**\n我们没有理由不对图标使用SVG：\n```css\n.logo {\n  background: url(\"logo.svg\");\n}\n```\nSVG对所有的分辨率类型都具有良好的扩展性，并支持所有浏览器都回归到IE9。这样可以避开.png、.jpg或.gif文件了。\n\n7.**优化显示文本**\n有时，字体并不能在所有设备上都达到最佳的显示，所以可以让设备浏览器来帮助你：\n```css\nhtml {\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  text-rendering: optimizeLegibility;\n}\n```\n`注：请负责任地使用 optimizeLegibility。此外，IE /Edge没有 text-rendering 支持。`\n\n8.**对纯 CSS 滑块使用 max-height**\n使用 max-height 和溢出隐藏来实现只有CSS的滑块：\n```css\n.slider ul {\n  max-height: 0;\n  overlow: hidden;\n}\n.slider:hover ul {\n  max-height: 1000px;\n  transition: .3s ease;\n}\n```\n\n9.**继承 box-sizing**\n让 box-sizing 继承 html：\n```css\nhtml {\n  box-sizing: border-box;\n}\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n```\n这样在插件或杠杆其他行为的其他组件中就能更容易地改变 box-sizing 了。\n\n10.**表格单元格等宽**\n表格工作起来很麻烦，所以务必尽量使用 table-layout: fixed 来保持单元格的等宽：\n```css\n.calendar {\n  table-layout: fixed;\n}\n```\n\n11.**用 Flexbox 摆脱外边距的各种 hack**\n当需要用到列分隔符时，通过flexbox的 space-between 属性，你就可以摆脱nth-，first-，和 last-child 的hack了：\n```css\n.list {\n  display: flex;\n  justify-content: space-between;\n}\n.list .person {\n  flex-basis: 23%;\n}\n```\n现在，列表分隔符就会在均匀间隔的位置出现。\n\n12.**使用属性选择器用于空链接**\n当a元素没有文本值，但 href 属性有链接的时候显示链接：\na[href^=\"http\"]:empty::before {\n  content: attr(href);\n}\n相当方便。\n\n13.**检测鼠标双击**\n```html\nHTML：\n<div class=\"test3\">\n  <span><input type=\"text\" value=\" \" readonly=\"true\">\n  <a href=\"http://www.fly33.top\">Double click me</a></span>\n</div>\n```\n```css\nCSS：\n.test3 span {\n  position: relative;\n}\n.test3 span a {\n  position: relative;\n  z-index: 2;\n}\n.test3 span a:hover, .test3 span a:active {\n  z-index: 4;\n}\n.test3 span input {\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  position: absolute;\n  top: -1px;\n  left: 0;\n  width: 101%;  /* Hacky */\n  height: 301%; /* Hacky */\n  z-index: 3;\n}\n.test3 span input:focus {\n  background: transparent;\n  border: 0;\n  z-index: 1;\n}\n```\n\n14.**CSS 写出三角形**\n```css\n/* create an arrow that points up */\ndiv.arrow-up {\n  width:0px;\n  height:0px;\n  border-left:5px solid transparent;  /* left arrow slant */\n  border-right:5px solid transparent; /* right arrow slant */\n  border-bottom:5px solid #2f2f2f; /* bottom, add background color here */\n  font-size:0px;\n  line-height:0px;\n}\n/* create an arrow that points down */\ndiv.arrow-down {\n  width:0px;\n  height:0px;\n  border-left:5px solid transparent;\n  border-right:5px solid transparent;\n  border-top:5px solid #2f2f2f;\n  font-size:0px;\n  line-height:0px;\n}\n/* create an arrow that points left */\ndiv.arrow-left {\n  width:0px;\n  height:0px;\n  border-bottom:5px solid transparent;  /* left arrow slant */\n  border-top:5px solid transparent; /* right arrow slant */\n  border-right:5px solid #2f2f2f; /* bottom, add background color here */\n  font-size:0px;\n  line-height:0px;\n}\n/* create an arrow that points right */\ndiv.arrow-right {\n  width:0px;\n  height:0px;\n  border-bottom:5px solid transparent;  /* left arrow slant */\n  border-top:5px solid transparent; /* right arrow slant */\n  border-left:5px solid #2f2f2f; /* bottom, add background color here */\n  font-size:0px;\n  line-height:0px;\n}\n```\n\n15.**CSS3 calc() 的使用**\ncalc() 用法类似于函数，能够给元素设置动态的值：\n```css\n/* basic calc */\n.simpleBlock {\n  width: calc(100% - 100px);\n}\n/* calc in calc */\n.complexBlock {\n  width: calc(100% - 50% / 3);\n  padding: 5px calc(3% - 2px);\n  margin-left: calc(10% + 10px);\n}\n```\n\n16.**文本渐变**\n文本渐变效果很流行，使用 CSS3 能够很简单就实现：\n```css\nh2[data-text] {\n  position: relative;\n}\nh2[data-text]::after {\n  content: attr(data-text);\n  z-index: 10;\n  color: #e3e3e3;\n  position: absolute;\n  top: 0;\n  left: 0;\n  -webkit-mask-image: -webkit-gradient(linear, left top, left bottom, from(rgba(0,0,0,0)), color-stop(50%, rgba(0,0,0,1)), to(rgba(0,0,0,0)));\n}\n```\n17.**禁用鼠标事件**\nCSS3 新增的 pointer-events 让你能够禁用元素的鼠标事件，例如，一个连接如果设置了下面的样式就无法点击了。\n```css\n.disabled { pointer-events: none; }\n```\n\n18.**模糊文本**\n简单但很漂亮的文本模糊效果，简单又好看！\n```css\n.blur {\n   color: transparent;\n   text-shadow: 0 0 5px rgba(0,0,0,0.5);\n}\n```","source":"_posts/css常用技巧.md","raw":"---\ntitle: css常用技巧\ndate: 2017-12-22 11:30:08\ntags:\n - css\ncategories: 学习\n---\n\n\n1.**黑白图像**\n这段代码会让你的彩色照片显示为黑白照片，是不是很酷？\n``` css\nimg.desaturate {\n    filter: grayscale(100%);\n    -webkit-filter: grayscale(100%);\n    -moz-filter: grayscale(100%);\n    -ms-filter: grayscale(100%);\n    -o-filter: grayscale(100%);\n}\n```\n<!--more-->\n\n2.**使用 :not() 在菜单上应用/取消应用边框**\n```css\n先给每一个菜单项添加边框\n/* add border */\n.nav li {\n  border-right: 1px solid #666;\n}\n……然后再除去最后一个元素……\n// remove border /\n.nav li:last-child {\n  border-right: none;\n}\n```\n可以直接使用 :not() 伪类来应用元素：\n```css\n.nav li:not(:last-child) {\n  border-right: 1px solid #666;\n}\n```\n这样代码就干净，易读，易于理解了。\n当然，如果你的新元素有兄弟元素的话，也可以使用通用的兄弟选择符（~）：\n```css\n.nav li:first-child ~ li {\n  border-left: 1px solid #666;\n}\n```\n\n3.**页面顶部阴影**\n下面这个简单的 CSS3 代码片段可以给网页加上漂亮的顶部阴影效果：\n```css\nbody:before {\n          content: \"\";\n          position: fixed;\n          top: -10px;\n          left: 0;\n          width: 100%;\n          height: 10px;\n          -webkit-box-shadow: 0px 0px 10px rgba(0,0,0,.8);\n          -moz-box-shadow: 0px 0px 10px rgba(0,0,0,.8);\n          box-shadow: 0px 0px 10px rgba(0,0,0,.8);\n          z-index: 100;\n}\n```\n\n4.**给 body 添加行高**\n你不需要分别添加 line-height 到每个p,h标记等。只要添加到 body 即可：\n```css\nbody {\n  line-height: 1;\n}\n```\n这样文本元素就可以很容易地从 body 继承。\n所有一切都垂直居中\n要将所有元素垂直居中，太简单了：\n```css\nhtml, body {\n  height: 100%;\n  margin: 0;\n}\nbody {\n  -webkit-align-items: center;  \n  -ms-flex-align: center;  \n  align-items: center;\n  display: -webkit-flex;\n  display: flex;\n}\n```\n看，是不是很简单。\n注意：在IE11中要小心flexbox。\n\n5.**逗号分隔的列表**\n让HTML列表项看上去像一个真正的，用逗号分隔的列表：\n```css\nul > li:not(:last-child)::after {\n  content: \",\";\n}\n```\n对最后一个列表项使用 :not() 伪类。\n使用负的 nth-child 选择项目\n在CSS中使用负的 nth-child 选择项目1到项目n。\n```css\nli {\n  display: none;\n}\n/* select items 1 through 3 and display them */\nli:nth-child(-n+3) {\n  display: block;\n}\n```\n\n6.**对图标使用 SVG**\n我们没有理由不对图标使用SVG：\n```css\n.logo {\n  background: url(\"logo.svg\");\n}\n```\nSVG对所有的分辨率类型都具有良好的扩展性，并支持所有浏览器都回归到IE9。这样可以避开.png、.jpg或.gif文件了。\n\n7.**优化显示文本**\n有时，字体并不能在所有设备上都达到最佳的显示，所以可以让设备浏览器来帮助你：\n```css\nhtml {\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  text-rendering: optimizeLegibility;\n}\n```\n`注：请负责任地使用 optimizeLegibility。此外，IE /Edge没有 text-rendering 支持。`\n\n8.**对纯 CSS 滑块使用 max-height**\n使用 max-height 和溢出隐藏来实现只有CSS的滑块：\n```css\n.slider ul {\n  max-height: 0;\n  overlow: hidden;\n}\n.slider:hover ul {\n  max-height: 1000px;\n  transition: .3s ease;\n}\n```\n\n9.**继承 box-sizing**\n让 box-sizing 继承 html：\n```css\nhtml {\n  box-sizing: border-box;\n}\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n```\n这样在插件或杠杆其他行为的其他组件中就能更容易地改变 box-sizing 了。\n\n10.**表格单元格等宽**\n表格工作起来很麻烦，所以务必尽量使用 table-layout: fixed 来保持单元格的等宽：\n```css\n.calendar {\n  table-layout: fixed;\n}\n```\n\n11.**用 Flexbox 摆脱外边距的各种 hack**\n当需要用到列分隔符时，通过flexbox的 space-between 属性，你就可以摆脱nth-，first-，和 last-child 的hack了：\n```css\n.list {\n  display: flex;\n  justify-content: space-between;\n}\n.list .person {\n  flex-basis: 23%;\n}\n```\n现在，列表分隔符就会在均匀间隔的位置出现。\n\n12.**使用属性选择器用于空链接**\n当a元素没有文本值，但 href 属性有链接的时候显示链接：\na[href^=\"http\"]:empty::before {\n  content: attr(href);\n}\n相当方便。\n\n13.**检测鼠标双击**\n```html\nHTML：\n<div class=\"test3\">\n  <span><input type=\"text\" value=\" \" readonly=\"true\">\n  <a href=\"http://www.fly33.top\">Double click me</a></span>\n</div>\n```\n```css\nCSS：\n.test3 span {\n  position: relative;\n}\n.test3 span a {\n  position: relative;\n  z-index: 2;\n}\n.test3 span a:hover, .test3 span a:active {\n  z-index: 4;\n}\n.test3 span input {\n  background: transparent;\n  border: 0;\n  cursor: pointer;\n  position: absolute;\n  top: -1px;\n  left: 0;\n  width: 101%;  /* Hacky */\n  height: 301%; /* Hacky */\n  z-index: 3;\n}\n.test3 span input:focus {\n  background: transparent;\n  border: 0;\n  z-index: 1;\n}\n```\n\n14.**CSS 写出三角形**\n```css\n/* create an arrow that points up */\ndiv.arrow-up {\n  width:0px;\n  height:0px;\n  border-left:5px solid transparent;  /* left arrow slant */\n  border-right:5px solid transparent; /* right arrow slant */\n  border-bottom:5px solid #2f2f2f; /* bottom, add background color here */\n  font-size:0px;\n  line-height:0px;\n}\n/* create an arrow that points down */\ndiv.arrow-down {\n  width:0px;\n  height:0px;\n  border-left:5px solid transparent;\n  border-right:5px solid transparent;\n  border-top:5px solid #2f2f2f;\n  font-size:0px;\n  line-height:0px;\n}\n/* create an arrow that points left */\ndiv.arrow-left {\n  width:0px;\n  height:0px;\n  border-bottom:5px solid transparent;  /* left arrow slant */\n  border-top:5px solid transparent; /* right arrow slant */\n  border-right:5px solid #2f2f2f; /* bottom, add background color here */\n  font-size:0px;\n  line-height:0px;\n}\n/* create an arrow that points right */\ndiv.arrow-right {\n  width:0px;\n  height:0px;\n  border-bottom:5px solid transparent;  /* left arrow slant */\n  border-top:5px solid transparent; /* right arrow slant */\n  border-left:5px solid #2f2f2f; /* bottom, add background color here */\n  font-size:0px;\n  line-height:0px;\n}\n```\n\n15.**CSS3 calc() 的使用**\ncalc() 用法类似于函数，能够给元素设置动态的值：\n```css\n/* basic calc */\n.simpleBlock {\n  width: calc(100% - 100px);\n}\n/* calc in calc */\n.complexBlock {\n  width: calc(100% - 50% / 3);\n  padding: 5px calc(3% - 2px);\n  margin-left: calc(10% + 10px);\n}\n```\n\n16.**文本渐变**\n文本渐变效果很流行，使用 CSS3 能够很简单就实现：\n```css\nh2[data-text] {\n  position: relative;\n}\nh2[data-text]::after {\n  content: attr(data-text);\n  z-index: 10;\n  color: #e3e3e3;\n  position: absolute;\n  top: 0;\n  left: 0;\n  -webkit-mask-image: -webkit-gradient(linear, left top, left bottom, from(rgba(0,0,0,0)), color-stop(50%, rgba(0,0,0,1)), to(rgba(0,0,0,0)));\n}\n```\n17.**禁用鼠标事件**\nCSS3 新增的 pointer-events 让你能够禁用元素的鼠标事件，例如，一个连接如果设置了下面的样式就无法点击了。\n```css\n.disabled { pointer-events: none; }\n```\n\n18.**模糊文本**\n简单但很漂亮的文本模糊效果，简单又好看！\n```css\n.blur {\n   color: transparent;\n   text-shadow: 0 0 5px rgba(0,0,0,0.5);\n}\n```","slug":"css常用技巧","published":1,"updated":"2021-09-29T10:29:58.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv7i9bnb00046o9klsw2egjx","content":"<p>1.<strong>黑白图像</strong><br>这段代码会让你的彩色照片显示为黑白照片，是不是很酷？<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">img</span><span class=\"selector-class\">.desaturate</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">filter</span>: <span class=\"built_in\">grayscale</span>(100%);</div><div class=\"line\">    <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">grayscale</span>(100%);</div><div class=\"line\">    <span class=\"attribute\">-moz-filter</span>: <span class=\"built_in\">grayscale</span>(100%);</div><div class=\"line\">    <span class=\"attribute\">-ms-filter</span>: <span class=\"built_in\">grayscale</span>(100%);</div><div class=\"line\">    <span class=\"attribute\">-o-filter</span>: <span class=\"built_in\">grayscale</span>(100%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>2.<strong>使用 :not() 在菜单上应用/取消应用边框</strong><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">先给每一个菜单项添加边框</div><div class=\"line\"><span class=\"comment\">/* add border */</span></div><div class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">li</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#666</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">……然后再除去最后一个元素……</div><div class=\"line\">// remove border /</div><div class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:last-child</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border-right</span>: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以直接使用 :not() 伪类来应用元素：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-pseudo\">:last-child)</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#666</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样代码就干净，易读，易于理解了。<br>当然，如果你的新元素有兄弟元素的话，也可以使用通用的兄弟选择符（~）：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span> ~ <span class=\"selector-tag\">li</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#666</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.<strong>页面顶部阴影</strong><br>下面这个简单的 CSS3 代码片段可以给网页加上漂亮的顶部阴影效果：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span><span class=\"selector-pseudo\">:before</span> &#123;</div><div class=\"line\">          <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</div><div class=\"line\">          <span class=\"attribute\">position</span>: fixed;</div><div class=\"line\">          <span class=\"attribute\">top</span>: -<span class=\"number\">10px</span>;</div><div class=\"line\">          <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">          <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">          <span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">          <span class=\"attribute\">-webkit-box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">10px</span> <span class=\"built_in\">rgba</span>(0,0,0,.8);</div><div class=\"line\">          <span class=\"attribute\">-moz-box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">10px</span> <span class=\"built_in\">rgba</span>(0,0,0,.8);</div><div class=\"line\">          <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">10px</span> <span class=\"built_in\">rgba</span>(0,0,0,.8);</div><div class=\"line\">          <span class=\"attribute\">z-index</span>: <span class=\"number\">100</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.<strong>给 body 添加行高</strong><br>你不需要分别添加 line-height 到每个p,h标记等。只要添加到 body 即可：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样文本元素就可以很容易地从 body 继承。<br>所有一切都垂直居中<br>要将所有元素垂直居中，太简单了：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">-webkit-align-items</span>: center;  </div><div class=\"line\">  <span class=\"attribute\">-ms-flex-align</span>: center;  </div><div class=\"line\">  <span class=\"attribute\">align-items</span>: center;</div><div class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex;</div><div class=\"line\">  <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看，是不是很简单。<br>注意：在IE11中要小心flexbox。</p>\n<p>5.<strong>逗号分隔的列表</strong><br>让HTML列表项看上去像一个真正的，用逗号分隔的列表：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">ul</span> &gt; <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-pseudo\">:last-child)</span><span class=\"selector-pseudo\">::after</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\",\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对最后一个列表项使用 :not() 伪类。<br>使用负的 nth-child 选择项目<br>在CSS中使用负的 nth-child 选择项目1到项目n。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">li</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* select items 1 through 3 and display them */</span></div><div class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child(-n+3)</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: block;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>6.<strong>对图标使用 SVG</strong><br>我们没有理由不对图标使用SVG：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.logo</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"logo.svg\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>SVG对所有的分辨率类型都具有良好的扩展性，并支持所有浏览器都回归到IE9。这样可以避开.png、.jpg或.gif文件了。</p>\n<p>7.<strong>优化显示文本</strong><br>有时，字体并不能在所有设备上都达到最佳的显示，所以可以让设备浏览器来帮助你：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">html</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">-moz-osx-font-smoothing</span>: grayscale;</div><div class=\"line\">  <span class=\"attribute\">-webkit-font-smoothing</span>: antialiased;</div><div class=\"line\">  <span class=\"attribute\">text-rendering</span>: optimizeLegibility;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>注：请负责任地使用 optimizeLegibility。此外，IE /Edge没有 text-rendering 支持。</code></p>\n<p>8.<strong>对纯 CSS 滑块使用 max-height</strong><br>使用 max-height 和溢出隐藏来实现只有CSS的滑块：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.slider</span> <span class=\"selector-tag\">ul</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">max-height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">overlow</span>: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.slider</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">ul</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">max-height</span>: <span class=\"number\">1000px</span>;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: .<span class=\"number\">3s</span> ease;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>9.<strong>继承 box-sizing</strong><br>让 box-sizing 继承 html：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">html</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</div><div class=\"line\">&#125;</div><div class=\"line\">*, *<span class=\"selector-pseudo\">:before</span>, *<span class=\"selector-pseudo\">:after</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">box-sizing</span>: inherit;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样在插件或杠杆其他行为的其他组件中就能更容易地改变 box-sizing 了。</p>\n<p>10.<strong>表格单元格等宽</strong><br>表格工作起来很麻烦，所以务必尽量使用 table-layout: fixed 来保持单元格的等宽：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.calendar</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">table-layout</span>: fixed;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>11.<strong>用 Flexbox 摆脱外边距的各种 hack</strong><br>当需要用到列分隔符时，通过flexbox的 space-between 属性，你就可以摆脱nth-，first-，和 last-child 的hack了：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.list</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">  <span class=\"attribute\">justify-content</span>: space-between;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.list</span> <span class=\"selector-class\">.person</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-basis</span>: <span class=\"number\">23%</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在，列表分隔符就会在均匀间隔的位置出现。</p>\n<p>12.<strong>使用属性选择器用于空链接</strong><br>当a元素没有文本值，但 href 属性有链接的时候显示链接：<br>a[href^=”http”]:empty::before {<br>  content: attr(href);<br>}<br>相当方便。</p>\n<p>13.<strong>检测鼠标双击</strong><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML：</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"test3\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\" \"</span> <span class=\"attr\">readonly</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.fly33.top\"</span>&gt;</span>Double click me<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">CSS</span>：</div><div class=\"line\"><span class=\"selector-class\">.test3</span> <span class=\"selector-tag\">span</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.test3</span> <span class=\"selector-tag\">span</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.test3</span> <span class=\"selector-tag\">span</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>, <span class=\"selector-class\">.test3</span> <span class=\"selector-tag\">span</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">4</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.test3</span> <span class=\"selector-tag\">span</span> <span class=\"selector-tag\">input</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: transparent;</div><div class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">  <span class=\"attribute\">top</span>: -<span class=\"number\">1px</span>;</div><div class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">101%</span>;  <span class=\"comment\">/* Hacky */</span></div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">301%</span>; <span class=\"comment\">/* Hacky */</span></div><div class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.test3</span> <span class=\"selector-tag\">span</span> <span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:focus</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: transparent;</div><div class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>14.<strong>CSS 写出三角形</strong><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* create an arrow that points up */</span></div><div class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.arrow-up</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-left</span>:<span class=\"number\">5px</span> solid transparent;  <span class=\"comment\">/* left arrow slant */</span></div><div class=\"line\">  <span class=\"attribute\">border-right</span>:<span class=\"number\">5px</span> solid transparent; <span class=\"comment\">/* right arrow slant */</span></div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>:<span class=\"number\">5px</span> solid <span class=\"number\">#2f2f2f</span>; <span class=\"comment\">/* bottom, add background color here */</span></div><div class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* create an arrow that points down */</span></div><div class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.arrow-down</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-left</span>:<span class=\"number\">5px</span> solid transparent;</div><div class=\"line\">  <span class=\"attribute\">border-right</span>:<span class=\"number\">5px</span> solid transparent;</div><div class=\"line\">  <span class=\"attribute\">border-top</span>:<span class=\"number\">5px</span> solid <span class=\"number\">#2f2f2f</span>;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* create an arrow that points left */</span></div><div class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.arrow-left</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>:<span class=\"number\">5px</span> solid transparent;  <span class=\"comment\">/* left arrow slant */</span></div><div class=\"line\">  <span class=\"attribute\">border-top</span>:<span class=\"number\">5px</span> solid transparent; <span class=\"comment\">/* right arrow slant */</span></div><div class=\"line\">  <span class=\"attribute\">border-right</span>:<span class=\"number\">5px</span> solid <span class=\"number\">#2f2f2f</span>; <span class=\"comment\">/* bottom, add background color here */</span></div><div class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* create an arrow that points right */</span></div><div class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.arrow-right</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>:<span class=\"number\">5px</span> solid transparent;  <span class=\"comment\">/* left arrow slant */</span></div><div class=\"line\">  <span class=\"attribute\">border-top</span>:<span class=\"number\">5px</span> solid transparent; <span class=\"comment\">/* right arrow slant */</span></div><div class=\"line\">  <span class=\"attribute\">border-left</span>:<span class=\"number\">5px</span> solid <span class=\"number\">#2f2f2f</span>; <span class=\"comment\">/* bottom, add background color here */</span></div><div class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>15.<strong>CSS3 calc() 的使用</strong><br>calc() 用法类似于函数，能够给元素设置动态的值：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* basic calc */</span></div><div class=\"line\"><span class=\"selector-class\">.simpleBlock</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"built_in\">calc</span>(100% - 100px);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* calc in calc */</span></div><div class=\"line\"><span class=\"selector-class\">.complexBlock</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"built_in\">calc</span>(100% - 50% / 3);</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span> <span class=\"built_in\">calc</span>(3% - 2px);</div><div class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"built_in\">calc</span>(10% + 10px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>16.<strong>文本渐变</strong><br>文本渐变效果很流行，使用 CSS3 能够很简单就实现：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">h2</span><span class=\"selector-attr\">[data-text]</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">h2</span><span class=\"selector-attr\">[data-text]</span><span class=\"selector-pseudo\">::after</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"built_in\">attr</span>(data-text);</div><div class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#e3e3e3</span>;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">-webkit-mask-image</span>: <span class=\"built_in\">-webkit-gradient</span>(linear, left top, left bottom, from(rgba(0,0,0,0)), <span class=\"built_in\">color-stop</span>(50%, rgba(0,0,0,1)), <span class=\"built_in\">to</span>(rgba(0,0,0,0)));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>17.<strong>禁用鼠标事件</strong><br>CSS3 新增的 pointer-events 让你能够禁用元素的鼠标事件，例如，一个连接如果设置了下面的样式就无法点击了。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.disabled</span> &#123; <span class=\"attribute\">pointer-events</span>: none; &#125;</div></pre></td></tr></table></figure></p>\n<p>18.<strong>模糊文本</strong><br>简单但很漂亮的文本模糊效果，简单又好看！<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.blur</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">color</span>: transparent;</div><div class=\"line\">   <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(0,0,0,0.5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>1.<strong>黑白图像</strong><br>这段代码会让你的彩色照片显示为黑白照片，是不是很酷？<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">img</span><span class=\"selector-class\">.desaturate</span> &#123;</div><div class=\"line\">    <span class=\"attribute\">filter</span>: <span class=\"built_in\">grayscale</span>(100%);</div><div class=\"line\">    <span class=\"attribute\">-webkit-filter</span>: <span class=\"built_in\">grayscale</span>(100%);</div><div class=\"line\">    <span class=\"attribute\">-moz-filter</span>: <span class=\"built_in\">grayscale</span>(100%);</div><div class=\"line\">    <span class=\"attribute\">-ms-filter</span>: <span class=\"built_in\">grayscale</span>(100%);</div><div class=\"line\">    <span class=\"attribute\">-o-filter</span>: <span class=\"built_in\">grayscale</span>(100%);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>","more":"<p>2.<strong>使用 :not() 在菜单上应用/取消应用边框</strong><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">先给每一个菜单项添加边框</div><div class=\"line\"><span class=\"comment\">/* add border */</span></div><div class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">li</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#666</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">……然后再除去最后一个元素……</div><div class=\"line\">// remove border /</div><div class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:last-child</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border-right</span>: none;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>可以直接使用 :not() 伪类来应用元素：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-pseudo\">:last-child)</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#666</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样代码就干净，易读，易于理解了。<br>当然，如果你的新元素有兄弟元素的话，也可以使用通用的兄弟选择符（~）：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.nav</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span> ~ <span class=\"selector-tag\">li</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#666</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>3.<strong>页面顶部阴影</strong><br>下面这个简单的 CSS3 代码片段可以给网页加上漂亮的顶部阴影效果：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span><span class=\"selector-pseudo\">:before</span> &#123;</div><div class=\"line\">          <span class=\"attribute\">content</span>: <span class=\"string\">\"\"</span>;</div><div class=\"line\">          <span class=\"attribute\">position</span>: fixed;</div><div class=\"line\">          <span class=\"attribute\">top</span>: -<span class=\"number\">10px</span>;</div><div class=\"line\">          <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">          <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">          <span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">          <span class=\"attribute\">-webkit-box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">10px</span> <span class=\"built_in\">rgba</span>(0,0,0,.8);</div><div class=\"line\">          <span class=\"attribute\">-moz-box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">10px</span> <span class=\"built_in\">rgba</span>(0,0,0,.8);</div><div class=\"line\">          <span class=\"attribute\">box-shadow</span>: <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">10px</span> <span class=\"built_in\">rgba</span>(0,0,0,.8);</div><div class=\"line\">          <span class=\"attribute\">z-index</span>: <span class=\"number\">100</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>4.<strong>给 body 添加行高</strong><br>你不需要分别添加 line-height 到每个p,h标记等。只要添加到 body 即可：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样文本元素就可以很容易地从 body 继承。<br>所有一切都垂直居中<br>要将所有元素垂直居中，太简单了：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">body</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">-webkit-align-items</span>: center;  </div><div class=\"line\">  <span class=\"attribute\">-ms-flex-align</span>: center;  </div><div class=\"line\">  <span class=\"attribute\">align-items</span>: center;</div><div class=\"line\">  <span class=\"attribute\">display</span>: -webkit-flex;</div><div class=\"line\">  <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>看，是不是很简单。<br>注意：在IE11中要小心flexbox。</p>\n<p>5.<strong>逗号分隔的列表</strong><br>让HTML列表项看上去像一个真正的，用逗号分隔的列表：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">ul</span> &gt; <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:not(</span><span class=\"selector-pseudo\">:last-child)</span><span class=\"selector-pseudo\">::after</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"string\">\",\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>对最后一个列表项使用 :not() 伪类。<br>使用负的 nth-child 选择项目<br>在CSS中使用负的 nth-child 选择项目1到项目n。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">li</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* select items 1 through 3 and display them */</span></div><div class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:nth-child(-n+3)</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: block;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>6.<strong>对图标使用 SVG</strong><br>我们没有理由不对图标使用SVG：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.logo</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"logo.svg\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>SVG对所有的分辨率类型都具有良好的扩展性，并支持所有浏览器都回归到IE9。这样可以避开.png、.jpg或.gif文件了。</p>\n<p>7.<strong>优化显示文本</strong><br>有时，字体并不能在所有设备上都达到最佳的显示，所以可以让设备浏览器来帮助你：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">html</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">-moz-osx-font-smoothing</span>: grayscale;</div><div class=\"line\">  <span class=\"attribute\">-webkit-font-smoothing</span>: antialiased;</div><div class=\"line\">  <span class=\"attribute\">text-rendering</span>: optimizeLegibility;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>注：请负责任地使用 optimizeLegibility。此外，IE /Edge没有 text-rendering 支持。</code></p>\n<p>8.<strong>对纯 CSS 滑块使用 max-height</strong><br>使用 max-height 和溢出隐藏来实现只有CSS的滑块：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.slider</span> <span class=\"selector-tag\">ul</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">max-height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">overlow</span>: hidden;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.slider</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-tag\">ul</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">max-height</span>: <span class=\"number\">1000px</span>;</div><div class=\"line\">  <span class=\"attribute\">transition</span>: .<span class=\"number\">3s</span> ease;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>9.<strong>继承 box-sizing</strong><br>让 box-sizing 继承 html：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">html</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</div><div class=\"line\">&#125;</div><div class=\"line\">*, *<span class=\"selector-pseudo\">:before</span>, *<span class=\"selector-pseudo\">:after</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">box-sizing</span>: inherit;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这样在插件或杠杆其他行为的其他组件中就能更容易地改变 box-sizing 了。</p>\n<p>10.<strong>表格单元格等宽</strong><br>表格工作起来很麻烦，所以务必尽量使用 table-layout: fixed 来保持单元格的等宽：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.calendar</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">table-layout</span>: fixed;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>11.<strong>用 Flexbox 摆脱外边距的各种 hack</strong><br>当需要用到列分隔符时，通过flexbox的 space-between 属性，你就可以摆脱nth-，first-，和 last-child 的hack了：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.list</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">  <span class=\"attribute\">justify-content</span>: space-between;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.list</span> <span class=\"selector-class\">.person</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">flex-basis</span>: <span class=\"number\">23%</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>现在，列表分隔符就会在均匀间隔的位置出现。</p>\n<p>12.<strong>使用属性选择器用于空链接</strong><br>当a元素没有文本值，但 href 属性有链接的时候显示链接：<br>a[href^=”http”]:empty::before {<br>  content: attr(href);<br>}<br>相当方便。</p>\n<p>13.<strong>检测鼠标双击</strong><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTML：</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"test3\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\" \"</span> <span class=\"attr\">readonly</span>=<span class=\"string\">\"true\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://www.fly33.top\"</span>&gt;</span>Double click me<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">CSS</span>：</div><div class=\"line\"><span class=\"selector-class\">.test3</span> <span class=\"selector-tag\">span</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.test3</span> <span class=\"selector-tag\">span</span> <span class=\"selector-tag\">a</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.test3</span> <span class=\"selector-tag\">span</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span>, <span class=\"selector-class\">.test3</span> <span class=\"selector-tag\">span</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">4</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.test3</span> <span class=\"selector-tag\">span</span> <span class=\"selector-tag\">input</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: transparent;</div><div class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">  <span class=\"attribute\">top</span>: -<span class=\"number\">1px</span>;</div><div class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">101%</span>;  <span class=\"comment\">/* Hacky */</span></div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">301%</span>; <span class=\"comment\">/* Hacky */</span></div><div class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.test3</span> <span class=\"selector-tag\">span</span> <span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:focus</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: transparent;</div><div class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>14.<strong>CSS 写出三角形</strong><br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* create an arrow that points up */</span></div><div class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.arrow-up</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-left</span>:<span class=\"number\">5px</span> solid transparent;  <span class=\"comment\">/* left arrow slant */</span></div><div class=\"line\">  <span class=\"attribute\">border-right</span>:<span class=\"number\">5px</span> solid transparent; <span class=\"comment\">/* right arrow slant */</span></div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>:<span class=\"number\">5px</span> solid <span class=\"number\">#2f2f2f</span>; <span class=\"comment\">/* bottom, add background color here */</span></div><div class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* create an arrow that points down */</span></div><div class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.arrow-down</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-left</span>:<span class=\"number\">5px</span> solid transparent;</div><div class=\"line\">  <span class=\"attribute\">border-right</span>:<span class=\"number\">5px</span> solid transparent;</div><div class=\"line\">  <span class=\"attribute\">border-top</span>:<span class=\"number\">5px</span> solid <span class=\"number\">#2f2f2f</span>;</div><div class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* create an arrow that points left */</span></div><div class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.arrow-left</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>:<span class=\"number\">5px</span> solid transparent;  <span class=\"comment\">/* left arrow slant */</span></div><div class=\"line\">  <span class=\"attribute\">border-top</span>:<span class=\"number\">5px</span> solid transparent; <span class=\"comment\">/* right arrow slant */</span></div><div class=\"line\">  <span class=\"attribute\">border-right</span>:<span class=\"number\">5px</span> solid <span class=\"number\">#2f2f2f</span>; <span class=\"comment\">/* bottom, add background color here */</span></div><div class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* create an arrow that points right */</span></div><div class=\"line\"><span class=\"selector-tag\">div</span><span class=\"selector-class\">.arrow-right</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-bottom</span>:<span class=\"number\">5px</span> solid transparent;  <span class=\"comment\">/* left arrow slant */</span></div><div class=\"line\">  <span class=\"attribute\">border-top</span>:<span class=\"number\">5px</span> solid transparent; <span class=\"comment\">/* right arrow slant */</span></div><div class=\"line\">  <span class=\"attribute\">border-left</span>:<span class=\"number\">5px</span> solid <span class=\"number\">#2f2f2f</span>; <span class=\"comment\">/* bottom, add background color here */</span></div><div class=\"line\">  <span class=\"attribute\">font-size</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">  <span class=\"attribute\">line-height</span>:<span class=\"number\">0px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>15.<strong>CSS3 calc() 的使用</strong><br>calc() 用法类似于函数，能够给元素设置动态的值：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* basic calc */</span></div><div class=\"line\"><span class=\"selector-class\">.simpleBlock</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"built_in\">calc</span>(100% - 100px);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* calc in calc */</span></div><div class=\"line\"><span class=\"selector-class\">.complexBlock</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"built_in\">calc</span>(100% - 50% / 3);</div><div class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span> <span class=\"built_in\">calc</span>(3% - 2px);</div><div class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"built_in\">calc</span>(10% + 10px);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>16.<strong>文本渐变</strong><br>文本渐变效果很流行，使用 CSS3 能够很简单就实现：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">h2</span><span class=\"selector-attr\">[data-text]</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-tag\">h2</span><span class=\"selector-attr\">[data-text]</span><span class=\"selector-pseudo\">::after</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"built_in\">attr</span>(data-text);</div><div class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">10</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#e3e3e3</span>;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">-webkit-mask-image</span>: <span class=\"built_in\">-webkit-gradient</span>(linear, left top, left bottom, from(rgba(0,0,0,0)), <span class=\"built_in\">color-stop</span>(50%, rgba(0,0,0,1)), <span class=\"built_in\">to</span>(rgba(0,0,0,0)));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>17.<strong>禁用鼠标事件</strong><br>CSS3 新增的 pointer-events 让你能够禁用元素的鼠标事件，例如，一个连接如果设置了下面的样式就无法点击了。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.disabled</span> &#123; <span class=\"attribute\">pointer-events</span>: none; &#125;</div></pre></td></tr></table></figure></p>\n<p>18.<strong>模糊文本</strong><br>简单但很漂亮的文本模糊效果，简单又好看！<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.blur</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">color</span>: transparent;</div><div class=\"line\">   <span class=\"attribute\">text-shadow</span>: <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">5px</span> <span class=\"built_in\">rgba</span>(0,0,0,0.5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"new Object发生了什么","date":"2019-03-11T15:53:36.000Z","_content":"\n### new XXX()发生了什么？\n\n1. 创建一个新对象\n2. 将构造函数的作用域赋给新对象（因此this就指向了这个新对象）\n3. 执行构造函数中的代码（为这个新对象添加属性）\n4. 返回新对象\n   \n```\nfunction creatObj() {\n    var obj = new Object(),\n        Constructor = [].shift.call(arguments);\n    obj.__proto__ = Constructor.prototype;\n    var ret = Constructor.apply(obj, arguments);\n    return typeof ret === 'Object' ? ret : obj;\n}\n\nfunction Person(name){\n    this.name = name;\n}\n\nPerson.prototype.getName = function(){\n    return this.name;\n}\n\nvar a = creatObj(Person, 'seven');\nconsole.log(a.name)   // seven\nconsole.log(a.getName)   // seven\nconsole.log(Object.getPrototypeOf(a) === Person.prototype)   // true\n\n下面两句代码产生了一样的结果\nvar a = creatObj(Person, 'seven')\nvar a = new Person('seven')\n\n// 另一种写法\nfunction creatObj() {\n    var Constructor = [].shift.call(arguments),\n        obj = Object.create(Constructor.prototype);\n    var ret = Constructor.apply(obj, arguments);\n    return typeof ret === 'Object' ? ret : obj;\n}\n\n```","source":"_posts/new操作符.md","raw":"---\ntitle: new Object发生了什么\ndate: 2019-03-11 23:53:36\ntags: [\"javascript\"]\n---\n\n### new XXX()发生了什么？\n\n1. 创建一个新对象\n2. 将构造函数的作用域赋给新对象（因此this就指向了这个新对象）\n3. 执行构造函数中的代码（为这个新对象添加属性）\n4. 返回新对象\n   \n```\nfunction creatObj() {\n    var obj = new Object(),\n        Constructor = [].shift.call(arguments);\n    obj.__proto__ = Constructor.prototype;\n    var ret = Constructor.apply(obj, arguments);\n    return typeof ret === 'Object' ? ret : obj;\n}\n\nfunction Person(name){\n    this.name = name;\n}\n\nPerson.prototype.getName = function(){\n    return this.name;\n}\n\nvar a = creatObj(Person, 'seven');\nconsole.log(a.name)   // seven\nconsole.log(a.getName)   // seven\nconsole.log(Object.getPrototypeOf(a) === Person.prototype)   // true\n\n下面两句代码产生了一样的结果\nvar a = creatObj(Person, 'seven')\nvar a = new Person('seven')\n\n// 另一种写法\nfunction creatObj() {\n    var Constructor = [].shift.call(arguments),\n        obj = Object.create(Constructor.prototype);\n    var ret = Constructor.apply(obj, arguments);\n    return typeof ret === 'Object' ? ret : obj;\n}\n\n```","slug":"new操作符","published":1,"updated":"2021-09-29T10:29:58.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv7i9bqq000g6o9kmecr71mm","content":"<h3 id=\"new-XXX-发生了什么？\"><a href=\"#new-XXX-发生了什么？\" class=\"headerlink\" title=\"new XXX()发生了什么？\"></a>new XXX()发生了什么？</h3><ol>\n<li>创建一个新对象</li>\n<li>将构造函数的作用域赋给新对象（因此this就指向了这个新对象）</li>\n<li>执行构造函数中的代码（为这个新对象添加属性）</li>\n<li>返回新对象</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">function creatObj() &#123;</div><div class=\"line\">    var obj = new Object(),</div><div class=\"line\">        Constructor = [].shift.call(arguments);</div><div class=\"line\">    obj.__proto__ = Constructor.prototype;</div><div class=\"line\">    var ret = Constructor.apply(obj, arguments);</div><div class=\"line\">    return typeof ret === &apos;Object&apos; ? ret : obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function Person(name)&#123;</div><div class=\"line\">    this.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.getName = function()&#123;</div><div class=\"line\">    return this.name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var a = creatObj(Person, &apos;seven&apos;);</div><div class=\"line\">console.log(a.name)   // seven</div><div class=\"line\">console.log(a.getName)   // seven</div><div class=\"line\">console.log(Object.getPrototypeOf(a) === Person.prototype)   // true</div><div class=\"line\"></div><div class=\"line\">下面两句代码产生了一样的结果</div><div class=\"line\">var a = creatObj(Person, &apos;seven&apos;)</div><div class=\"line\">var a = new Person(&apos;seven&apos;)</div><div class=\"line\"></div><div class=\"line\">// 另一种写法</div><div class=\"line\">function creatObj() &#123;</div><div class=\"line\">    var Constructor = [].shift.call(arguments),</div><div class=\"line\">        obj = Object.create(Constructor.prototype);</div><div class=\"line\">    var ret = Constructor.apply(obj, arguments);</div><div class=\"line\">    return typeof ret === &apos;Object&apos; ? ret : obj;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"new-XXX-发生了什么？\"><a href=\"#new-XXX-发生了什么？\" class=\"headerlink\" title=\"new XXX()发生了什么？\"></a>new XXX()发生了什么？</h3><ol>\n<li>创建一个新对象</li>\n<li>将构造函数的作用域赋给新对象（因此this就指向了这个新对象）</li>\n<li>执行构造函数中的代码（为这个新对象添加属性）</li>\n<li>返回新对象</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">function creatObj() &#123;</div><div class=\"line\">    var obj = new Object(),</div><div class=\"line\">        Constructor = [].shift.call(arguments);</div><div class=\"line\">    obj.__proto__ = Constructor.prototype;</div><div class=\"line\">    var ret = Constructor.apply(obj, arguments);</div><div class=\"line\">    return typeof ret === &apos;Object&apos; ? ret : obj;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function Person(name)&#123;</div><div class=\"line\">    this.name = name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype.getName = function()&#123;</div><div class=\"line\">    return this.name;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var a = creatObj(Person, &apos;seven&apos;);</div><div class=\"line\">console.log(a.name)   // seven</div><div class=\"line\">console.log(a.getName)   // seven</div><div class=\"line\">console.log(Object.getPrototypeOf(a) === Person.prototype)   // true</div><div class=\"line\"></div><div class=\"line\">下面两句代码产生了一样的结果</div><div class=\"line\">var a = creatObj(Person, &apos;seven&apos;)</div><div class=\"line\">var a = new Person(&apos;seven&apos;)</div><div class=\"line\"></div><div class=\"line\">// 另一种写法</div><div class=\"line\">function creatObj() &#123;</div><div class=\"line\">    var Constructor = [].shift.call(arguments),</div><div class=\"line\">        obj = Object.create(Constructor.prototype);</div><div class=\"line\">    var ret = Constructor.apply(obj, arguments);</div><div class=\"line\">    return typeof ret === &apos;Object&apos; ? ret : obj;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"web缓存","date":"2019-03-14T04:53:36.000Z","_content":"\n\n### 前端缓存\n前端缓存主要是分为HTTP缓存和浏览器缓存。\n其中HTTP缓存是在HTTP请求传输时用到的缓存，主要在服务器代码上设置；而浏览器缓存则主要由前端开发在前端js上进行设置。\n\n![概述](/images/cache/00bf9849ec2780d4ae4764e7979023c9.png)\n","source":"_posts/web缓存.md","raw":"---\ntitle: web缓存\ndate: 2019-03-14 12:53:36\ntags: [\"性能优化\"]\n---\n\n\n### 前端缓存\n前端缓存主要是分为HTTP缓存和浏览器缓存。\n其中HTTP缓存是在HTTP请求传输时用到的缓存，主要在服务器代码上设置；而浏览器缓存则主要由前端开发在前端js上进行设置。\n\n![概述](/images/cache/00bf9849ec2780d4ae4764e7979023c9.png)\n","slug":"web缓存","published":1,"updated":"2021-10-26T03:13:21.952Z","_id":"ckv7i9bqs000i6o9kpxep3pj3","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前端缓存\"><a href=\"#前端缓存\" class=\"headerlink\" title=\"前端缓存\"></a>前端缓存</h3><p>前端缓存主要是分为HTTP缓存和浏览器缓存。<br>其中HTTP缓存是在HTTP请求传输时用到的缓存，主要在服务器代码上设置；而浏览器缓存则主要由前端开发在前端js上进行设置。</p>\n<p><img src=\"/images/cache/00bf9849ec2780d4ae4764e7979023c9.png\" alt=\"概述\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前端缓存\"><a href=\"#前端缓存\" class=\"headerlink\" title=\"前端缓存\"></a>前端缓存</h3><p>前端缓存主要是分为HTTP缓存和浏览器缓存。<br>其中HTTP缓存是在HTTP请求传输时用到的缓存，主要在服务器代码上设置；而浏览器缓存则主要由前端开发在前端js上进行设置。</p>\n<p><img src=\"/images/cache/00bf9849ec2780d4ae4764e7979023c9.png\" alt=\"概述\"></p>\n"},{"title":"this","date":"2017-11-09T07:25:05.000Z","_content":"\nthis 不是编写时绑定，而是运行时绑定。它依赖于函数调用的上下文条件。this 绑定与函数声明的位置没有任何关系，而与函数被调用的方式紧密相连。\n\n当一个函数被调用时，会建立一个称为执行环境的活动记录。这个记录包含函数是从何处（调用栈 —— call-stack）被调用的，函数是 如何 被调用的，被传递了什么参数等信息。这个记录的属性之一，就是在函数执行期间将被使用的 this 引用。\n\n> **this 实际上是在函数被调用时建立的一个绑定，它指向 什么 是完全由函数被调用的调用点来 (Call-site)决定的。**\n\n> 考虑 **调用栈（call-stack）** （使我们到达当前执行位置而被调用的所有方法的堆栈）是十分重要的。我们关心的调用点就位于当前执行中的函数 之前 的调用。\n\n当在函数前面被加入 new 调用时，也就是构造器调用时，下面这些事情会自动完成：\n\n- 一个全新的对象会凭空创建（就是被构建）\n- 这个新构建的对象会被接入原形链（[[Prototype]]-linked）\n- 这个新构建的对象被设置为函数调用的 this 绑定\n- 除非函数返回一个它自己的其他 对象，否则这个被 new 调用的函数将 自动 返回这个新构建的对象。\n\nvar ø = {};\n","source":"_posts/this.md","raw":"---\ntitle: this\ndate: 2017-11-09 15:25:05\ntags: [\"javascript\",\"YDKJS\"]\ncategories: 学习\n---\n\nthis 不是编写时绑定，而是运行时绑定。它依赖于函数调用的上下文条件。this 绑定与函数声明的位置没有任何关系，而与函数被调用的方式紧密相连。\n\n当一个函数被调用时，会建立一个称为执行环境的活动记录。这个记录包含函数是从何处（调用栈 —— call-stack）被调用的，函数是 如何 被调用的，被传递了什么参数等信息。这个记录的属性之一，就是在函数执行期间将被使用的 this 引用。\n\n> **this 实际上是在函数被调用时建立的一个绑定，它指向 什么 是完全由函数被调用的调用点来 (Call-site)决定的。**\n\n> 考虑 **调用栈（call-stack）** （使我们到达当前执行位置而被调用的所有方法的堆栈）是十分重要的。我们关心的调用点就位于当前执行中的函数 之前 的调用。\n\n当在函数前面被加入 new 调用时，也就是构造器调用时，下面这些事情会自动完成：\n\n- 一个全新的对象会凭空创建（就是被构建）\n- 这个新构建的对象会被接入原形链（[[Prototype]]-linked）\n- 这个新构建的对象被设置为函数调用的 this 绑定\n- 除非函数返回一个它自己的其他 对象，否则这个被 new 调用的函数将 自动 返回这个新构建的对象。\n\nvar ø = {};\n","slug":"this","published":1,"updated":"2021-09-29T10:29:58.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv7i9bqu000l6o9ktencdrg7","content":"<p>this 不是编写时绑定，而是运行时绑定。它依赖于函数调用的上下文条件。this 绑定与函数声明的位置没有任何关系，而与函数被调用的方式紧密相连。</p>\n<p>当一个函数被调用时，会建立一个称为执行环境的活动记录。这个记录包含函数是从何处（调用栈 —— call-stack）被调用的，函数是 如何 被调用的，被传递了什么参数等信息。这个记录的属性之一，就是在函数执行期间将被使用的 this 引用。</p>\n<blockquote>\n<p><strong>this 实际上是在函数被调用时建立的一个绑定，它指向 什么 是完全由函数被调用的调用点来 (Call-site)决定的。</strong></p>\n<p>考虑 <strong>调用栈（call-stack）</strong> （使我们到达当前执行位置而被调用的所有方法的堆栈）是十分重要的。我们关心的调用点就位于当前执行中的函数 之前 的调用。</p>\n</blockquote>\n<p>当在函数前面被加入 new 调用时，也就是构造器调用时，下面这些事情会自动完成：</p>\n<ul>\n<li>一个全新的对象会凭空创建（就是被构建）</li>\n<li>这个新构建的对象会被接入原形链（[[Prototype]]-linked）</li>\n<li>这个新构建的对象被设置为函数调用的 this 绑定</li>\n<li>除非函数返回一个它自己的其他 对象，否则这个被 new 调用的函数将 自动 返回这个新构建的对象。</li>\n</ul>\n<p>var ø = {};</p>\n","site":{"data":{}},"excerpt":"","more":"<p>this 不是编写时绑定，而是运行时绑定。它依赖于函数调用的上下文条件。this 绑定与函数声明的位置没有任何关系，而与函数被调用的方式紧密相连。</p>\n<p>当一个函数被调用时，会建立一个称为执行环境的活动记录。这个记录包含函数是从何处（调用栈 —— call-stack）被调用的，函数是 如何 被调用的，被传递了什么参数等信息。这个记录的属性之一，就是在函数执行期间将被使用的 this 引用。</p>\n<blockquote>\n<p><strong>this 实际上是在函数被调用时建立的一个绑定，它指向 什么 是完全由函数被调用的调用点来 (Call-site)决定的。</strong></p>\n<p>考虑 <strong>调用栈（call-stack）</strong> （使我们到达当前执行位置而被调用的所有方法的堆栈）是十分重要的。我们关心的调用点就位于当前执行中的函数 之前 的调用。</p>\n</blockquote>\n<p>当在函数前面被加入 new 调用时，也就是构造器调用时，下面这些事情会自动完成：</p>\n<ul>\n<li>一个全新的对象会凭空创建（就是被构建）</li>\n<li>这个新构建的对象会被接入原形链（[[Prototype]]-linked）</li>\n<li>这个新构建的对象被设置为函数调用的 this 绑定</li>\n<li>除非函数返回一个它自己的其他 对象，否则这个被 new 调用的函数将 自动 返回这个新构建的对象。</li>\n</ul>\n<p>var ø = {};</p>\n"},{"title":"es6里的异步实现","date":"2019-03-14T04:53:36.000Z","_content":"\n## promise\n\n#### Promise 是什么？\n[阮一峰: Promise 对象](http://es6.ruanyifeng.com/#docs/promise) \n> Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。\n\n\n#### Promise 的特点？\n> 首先我们知道 promise 对象有三个状态，分别被为pending（等待）、fulfilled（完成）、rejected（失败）  \n> 状态只可以从pending -> fulfilled 或者 pending -> rejected\n\n- 状态只能由它内部改变\n- 状态不可逆\n\n<!--more-->\n\n1. 内部最好写异步操作，毕竟它是异步编程的一种解决方案 \n> 可以很方便的解决回调地狱这种问题\n\n```javascript\n$.ajax('url', params, funtion (res) {\n\n  $.ajax('url', res , funtion (res1) {\n  \n    $.ajax('url', res1, funtion (res2) {\n            console.log(res2)\n        })\n        \n    })  \n    \n})\n\nfucntion ajax (url, params) {\n\n    return new Promise(function (resolve) {\n    \n         // 异步操作 才有意义\n        $.ajax(url, params, funtion (res) {\n            resolve(res);\n        })\n        \n    })\n    \n}\n\n    ajax('u1', 'p1').then((res) => {\n         return ajax('u2', res); // 将 ajax 返回的 promise中的值传递给 then返回的promise。 \n    }).then((res1) => {\n        return ajax('u3', res1);\n    }).then((res2) => {\n        console.log(2)\n    })\n    \n    \n```\n\n2. Promise 构造函数的基本实现\n- 再给实例化的promise中传递的回调中无法用return 代替 resolve \n```javascript\n// promise 其实就是一个状态机 通过不同的状态执行不同的操作\n      const pending = 'pending';\n      const resolved = 'resolved';\n      const rejected = 'rejected';\n\n      // MyPromise 模拟 promise构造函数 简易的实现\n      function MyPromise (fn) { // ‘func’ 方便this指向清晰\n          const _this = this; // 缓存当前 promise 实例对象\n          _this.state = pending; // 初始状态\n          _this.value = undefined; // promise 中存的值\n\n          /*\n          * 当promise在pending的时候\n          * 会将我们写在.then(() => {}, () => {})中的回调传给下边的俩个数组\n          * */\n          _this.resovleCallbacks = [];\n          _this.rejectCallbacks = [];\n\n          // 为什么resolve 加setTimeout?\n          // 实践中要确保 onFulfilled 和 onRejected 方法异步执行，且应该在 then \n          // 方法被调用的那一轮事件循环之后的新执行栈中执行。\n\n          // 我在平常的时候 以为在回调中 resolve了 状态就会立即改变 然而 并不是\n          _this.resolve = function (val) { // 当我们在回调中 调用它的时候就会触发 异步代码\n              if (val instanceof MyPromise) { // 检测 resolve(val) 的值是不是 promise对象\n                return val.then(_this.resolve, _this.reject); // 通过递归 将 val(promise) 的值 传给最外层的promise \n              }\n\n              if (_this.state !== resolved) { // 第一次调用 状态是pending 所以为 true\n                  setTimeout(function () { // 这里异步 then 中回调就会传到 callbacks = []\n                      // 一个 promise 状态只可以改变一次\n                    _this.state = resolved;\n                    _this.value = val;\n                    _this.resovleCallbacks.forEach(fn => fn());\n                  })\n              }\n          };\n\n          this.reject = function (err) { // 可以传递promise 但会报错\n            if (_this.state === rejected) {\n                setTimeout(function () {\n                    _this.state = rejected;\n                    _this.value = err;\n                    _this.rejectCallbacks.forEach(fn => fn());\n                })\n            }\n          };\n\n          try {\n            fn(_this.resolve, _this.reject); // 调用传入的回调函数\n          } catch (e) {\n            _this.reject(e); // 捕获 回调内部 报错\n          }\n      }\n      \n      \n```\n\n\n3. then 方法\n> Promise.prototype 上的一个属性，所以每一个promise实例都可以用它  \n> then 方法必须返回一个 promise 对象   \n> then 方法可以被同一个 promise 调用多次\n\n```javascript\nnew Promise.then() 会生成一个新的promise实例\n\n    \n    MyPromise.prototype.then = function (onResolved, onRejected) {\n          const self = this;\n          let newPromise = null;\n          \n          // 如果类型不是函数需要忽略，同时也实现了透传\n          // Promise.resolve(4).then().then((value) => console.log(value))\n          \n         // onFulfilled 和 onRejected 必须被作为函数调用\n          onResolved = typeof onResolved === 'function' ? onResolved : v => v;\n          onRejected = typeof onRejected === 'function' ? onRejected : r => {throw r};\n          \n          if (self.state === resolved) {\n              newPromise = new MyPromise(function (resolve, reject) {\n                  setTimeout(function () { // 保证 onResolved 和 onRejected 异步 // 该回调会在 当前promise实例的状态改变之后调用\n                      try { // 防止报错\n                          const x = onResolved(self.value);\n                          resolvePromise(newPromise, x, resolve, reject); //  判断 x 的类型执行对应操作\n                      } catch (err) {\n                          reject(err);\n                      }\n                  });\n\n              });\n\n              return newPromise;\n          }\n          if (self.state === pending) {\n              newPromise = new MyPromise(function (resolve, reject) {\n                  self.resovleCallbacks.push(() => { // 该回调会在 当前promise实例的状态改变之前push进去\n                      try {\n                          const x = onResolved(self.value);\n                          resolvePromise(newPromise, x, resolve, reject);\n                      } catch (e) {\n                          reject(e);\n                      }\n                  });\n\n                  self.rejectCallbacks.push(() => {\n                      try {\n                          const x = onResolved(self.value);\n                          resolvePromise(newPromise, x, resolve, reject);\n                      } catch (e) {\n                          reject(e);\n                      }\n                  });\n              });\n\n              return newPromise;\n          }\n      };\n      \n      function resolvePromise (promise2, x, resolve, reject) { // 对内部生成的 newPromise 进行resolve 给下一个then 传值\n          if (promise2 === x) {\n                throw Error('防止死循环');\n          }\n\n          if (x instanceof MyPromise) { // 把 x 的值传给当前的 newPromise\n              if (x === pending) {\n                  x.then(function (val) {\n                      resolvePromise(promise2, val, resolve, reject); // 检测val的类型，如果合适就传给promise2\n                  }, reject)\n              } else {\n                  x.then(resolve, reject); // 直接将x的值 传给promise2\n              }\n          }\n\n          let called = false; // 防止thenable内的方法多次调用 例如 resolve 多次调用\n          //\n          if (x !== null && (typeof x === 'object' || typeof x === 'function')) { // 判断当前 x thenable （函数或对象内具有then属性的方法）\n            try {\n               let then = x.then; // 获取 then 的值\n               if (typeof then === 'function') {\n                   then.call(\n                       x, // 绑定当前 x 对象\n                       y => { // 将 then 中resolve的 值传递给 promise2 \n                           if (called) return; \n                           called = true;\n                           resolvePromise(promise2, y, resolve, reject); // 验证 y 的类型\n                       },\n                        reason => {\n                            if (called) return;\n                            called = true;\n                            reject(reason);\n                        }\n                       )\n               } else {\n                   resolve(x);\n               }\n            } catch (e) {\n                if (called) return;\n                called = true;\n                reject(e);\n            }\n          } else { // 普通值\n              resolve(x);\n          }\n\n      }\n    \n```\n4. promise 错误处理\n\npromise 内部即使报错，它也不会强制导致代码停止运行\n\n\n```javascript\n// promise内部代码都是在try...catch内部运行的\ntry {\n    new Promise((resolve, reject) => {\n        // throw Error('错误');\n        reject('错误');\n    })\n} catch (e) {\n    console.log('并不会捕获到');\n}\n\n\n// catch() === then(null, () => {}) catch其实就是then的另一种实现方式 \n\nlet rejected  = Promise.reject('报错');\n\nrejected.catch(val => {\n    console.log(val);\n})\n\n```\n\n\n\n5. Promise.race([]) 将可以迭代对象（数组）中最先被改变的promise的值 传给return promies \n\n```javascript\nfunction timerPromise(delay) {\n          return new Promise(function (resolve, reject) {\n              setTimeout(function () {\n                  if (delay === 40) {\n                      reject(delay);\n                  } else {\n                      resolve(delay);\n                  }\n              }, delay);\n          });\n      }\n\n      Promise.race([ // 如果数组中的 promise 的状态改变了当前的promise状态也会随之改变\n          timerPromise(40),\n          timerPromise(20),\n          timerPromise(30)\n      ]).then(values => {\n          console.log(values);\n      });\n      \nMyPromise.race = function (promises) { // 内部实现\n    return new Promise((resolve, reject) => {\n        promises.forEach(p => {  \n            p.then(resolve, reject);  // 如果 p 的状态不是pending 了 resolve这个回调就会调用\n        })                            // resolve 中具有 return promise对象 的this指针     \n                                      // p 通过then 可以把自己的值传递给 return promise\n                                      // 状态改变逻辑不能重复调用\n    });\n}      \n\n\n```\n\n6. Promise.all([]); \n\n> Promise.all可以将多个Promise实例包装成一个新的Promise实例。  \n同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，  \n而失败的时候则返回最先被reject失败状态的值。\n\n- 在处理多个异步处理时非常有用\n\n```javascript\nPromise.all = function (promises) {\n    return new Promise((resolve, reject) => { // 返回一个promise实例\n        const length = promises.length;\n        let result = gen(length, resolve)\n        promises.forEach((p, i) => {\n            // 将所有的 promise 遍利出来\n            p.then(val => {\n                result(i, val)\n            }, reject)\n        }) // 如果有一个promise 被拒绝 就改变return promise 的状态\n    });\n    \n    function gen (length, resolve) {\n        let count = 0; // 记录循环次数\n        let values = [];\n        return function () {\n            values[i] = value;\n            if (++count === length) { // 遍历完成时改变 return promise 的状态\n                resolve(values);\n            }\n        }\n    }\n}\n```\n\n---\n\n\n## Iterator (迭代器、遍历器)\n\n> 为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作\n\n\n#### 迭代器的组成接口\n\n```TypeScript\ninterface IteratorResult { // 迭代器结果\n    done: boolean,\n    value: any\n}\ninterface Iterator { // 迭代器\n    next(): IteratorResult \n}\ninterface Iterable { // 可迭代对象\n    [Symbol.iterator]: Iterator  // 通过 Symbol.iterator(迭代器生成函数) 生成迭代器\n}\n```\n\n什么是迭代器？\n\n> 迭代器是一个对象，它一定会有一个 ==next()== 方法，每次调用 ==next()== 方法，\n就会返回一个迭代器结果。\n\n什么是迭代器结果？\n\n> 迭代器结也是一个对象，这个对象有两个属性：done和value，  \n其中done是一个布尔值，false表示迭代器迭代的序列没有结束；  \ntrue表示迭代器迭代的序列结束了。而value就是迭代器每次迭代真正返回的值。 \n（它们反应了当前元素和当前状态）\n\n什么是可迭代对象？\n\n> 具有 ==\\[Symbol.iterator\\]()== 这个接口的数据结构就叫可迭代对象\n\n> es6中原生具备这个接口的数据结构如下：   \nArray、Map、Set、String、函数内部的Arguments对象、NodeList、TypedArray\n\n> 对象是非线性的数据结构所以没必要部署迭代器接口，因为迭代器是一种线性（有顺序的）处理，  \n而且对象实际上被当作 Map 结构使用，es6原生提供了，\n如果非要可迭代可以自己添加 ==\\[Symbol.iterator\\]()== 这个属性。\n\n#### 用于操作可迭代对象的语法：\n\n- for ... of \n- [...iterable] (扩展运算符)\n- Array.from(iterable)\n\n```javascript\nconst arr = ['a', 'b', 'c', 'd'];\n\n    const sequence = {\n        [Symbol.iterator]() {\n            let i = 0;\n            return {\n                next() {\n                    const value = arr[i];\n                    i++;\n                    const done = i > arr.length;\n                    return {\n                        value,\n                        done\n                    }\n                }\n            }\n        }\n    };\n    \n    for (const val of sequence) {\n        console.log(val) // 'a' 'b' 'c' 'd'\n    }\n    \n    console.log([...sequence]) // [\"a\", \"b\", \"c\", \"d\"]\n    console.log(Array.from(sequence)) // [\"a\", \"b\", \"c\", \"d\"]\n    \n```\n\n#### 迭代器中的状态\n\n> 如果迭代器中没有设置终止状态，可以通过for ... of 来手动终止\n\n```javascript\nconst random = { // 如果不改变迭代器结果的状态\n      [Symbol.iterator]: () => ({\n        next: () => ({ value: Math.random() }) \n      })\n    }\n    \n    [...random] // 就会死循环\n    \n    for (const val of random) { // for ... of可以通过 break 来退出循环\n        if (val > 0.6) {\n            break;\n        }\n        console.log(val);\n    }\n```\n\n\n\n## Generator\n\n> generator函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。\n\n```typescript\ninterface Generator extends Iterator {\n    next(value?: any): IteratorResult; // 迭代器具有的特征\n    [Symbol.iterator](): Iterator; // 可迭代对象具有的特征\n    throw(exception: any);\n}\n\n```\n\n生成器是什么？\n\n> 生成器函数返回的是一个生成器，它内部既有迭代器具有的特征，也有可迭代对象具有的特征，所以说，它既是一个迭代器，又是一个可迭代对象。  \n\n> 因为生成器还提供了一个 yield 关键字，它返回的序列值会自动包装在一个IteratorResult（迭代器结果）对象中,  \n所以生成器又是迭代器的“加强版”。\n\n验证一下\n```javascript\nfunction *gen() {\n  yield 'a'\n  yield 'b'\n  return 'c'\n}\n\nconst g = gen();\n\n// 生成器具有可迭代对象的特征\ntypeof g[Symbol.iterator] === 'function' // g 是个可迭代对象\n\n// 说明它可以被 操作可迭代对象的语法 来操纵\nfor (const val of g) {\n    console.log(val) // a, b\n}\n// for ... of 在 done 为 true 时就停止运行，所以 return 的返回值并不会被遍历出来。\n\n\ntypeof g.next === 'function'  // g是迭代器\n\ng.next() // {value: 'a', done: false} // 迭代器是可以直接调用 next 方法的\n\n```\n### yield \n\n> ==yield== 关键字 它可以使生成器函数 ++执行暂停++，yield关键字后面的表达式的值 返回给生成器的调用者。\n\n> yield关键字 返回一个IteratorResult对象，它有两个属性，value和done。value属性是对yield表达式求值的结果，而done是迭代完成的状态，一直都是false。（迭代完成或者return会改变done的状态）\n\n#### 生成器中的yield 与 return\n> 它们有些作用是相似的，都可以返回函数中的值，都可以暂停函数的执行。但是yield只是将函数暂时的挂起，而return则表示函数运行结束；\n\n```javascript\nfunction* gen (x) {\n    const y = x * (yield);\n    return y;\n}\n\nconst it = gen(3);\n\n//启动生成器 \nit.next(); // {value: undefined, done: false} \n\nit.next(4); // {value: 12, done: true}\n```\n> 生成器的独到之处，就是在于它的 ==yiled== 关键字，它的有俩个神奇之处：\n1. 它是生成器函数暂停和恢复执行的分界点；\n2. 它是向外和向内传值（包括错误/异常）的媒介。\n\n#### 生成器的单向执行且不可逆\n\n```javascript\nfunction *gen() {\n  yield 'a'\n  yield 'b'\n  return 'c'\n}\n\nconst g = gen();\n[...g] // ['a', 'b']\n[...g] // []\n\n```\n\n####  导致生成器暂停的情况还有两种\n1. 到达生成器底部也会停止，生成器执行完成\n2. 生成器内部有throw语句它也会导致生成器完全停止执行\n\n#### 错误处理\n\n> 生成器的错误可以‘由内而外’也可以‘由外而内再由外’，具体表现如下：\n\n```javascript\n// 由内而外\nfunction* testErr () {\n    const x = yiled 'hi';\n    yield x.toLowerCase(); // 内部报错,返回异常\n}\n\nconst it = main();\nit.next().value // 'hi'\n\ntry{\n    it.next(3); // 传入导致数值类型错误，外部接收异常\n} catch(e) { \n    console.error(e) // TypeError\n}\n\n// 由外而内再由外\nfunction* main() {\n  var x = yield 'hi';\n  console.log('never gets here'); \n}\n\nconst it = main();\nit.next().value; // 'hi'\ntry {\n// .throw 会给 yield 传递异常信息 和 .next() 传值相似\n  it.throw('报错'); //导致生成器终止运行\n                    // 生成器接受到异常，又回抛出来\n} catch (err) {\n  console.error(err); // 报错\n}\n\n```\n### 异步迭代生成器\n\n> 生成器的异步在于 ==yield== ,因为它不是++必须++同步等待 .next(val) 来给它传值的，而是可以在异步操作中来调用 .next(val) 把值传给它，所以 yield 是可以等待一个异步操作结果的\n\n> 利用生成器，在生成器内部以同步的方式来写异步代码\n\n```javascript\n// 1 先封一个基于promise的http请求\n\nfuntion get(url) {\n    return new Promise((resolve) => {\n        $.post(url, function (data) {\n            if (!data.isErr) {\n                resolve(data);\n            } else {\n                reject(data);\n            }\n            \n        })\n    })\n}\n\n\n// 2. 在生成器中请求数据\nfunction* foo () {\n    const data =  yield get('url');\n    console.log(data); \n}\n\nconst f = foo();\nconst p = f.next().value; // 获取到get中的promise\n\np.then(val => {\n    f.next(val) // 获取到promise的值，再通过next返给yield，从而代码恢复执行，输出data\n}, err => {\n    f.throw(err)\n})\n\n```\n\n#### generator中 yiled 与 next\n```javascript\nfunction* test() {\n    let a = 1 + 2;\n    let b = yield 2;\n    const c = yield b;\n    yield c;\n    return;\n}\nlet b = test();\nconsole.log(b.next());\nconsole.log(b.next(1));\nconsole.log(b.next(2));\nconsole.log(b.next());\n\n// es5\nvar _marked = /*#__PURE__*/regeneratorRuntime.mark(test);\n\nfunction test() {\n    var a, b, c;\n    return regeneratorRuntime.wrap(function test$(_context) {\n        // 可以发现通过 yield 将代码分割成几块\n        // 每次执行 next 函数就执行一块代码\n        // 并且表明下次需要执行哪块代码\n        while (1) {\n            switch (_context.prev = _context.next) {\n                case 0:\n                    a = 1 + 2;\n                    _context.next = 3;\n                    return 2;\n\n                case 3:\n                    b = _context.sent;\n                    _context.next = 6;\n                    return b;\n\n                case 6:\n                    c = _context.sent;\n                    _context.next = 9;\n                    return c;\n\n                case 9:\n                case \"end\":\n                    return _context.stop();\n            }\n        }\n    }, _marked, this);\n}\nvar b = test();\nconsole.log(b.next());\nconsole.log(b.next(1));\nconsole.log(b.next(2));\nconsole.log(b.next());\n```\n\n## async/await \n> async 函数是 Generator 函数的语法糖。使用 关键字 async 来表示，在函数内部使用 await 来表示异步。\n\n### async/await 可以让异步代码以同步的方式来编写 \n```javascript\nget(url, () => {\n    get(url2, () => {\n    \n    })\n})\n\n\nconst getData = async () => { // 改善了嵌套的问题\n    const g1 = await get(url1);  \n    const g2 = await get(url2);\n}\n\n// async 中的await 等的就是Promise \n// 它可以将promise中resolve或reject（所以也可以在async用try...catch来捕获primise拒绝的信息）的值返回出来\n\n// 它也可以等待原始类型的值（Number，string，boolean，但这时等同于同步操作）\n// 但是这并没有多大意义\n\n```\n### 谨慎使用async/await\n\n> 如果将并发的请求中写在同一个 async 函数中会造成性能损失\n\n```javascript\nget(url1, () => {\n    get(url2, () => {\n    \n    })\n})\nget(url3, () => {\n    get(url4, () => {\n    \n    })\n})\n\nconst getData = async () => { // 因为await会等待promise状态改变才会执行它下面的代码\n    const g1 = await get(url1);\n    const g2 = await get(url2);\n    const g3 = await get(url3);\n    const g4 = await get(url4);\n    \n}\n// 所以这样的写法在运行的过程中，其实是将 g3 并发的请求也嵌套了进去\n这就会加长请求的时间，影响性能\nget(url1, () => {\n    get(url2, () => {\n        get(url3, () => {\n            get(url4, () => {\n            \n            })\n})\n    })\n})\n\n```\n\n### Async 中 return 和 return await ;\n\n> 函数前面加了async 该函数会默认返回一个promise\n\n```javascript\nfunction test () {\n    reutrn Promise.resolve(); // promise 的值默认为 undefined\n}\n\nasync function test () {\n    return 'valeu'; // return返回的值 实际上是被包在了 promise 中\n}\n```\n> Async 中的 await 后边的表达式是一个promise 才有有意义，promise 中值可以通过 await 来返回\n> Async 中 return 和 return await 只在 try...catch 中才有区别\n\n```javascript\nasync function test () {\n    throw new Error('错错错'); // reject(new Error('错错错'));\n}\n// 类似与\nconst test = new Promise(() => {\n    throw new Error('错错错');\n});\n\n```\n\n- Async 中的 return；\n```javascript\n(async function () {\n    try {\n        return test(); // 重点关注\n    }catch(err) {\n        console.log('这个并不会捕获到错误')\n    }\n})().then(() => {\n    console.log('resolved');\n}, (err) => {\n    console.log('rejected'); \n});\n\n// 输出：rejected\n```\n\n- Async 中的 return await；\n```javascript\n(async function () {\n    try {\n        return await test(); // 重点关注\n    }catch(err) {\n        console.log('会捕获到这个错误');\n    }\n})().then((res) => {\n    console.log('resolved');\n}, () => {\n    console.log('rejected');\n});\n\n// 输出：\n// 会捕获到这个错误\n// resolved\n```\n\n### Async 是 Generator的语法糖\n\n> async 内部的语法逻辑 可以通过Generator加一个运行器来实现\n\n#### 运行器\n\n```javascript\nfunction run(generator) {\n    // 返回一个promise\n  return new Promise((resolve, reject) => {\n  \n    const it = generator() // 返回生成器\n    \n    step(() => it.next())\n    \n    function step(nextFn) {\n      const result = runNext(nextFn) // 得到IteratorResult\n      if (result.done) { // done 为 true说明 return语句 运行结束 \n        resolve(result.value) // 将请求返回的值转给当前的promise\n        return\n      }\n      Promise\n        .resolve(result.value) // 获取生成器中的promise\n        .then(                      \n          value => step(() => it.next(value)), // 将promise中的值传给生成器中yield\n          err => step(() => it.throw(err))\n        )\n    }\n    \n    function runNext(nextFn) { // 错误处理\n      try {\n        return nextFn()\n      } catch (err) {\n        reject(err)\n      }\n    }\n    \n  })\n  \n}\n\n// 通过生成器运行程序控制异步代码\n\nfunction example() {\n    return run(function* () {\n    \n        const r1 = yield new Promise(resolve => {\n            setTimeout(resolve, 500, 'r1value');\n        });\n        \n         const r2 = yield new Promise(resolve => {\n            setTimeout(resolve, 200, 'r2value');\n        });\n        \n        return [r1, r2];\n    })\n}\n\nexample.then(val => console.log(val)); // ['r1value', 'r2value']\n\n// async/await 来控制异步代码\n\nasync function example() {\n    // 内置了运行器函数\n    const r1 = yield new Promise(resolve => {\n            setTimeout(resolve, 500, 'r1value');\n        });\n        \n    const r2 = yield new Promise(resolve => {\n            setTimeout(resolve, 200, 'r2value');\n        });\n        \n    return [r1, r2];\n}\n\nexample.then(val => console.log(val)); // ['r1value', 'r2value']\n\n```\n\n>  async/await 其实是基于promise、iterator、generator的‘语法糖’\n\n\n\n\n","source":"_posts/es6里的异步实现.md","raw":"---\ntitle: es6里的异步实现\ndate: 2019-03-14 12:53:36\ntags: [\"javascript\"]\n---\n\n## promise\n\n#### Promise 是什么？\n[阮一峰: Promise 对象](http://es6.ruanyifeng.com/#docs/promise) \n> Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。\n\n\n#### Promise 的特点？\n> 首先我们知道 promise 对象有三个状态，分别被为pending（等待）、fulfilled（完成）、rejected（失败）  \n> 状态只可以从pending -> fulfilled 或者 pending -> rejected\n\n- 状态只能由它内部改变\n- 状态不可逆\n\n<!--more-->\n\n1. 内部最好写异步操作，毕竟它是异步编程的一种解决方案 \n> 可以很方便的解决回调地狱这种问题\n\n```javascript\n$.ajax('url', params, funtion (res) {\n\n  $.ajax('url', res , funtion (res1) {\n  \n    $.ajax('url', res1, funtion (res2) {\n            console.log(res2)\n        })\n        \n    })  \n    \n})\n\nfucntion ajax (url, params) {\n\n    return new Promise(function (resolve) {\n    \n         // 异步操作 才有意义\n        $.ajax(url, params, funtion (res) {\n            resolve(res);\n        })\n        \n    })\n    \n}\n\n    ajax('u1', 'p1').then((res) => {\n         return ajax('u2', res); // 将 ajax 返回的 promise中的值传递给 then返回的promise。 \n    }).then((res1) => {\n        return ajax('u3', res1);\n    }).then((res2) => {\n        console.log(2)\n    })\n    \n    \n```\n\n2. Promise 构造函数的基本实现\n- 再给实例化的promise中传递的回调中无法用return 代替 resolve \n```javascript\n// promise 其实就是一个状态机 通过不同的状态执行不同的操作\n      const pending = 'pending';\n      const resolved = 'resolved';\n      const rejected = 'rejected';\n\n      // MyPromise 模拟 promise构造函数 简易的实现\n      function MyPromise (fn) { // ‘func’ 方便this指向清晰\n          const _this = this; // 缓存当前 promise 实例对象\n          _this.state = pending; // 初始状态\n          _this.value = undefined; // promise 中存的值\n\n          /*\n          * 当promise在pending的时候\n          * 会将我们写在.then(() => {}, () => {})中的回调传给下边的俩个数组\n          * */\n          _this.resovleCallbacks = [];\n          _this.rejectCallbacks = [];\n\n          // 为什么resolve 加setTimeout?\n          // 实践中要确保 onFulfilled 和 onRejected 方法异步执行，且应该在 then \n          // 方法被调用的那一轮事件循环之后的新执行栈中执行。\n\n          // 我在平常的时候 以为在回调中 resolve了 状态就会立即改变 然而 并不是\n          _this.resolve = function (val) { // 当我们在回调中 调用它的时候就会触发 异步代码\n              if (val instanceof MyPromise) { // 检测 resolve(val) 的值是不是 promise对象\n                return val.then(_this.resolve, _this.reject); // 通过递归 将 val(promise) 的值 传给最外层的promise \n              }\n\n              if (_this.state !== resolved) { // 第一次调用 状态是pending 所以为 true\n                  setTimeout(function () { // 这里异步 then 中回调就会传到 callbacks = []\n                      // 一个 promise 状态只可以改变一次\n                    _this.state = resolved;\n                    _this.value = val;\n                    _this.resovleCallbacks.forEach(fn => fn());\n                  })\n              }\n          };\n\n          this.reject = function (err) { // 可以传递promise 但会报错\n            if (_this.state === rejected) {\n                setTimeout(function () {\n                    _this.state = rejected;\n                    _this.value = err;\n                    _this.rejectCallbacks.forEach(fn => fn());\n                })\n            }\n          };\n\n          try {\n            fn(_this.resolve, _this.reject); // 调用传入的回调函数\n          } catch (e) {\n            _this.reject(e); // 捕获 回调内部 报错\n          }\n      }\n      \n      \n```\n\n\n3. then 方法\n> Promise.prototype 上的一个属性，所以每一个promise实例都可以用它  \n> then 方法必须返回一个 promise 对象   \n> then 方法可以被同一个 promise 调用多次\n\n```javascript\nnew Promise.then() 会生成一个新的promise实例\n\n    \n    MyPromise.prototype.then = function (onResolved, onRejected) {\n          const self = this;\n          let newPromise = null;\n          \n          // 如果类型不是函数需要忽略，同时也实现了透传\n          // Promise.resolve(4).then().then((value) => console.log(value))\n          \n         // onFulfilled 和 onRejected 必须被作为函数调用\n          onResolved = typeof onResolved === 'function' ? onResolved : v => v;\n          onRejected = typeof onRejected === 'function' ? onRejected : r => {throw r};\n          \n          if (self.state === resolved) {\n              newPromise = new MyPromise(function (resolve, reject) {\n                  setTimeout(function () { // 保证 onResolved 和 onRejected 异步 // 该回调会在 当前promise实例的状态改变之后调用\n                      try { // 防止报错\n                          const x = onResolved(self.value);\n                          resolvePromise(newPromise, x, resolve, reject); //  判断 x 的类型执行对应操作\n                      } catch (err) {\n                          reject(err);\n                      }\n                  });\n\n              });\n\n              return newPromise;\n          }\n          if (self.state === pending) {\n              newPromise = new MyPromise(function (resolve, reject) {\n                  self.resovleCallbacks.push(() => { // 该回调会在 当前promise实例的状态改变之前push进去\n                      try {\n                          const x = onResolved(self.value);\n                          resolvePromise(newPromise, x, resolve, reject);\n                      } catch (e) {\n                          reject(e);\n                      }\n                  });\n\n                  self.rejectCallbacks.push(() => {\n                      try {\n                          const x = onResolved(self.value);\n                          resolvePromise(newPromise, x, resolve, reject);\n                      } catch (e) {\n                          reject(e);\n                      }\n                  });\n              });\n\n              return newPromise;\n          }\n      };\n      \n      function resolvePromise (promise2, x, resolve, reject) { // 对内部生成的 newPromise 进行resolve 给下一个then 传值\n          if (promise2 === x) {\n                throw Error('防止死循环');\n          }\n\n          if (x instanceof MyPromise) { // 把 x 的值传给当前的 newPromise\n              if (x === pending) {\n                  x.then(function (val) {\n                      resolvePromise(promise2, val, resolve, reject); // 检测val的类型，如果合适就传给promise2\n                  }, reject)\n              } else {\n                  x.then(resolve, reject); // 直接将x的值 传给promise2\n              }\n          }\n\n          let called = false; // 防止thenable内的方法多次调用 例如 resolve 多次调用\n          //\n          if (x !== null && (typeof x === 'object' || typeof x === 'function')) { // 判断当前 x thenable （函数或对象内具有then属性的方法）\n            try {\n               let then = x.then; // 获取 then 的值\n               if (typeof then === 'function') {\n                   then.call(\n                       x, // 绑定当前 x 对象\n                       y => { // 将 then 中resolve的 值传递给 promise2 \n                           if (called) return; \n                           called = true;\n                           resolvePromise(promise2, y, resolve, reject); // 验证 y 的类型\n                       },\n                        reason => {\n                            if (called) return;\n                            called = true;\n                            reject(reason);\n                        }\n                       )\n               } else {\n                   resolve(x);\n               }\n            } catch (e) {\n                if (called) return;\n                called = true;\n                reject(e);\n            }\n          } else { // 普通值\n              resolve(x);\n          }\n\n      }\n    \n```\n4. promise 错误处理\n\npromise 内部即使报错，它也不会强制导致代码停止运行\n\n\n```javascript\n// promise内部代码都是在try...catch内部运行的\ntry {\n    new Promise((resolve, reject) => {\n        // throw Error('错误');\n        reject('错误');\n    })\n} catch (e) {\n    console.log('并不会捕获到');\n}\n\n\n// catch() === then(null, () => {}) catch其实就是then的另一种实现方式 \n\nlet rejected  = Promise.reject('报错');\n\nrejected.catch(val => {\n    console.log(val);\n})\n\n```\n\n\n\n5. Promise.race([]) 将可以迭代对象（数组）中最先被改变的promise的值 传给return promies \n\n```javascript\nfunction timerPromise(delay) {\n          return new Promise(function (resolve, reject) {\n              setTimeout(function () {\n                  if (delay === 40) {\n                      reject(delay);\n                  } else {\n                      resolve(delay);\n                  }\n              }, delay);\n          });\n      }\n\n      Promise.race([ // 如果数组中的 promise 的状态改变了当前的promise状态也会随之改变\n          timerPromise(40),\n          timerPromise(20),\n          timerPromise(30)\n      ]).then(values => {\n          console.log(values);\n      });\n      \nMyPromise.race = function (promises) { // 内部实现\n    return new Promise((resolve, reject) => {\n        promises.forEach(p => {  \n            p.then(resolve, reject);  // 如果 p 的状态不是pending 了 resolve这个回调就会调用\n        })                            // resolve 中具有 return promise对象 的this指针     \n                                      // p 通过then 可以把自己的值传递给 return promise\n                                      // 状态改变逻辑不能重复调用\n    });\n}      \n\n\n```\n\n6. Promise.all([]); \n\n> Promise.all可以将多个Promise实例包装成一个新的Promise实例。  \n同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，  \n而失败的时候则返回最先被reject失败状态的值。\n\n- 在处理多个异步处理时非常有用\n\n```javascript\nPromise.all = function (promises) {\n    return new Promise((resolve, reject) => { // 返回一个promise实例\n        const length = promises.length;\n        let result = gen(length, resolve)\n        promises.forEach((p, i) => {\n            // 将所有的 promise 遍利出来\n            p.then(val => {\n                result(i, val)\n            }, reject)\n        }) // 如果有一个promise 被拒绝 就改变return promise 的状态\n    });\n    \n    function gen (length, resolve) {\n        let count = 0; // 记录循环次数\n        let values = [];\n        return function () {\n            values[i] = value;\n            if (++count === length) { // 遍历完成时改变 return promise 的状态\n                resolve(values);\n            }\n        }\n    }\n}\n```\n\n---\n\n\n## Iterator (迭代器、遍历器)\n\n> 为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作\n\n\n#### 迭代器的组成接口\n\n```TypeScript\ninterface IteratorResult { // 迭代器结果\n    done: boolean,\n    value: any\n}\ninterface Iterator { // 迭代器\n    next(): IteratorResult \n}\ninterface Iterable { // 可迭代对象\n    [Symbol.iterator]: Iterator  // 通过 Symbol.iterator(迭代器生成函数) 生成迭代器\n}\n```\n\n什么是迭代器？\n\n> 迭代器是一个对象，它一定会有一个 ==next()== 方法，每次调用 ==next()== 方法，\n就会返回一个迭代器结果。\n\n什么是迭代器结果？\n\n> 迭代器结也是一个对象，这个对象有两个属性：done和value，  \n其中done是一个布尔值，false表示迭代器迭代的序列没有结束；  \ntrue表示迭代器迭代的序列结束了。而value就是迭代器每次迭代真正返回的值。 \n（它们反应了当前元素和当前状态）\n\n什么是可迭代对象？\n\n> 具有 ==\\[Symbol.iterator\\]()== 这个接口的数据结构就叫可迭代对象\n\n> es6中原生具备这个接口的数据结构如下：   \nArray、Map、Set、String、函数内部的Arguments对象、NodeList、TypedArray\n\n> 对象是非线性的数据结构所以没必要部署迭代器接口，因为迭代器是一种线性（有顺序的）处理，  \n而且对象实际上被当作 Map 结构使用，es6原生提供了，\n如果非要可迭代可以自己添加 ==\\[Symbol.iterator\\]()== 这个属性。\n\n#### 用于操作可迭代对象的语法：\n\n- for ... of \n- [...iterable] (扩展运算符)\n- Array.from(iterable)\n\n```javascript\nconst arr = ['a', 'b', 'c', 'd'];\n\n    const sequence = {\n        [Symbol.iterator]() {\n            let i = 0;\n            return {\n                next() {\n                    const value = arr[i];\n                    i++;\n                    const done = i > arr.length;\n                    return {\n                        value,\n                        done\n                    }\n                }\n            }\n        }\n    };\n    \n    for (const val of sequence) {\n        console.log(val) // 'a' 'b' 'c' 'd'\n    }\n    \n    console.log([...sequence]) // [\"a\", \"b\", \"c\", \"d\"]\n    console.log(Array.from(sequence)) // [\"a\", \"b\", \"c\", \"d\"]\n    \n```\n\n#### 迭代器中的状态\n\n> 如果迭代器中没有设置终止状态，可以通过for ... of 来手动终止\n\n```javascript\nconst random = { // 如果不改变迭代器结果的状态\n      [Symbol.iterator]: () => ({\n        next: () => ({ value: Math.random() }) \n      })\n    }\n    \n    [...random] // 就会死循环\n    \n    for (const val of random) { // for ... of可以通过 break 来退出循环\n        if (val > 0.6) {\n            break;\n        }\n        console.log(val);\n    }\n```\n\n\n\n## Generator\n\n> generator函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。\n\n```typescript\ninterface Generator extends Iterator {\n    next(value?: any): IteratorResult; // 迭代器具有的特征\n    [Symbol.iterator](): Iterator; // 可迭代对象具有的特征\n    throw(exception: any);\n}\n\n```\n\n生成器是什么？\n\n> 生成器函数返回的是一个生成器，它内部既有迭代器具有的特征，也有可迭代对象具有的特征，所以说，它既是一个迭代器，又是一个可迭代对象。  \n\n> 因为生成器还提供了一个 yield 关键字，它返回的序列值会自动包装在一个IteratorResult（迭代器结果）对象中,  \n所以生成器又是迭代器的“加强版”。\n\n验证一下\n```javascript\nfunction *gen() {\n  yield 'a'\n  yield 'b'\n  return 'c'\n}\n\nconst g = gen();\n\n// 生成器具有可迭代对象的特征\ntypeof g[Symbol.iterator] === 'function' // g 是个可迭代对象\n\n// 说明它可以被 操作可迭代对象的语法 来操纵\nfor (const val of g) {\n    console.log(val) // a, b\n}\n// for ... of 在 done 为 true 时就停止运行，所以 return 的返回值并不会被遍历出来。\n\n\ntypeof g.next === 'function'  // g是迭代器\n\ng.next() // {value: 'a', done: false} // 迭代器是可以直接调用 next 方法的\n\n```\n### yield \n\n> ==yield== 关键字 它可以使生成器函数 ++执行暂停++，yield关键字后面的表达式的值 返回给生成器的调用者。\n\n> yield关键字 返回一个IteratorResult对象，它有两个属性，value和done。value属性是对yield表达式求值的结果，而done是迭代完成的状态，一直都是false。（迭代完成或者return会改变done的状态）\n\n#### 生成器中的yield 与 return\n> 它们有些作用是相似的，都可以返回函数中的值，都可以暂停函数的执行。但是yield只是将函数暂时的挂起，而return则表示函数运行结束；\n\n```javascript\nfunction* gen (x) {\n    const y = x * (yield);\n    return y;\n}\n\nconst it = gen(3);\n\n//启动生成器 \nit.next(); // {value: undefined, done: false} \n\nit.next(4); // {value: 12, done: true}\n```\n> 生成器的独到之处，就是在于它的 ==yiled== 关键字，它的有俩个神奇之处：\n1. 它是生成器函数暂停和恢复执行的分界点；\n2. 它是向外和向内传值（包括错误/异常）的媒介。\n\n#### 生成器的单向执行且不可逆\n\n```javascript\nfunction *gen() {\n  yield 'a'\n  yield 'b'\n  return 'c'\n}\n\nconst g = gen();\n[...g] // ['a', 'b']\n[...g] // []\n\n```\n\n####  导致生成器暂停的情况还有两种\n1. 到达生成器底部也会停止，生成器执行完成\n2. 生成器内部有throw语句它也会导致生成器完全停止执行\n\n#### 错误处理\n\n> 生成器的错误可以‘由内而外’也可以‘由外而内再由外’，具体表现如下：\n\n```javascript\n// 由内而外\nfunction* testErr () {\n    const x = yiled 'hi';\n    yield x.toLowerCase(); // 内部报错,返回异常\n}\n\nconst it = main();\nit.next().value // 'hi'\n\ntry{\n    it.next(3); // 传入导致数值类型错误，外部接收异常\n} catch(e) { \n    console.error(e) // TypeError\n}\n\n// 由外而内再由外\nfunction* main() {\n  var x = yield 'hi';\n  console.log('never gets here'); \n}\n\nconst it = main();\nit.next().value; // 'hi'\ntry {\n// .throw 会给 yield 传递异常信息 和 .next() 传值相似\n  it.throw('报错'); //导致生成器终止运行\n                    // 生成器接受到异常，又回抛出来\n} catch (err) {\n  console.error(err); // 报错\n}\n\n```\n### 异步迭代生成器\n\n> 生成器的异步在于 ==yield== ,因为它不是++必须++同步等待 .next(val) 来给它传值的，而是可以在异步操作中来调用 .next(val) 把值传给它，所以 yield 是可以等待一个异步操作结果的\n\n> 利用生成器，在生成器内部以同步的方式来写异步代码\n\n```javascript\n// 1 先封一个基于promise的http请求\n\nfuntion get(url) {\n    return new Promise((resolve) => {\n        $.post(url, function (data) {\n            if (!data.isErr) {\n                resolve(data);\n            } else {\n                reject(data);\n            }\n            \n        })\n    })\n}\n\n\n// 2. 在生成器中请求数据\nfunction* foo () {\n    const data =  yield get('url');\n    console.log(data); \n}\n\nconst f = foo();\nconst p = f.next().value; // 获取到get中的promise\n\np.then(val => {\n    f.next(val) // 获取到promise的值，再通过next返给yield，从而代码恢复执行，输出data\n}, err => {\n    f.throw(err)\n})\n\n```\n\n#### generator中 yiled 与 next\n```javascript\nfunction* test() {\n    let a = 1 + 2;\n    let b = yield 2;\n    const c = yield b;\n    yield c;\n    return;\n}\nlet b = test();\nconsole.log(b.next());\nconsole.log(b.next(1));\nconsole.log(b.next(2));\nconsole.log(b.next());\n\n// es5\nvar _marked = /*#__PURE__*/regeneratorRuntime.mark(test);\n\nfunction test() {\n    var a, b, c;\n    return regeneratorRuntime.wrap(function test$(_context) {\n        // 可以发现通过 yield 将代码分割成几块\n        // 每次执行 next 函数就执行一块代码\n        // 并且表明下次需要执行哪块代码\n        while (1) {\n            switch (_context.prev = _context.next) {\n                case 0:\n                    a = 1 + 2;\n                    _context.next = 3;\n                    return 2;\n\n                case 3:\n                    b = _context.sent;\n                    _context.next = 6;\n                    return b;\n\n                case 6:\n                    c = _context.sent;\n                    _context.next = 9;\n                    return c;\n\n                case 9:\n                case \"end\":\n                    return _context.stop();\n            }\n        }\n    }, _marked, this);\n}\nvar b = test();\nconsole.log(b.next());\nconsole.log(b.next(1));\nconsole.log(b.next(2));\nconsole.log(b.next());\n```\n\n## async/await \n> async 函数是 Generator 函数的语法糖。使用 关键字 async 来表示，在函数内部使用 await 来表示异步。\n\n### async/await 可以让异步代码以同步的方式来编写 \n```javascript\nget(url, () => {\n    get(url2, () => {\n    \n    })\n})\n\n\nconst getData = async () => { // 改善了嵌套的问题\n    const g1 = await get(url1);  \n    const g2 = await get(url2);\n}\n\n// async 中的await 等的就是Promise \n// 它可以将promise中resolve或reject（所以也可以在async用try...catch来捕获primise拒绝的信息）的值返回出来\n\n// 它也可以等待原始类型的值（Number，string，boolean，但这时等同于同步操作）\n// 但是这并没有多大意义\n\n```\n### 谨慎使用async/await\n\n> 如果将并发的请求中写在同一个 async 函数中会造成性能损失\n\n```javascript\nget(url1, () => {\n    get(url2, () => {\n    \n    })\n})\nget(url3, () => {\n    get(url4, () => {\n    \n    })\n})\n\nconst getData = async () => { // 因为await会等待promise状态改变才会执行它下面的代码\n    const g1 = await get(url1);\n    const g2 = await get(url2);\n    const g3 = await get(url3);\n    const g4 = await get(url4);\n    \n}\n// 所以这样的写法在运行的过程中，其实是将 g3 并发的请求也嵌套了进去\n这就会加长请求的时间，影响性能\nget(url1, () => {\n    get(url2, () => {\n        get(url3, () => {\n            get(url4, () => {\n            \n            })\n})\n    })\n})\n\n```\n\n### Async 中 return 和 return await ;\n\n> 函数前面加了async 该函数会默认返回一个promise\n\n```javascript\nfunction test () {\n    reutrn Promise.resolve(); // promise 的值默认为 undefined\n}\n\nasync function test () {\n    return 'valeu'; // return返回的值 实际上是被包在了 promise 中\n}\n```\n> Async 中的 await 后边的表达式是一个promise 才有有意义，promise 中值可以通过 await 来返回\n> Async 中 return 和 return await 只在 try...catch 中才有区别\n\n```javascript\nasync function test () {\n    throw new Error('错错错'); // reject(new Error('错错错'));\n}\n// 类似与\nconst test = new Promise(() => {\n    throw new Error('错错错');\n});\n\n```\n\n- Async 中的 return；\n```javascript\n(async function () {\n    try {\n        return test(); // 重点关注\n    }catch(err) {\n        console.log('这个并不会捕获到错误')\n    }\n})().then(() => {\n    console.log('resolved');\n}, (err) => {\n    console.log('rejected'); \n});\n\n// 输出：rejected\n```\n\n- Async 中的 return await；\n```javascript\n(async function () {\n    try {\n        return await test(); // 重点关注\n    }catch(err) {\n        console.log('会捕获到这个错误');\n    }\n})().then((res) => {\n    console.log('resolved');\n}, () => {\n    console.log('rejected');\n});\n\n// 输出：\n// 会捕获到这个错误\n// resolved\n```\n\n### Async 是 Generator的语法糖\n\n> async 内部的语法逻辑 可以通过Generator加一个运行器来实现\n\n#### 运行器\n\n```javascript\nfunction run(generator) {\n    // 返回一个promise\n  return new Promise((resolve, reject) => {\n  \n    const it = generator() // 返回生成器\n    \n    step(() => it.next())\n    \n    function step(nextFn) {\n      const result = runNext(nextFn) // 得到IteratorResult\n      if (result.done) { // done 为 true说明 return语句 运行结束 \n        resolve(result.value) // 将请求返回的值转给当前的promise\n        return\n      }\n      Promise\n        .resolve(result.value) // 获取生成器中的promise\n        .then(                      \n          value => step(() => it.next(value)), // 将promise中的值传给生成器中yield\n          err => step(() => it.throw(err))\n        )\n    }\n    \n    function runNext(nextFn) { // 错误处理\n      try {\n        return nextFn()\n      } catch (err) {\n        reject(err)\n      }\n    }\n    \n  })\n  \n}\n\n// 通过生成器运行程序控制异步代码\n\nfunction example() {\n    return run(function* () {\n    \n        const r1 = yield new Promise(resolve => {\n            setTimeout(resolve, 500, 'r1value');\n        });\n        \n         const r2 = yield new Promise(resolve => {\n            setTimeout(resolve, 200, 'r2value');\n        });\n        \n        return [r1, r2];\n    })\n}\n\nexample.then(val => console.log(val)); // ['r1value', 'r2value']\n\n// async/await 来控制异步代码\n\nasync function example() {\n    // 内置了运行器函数\n    const r1 = yield new Promise(resolve => {\n            setTimeout(resolve, 500, 'r1value');\n        });\n        \n    const r2 = yield new Promise(resolve => {\n            setTimeout(resolve, 200, 'r2value');\n        });\n        \n    return [r1, r2];\n}\n\nexample.then(val => console.log(val)); // ['r1value', 'r2value']\n\n```\n\n>  async/await 其实是基于promise、iterator、generator的‘语法糖’\n\n\n\n\n","slug":"es6里的异步实现","published":1,"updated":"2021-09-29T10:29:58.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv7i9bqw000o6o9koij9zilv","content":"<h2 id=\"promise\"><a href=\"#promise\" class=\"headerlink\" title=\"promise\"></a>promise</h2><h4 id=\"Promise-是什么？\"><a href=\"#Promise-是什么？\" class=\"headerlink\" title=\"Promise 是什么？\"></a>Promise 是什么？</h4><p><a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"external\">阮一峰: Promise 对象</a> </p>\n<blockquote>\n<p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。</p>\n</blockquote>\n<h4 id=\"Promise-的特点？\"><a href=\"#Promise-的特点？\" class=\"headerlink\" title=\"Promise 的特点？\"></a>Promise 的特点？</h4><blockquote>\n<p>首先我们知道 promise 对象有三个状态，分别被为pending（等待）、fulfilled（完成）、rejected（失败）<br>状态只可以从pending -&gt; fulfilled 或者 pending -&gt; rejected</p>\n</blockquote>\n<ul>\n<li>状态只能由它内部改变</li>\n<li>状态不可逆</li>\n</ul>\n<a id=\"more\"></a>\n<ol>\n<li>内部最好写异步操作，毕竟它是异步编程的一种解决方案 <blockquote>\n<p>可以很方便的解决回调地狱这种问题</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(<span class=\"string\">'url'</span>, params, funtion (res) &#123;</div><div class=\"line\"></div><div class=\"line\">  $.ajax(<span class=\"string\">'url'</span>, res , funtion (res1) &#123;</div><div class=\"line\">  </div><div class=\"line\">    $.ajax(<span class=\"string\">'url'</span>, res1, funtion (res2) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(res2)</div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">    &#125;)  </div><div class=\"line\">    </div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">fucntion ajax (url, params) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">         <span class=\"comment\">// 异步操作 才有意义</span></div><div class=\"line\">        $.ajax(url, params, funtion (res) &#123;</div><div class=\"line\">            resolve(res);</div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">    &#125;)</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">    ajax(<span class=\"string\">'u1'</span>, <span class=\"string\">'p1'</span>).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> ajax(<span class=\"string\">'u2'</span>, res); <span class=\"comment\">// 将 ajax 返回的 promise中的值传递给 then返回的promise。 </span></div><div class=\"line\">    &#125;).then(<span class=\"function\">(<span class=\"params\">res1</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ajax(<span class=\"string\">'u3'</span>, res1);</div><div class=\"line\">    &#125;).then(<span class=\"function\">(<span class=\"params\">res2</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n<ol>\n<li>Promise 构造函数的基本实现</li>\n</ol>\n<ul>\n<li>再给实例化的promise中传递的回调中无法用return 代替 resolve <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// promise 其实就是一个状态机 通过不同的状态执行不同的操作</span></div><div class=\"line\">      <span class=\"keyword\">const</span> pending = <span class=\"string\">'pending'</span>;</div><div class=\"line\">      <span class=\"keyword\">const</span> resolved = <span class=\"string\">'resolved'</span>;</div><div class=\"line\">      <span class=\"keyword\">const</span> rejected = <span class=\"string\">'rejected'</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// MyPromise 模拟 promise构造函数 简易的实现</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyPromise</span> (<span class=\"params\">fn</span>) </span>&#123; <span class=\"comment\">// ‘func’ 方便this指向清晰</span></div><div class=\"line\">          <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span>; <span class=\"comment\">// 缓存当前 promise 实例对象</span></div><div class=\"line\">          _this.state = pending; <span class=\"comment\">// 初始状态</span></div><div class=\"line\">          _this.value = <span class=\"literal\">undefined</span>; <span class=\"comment\">// promise 中存的值</span></div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">          * 当promise在pending的时候</span></div><div class=\"line\"><span class=\"comment\">          * 会将我们写在.then(() =&gt; &#123;&#125;, () =&gt; &#123;&#125;)中的回调传给下边的俩个数组</span></div><div class=\"line\"><span class=\"comment\">          * */</span></div><div class=\"line\">          _this.resovleCallbacks = [];</div><div class=\"line\">          _this.rejectCallbacks = [];</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// 为什么resolve 加setTimeout?</span></div><div class=\"line\">          <span class=\"comment\">// 实践中要确保 onFulfilled 和 onRejected 方法异步执行，且应该在 then </span></div><div class=\"line\">          <span class=\"comment\">// 方法被调用的那一轮事件循环之后的新执行栈中执行。</span></div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// 我在平常的时候 以为在回调中 resolve了 状态就会立即改变 然而 并不是</span></div><div class=\"line\">          _this.resolve = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123; <span class=\"comment\">// 当我们在回调中 调用它的时候就会触发 异步代码</span></div><div class=\"line\">              <span class=\"keyword\">if</span> (val <span class=\"keyword\">instanceof</span> MyPromise) &#123; <span class=\"comment\">// 检测 resolve(val) 的值是不是 promise对象</span></div><div class=\"line\">                <span class=\"keyword\">return</span> val.then(_this.resolve, _this.reject); <span class=\"comment\">// 通过递归 将 val(promise) 的值 传给最外层的promise </span></div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (_this.state !== resolved) &#123; <span class=\"comment\">// 第一次调用 状态是pending 所以为 true</span></div><div class=\"line\">                  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 这里异步 then 中回调就会传到 callbacks = []</span></div><div class=\"line\">                      <span class=\"comment\">// 一个 promise 状态只可以改变一次</span></div><div class=\"line\">                    _this.state = resolved;</div><div class=\"line\">                    _this.value = val;</div><div class=\"line\">                    _this.resovleCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn());</div><div class=\"line\">                  &#125;)</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">this</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123; <span class=\"comment\">// 可以传递promise 但会报错</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (_this.state === rejected) &#123;</div><div class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                    _this.state = rejected;</div><div class=\"line\">                    _this.value = err;</div><div class=\"line\">                    _this.rejectCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn());</div><div class=\"line\">                &#125;)</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            fn(_this.resolve, _this.reject); <span class=\"comment\">// 调用传入的回调函数</span></div><div class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">            _this.reject(e); <span class=\"comment\">// 捕获 回调内部 报错</span></div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li>then 方法<blockquote>\n<p>Promise.prototype 上的一个属性，所以每一个promise实例都可以用它<br>then 方法必须返回一个 promise 对象<br>then 方法可以被同一个 promise 调用多次</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>.then() 会生成一个新的promise实例</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">    MyPromise.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">const</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">          <span class=\"keyword\">let</span> newPromise = <span class=\"literal\">null</span>;</div><div class=\"line\">          </div><div class=\"line\">          <span class=\"comment\">// 如果类型不是函数需要忽略，同时也实现了透传</span></div><div class=\"line\">          <span class=\"comment\">// Promise.resolve(4).then().then((value) =&gt; console.log(value))</span></div><div class=\"line\">          </div><div class=\"line\">         <span class=\"comment\">// onFulfilled 和 onRejected 必须被作为函数调用</span></div><div class=\"line\">          onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">'function'</span> ? onResolved : <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v;</div><div class=\"line\">          onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> ? onRejected : <span class=\"function\"><span class=\"params\">r</span> =&gt;</span> &#123;<span class=\"keyword\">throw</span> r&#125;;</div><div class=\"line\">          </div><div class=\"line\">          <span class=\"keyword\">if</span> (self.state === resolved) &#123;</div><div class=\"line\">              newPromise = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">                  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 保证 onResolved 和 onRejected 异步 // 该回调会在 当前promise实例的状态改变之后调用</span></div><div class=\"line\">                      <span class=\"keyword\">try</span> &#123; <span class=\"comment\">// 防止报错</span></div><div class=\"line\">                          <span class=\"keyword\">const</span> x = onResolved(self.value);</div><div class=\"line\">                          resolvePromise(newPromise, x, resolve, reject); <span class=\"comment\">//  判断 x 的类型执行对应操作</span></div><div class=\"line\">                      &#125; <span class=\"keyword\">catch</span> (err) &#123;</div><div class=\"line\">                          reject(err);</div><div class=\"line\">                      &#125;</div><div class=\"line\">                  &#125;);</div><div class=\"line\"></div><div class=\"line\">              &#125;);</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">return</span> newPromise;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">if</span> (self.state === pending) &#123;</div><div class=\"line\">              newPromise = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">                  self.resovleCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"comment\">// 该回调会在 当前promise实例的状态改变之前push进去</span></div><div class=\"line\">                      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                          <span class=\"keyword\">const</span> x = onResolved(self.value);</div><div class=\"line\">                          resolvePromise(newPromise, x, resolve, reject);</div><div class=\"line\">                      &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">                          reject(e);</div><div class=\"line\">                      &#125;</div><div class=\"line\">                  &#125;);</div><div class=\"line\"></div><div class=\"line\">                  self.rejectCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                          <span class=\"keyword\">const</span> x = onResolved(self.value);</div><div class=\"line\">                          resolvePromise(newPromise, x, resolve, reject);</div><div class=\"line\">                      &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">                          reject(e);</div><div class=\"line\">                      &#125;</div><div class=\"line\">                  &#125;);</div><div class=\"line\">              &#125;);</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">return</span> newPromise;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;;</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span> (<span class=\"params\">promise2, x, resolve, reject</span>) </span>&#123; <span class=\"comment\">// 对内部生成的 newPromise 进行resolve 给下一个then 传值</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (promise2 === x) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'防止死循环'</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> MyPromise) &#123; <span class=\"comment\">// 把 x 的值传给当前的 newPromise</span></div><div class=\"line\">              <span class=\"keyword\">if</span> (x === pending) &#123;</div><div class=\"line\">                  x.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">                      resolvePromise(promise2, val, resolve, reject); <span class=\"comment\">// 检测val的类型，如果合适就传给promise2</span></div><div class=\"line\">                  &#125;, reject)</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  x.then(resolve, reject); <span class=\"comment\">// 直接将x的值 传给promise2</span></div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">let</span> called = <span class=\"literal\">false</span>; <span class=\"comment\">// 防止thenable内的方法多次调用 例如 resolve 多次调用</span></div><div class=\"line\">          <span class=\"comment\">//</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (x !== <span class=\"literal\">null</span> &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>)) &#123; <span class=\"comment\">// 判断当前 x thenable （函数或对象内具有then属性的方法）</span></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">               <span class=\"keyword\">let</span> then = x.then; <span class=\"comment\">// 获取 then 的值</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">                   then.call(</div><div class=\"line\">                       x, <span class=\"comment\">// 绑定当前 x 对象</span></div><div class=\"line\">                       y =&gt; &#123; <span class=\"comment\">// 将 then 中resolve的 值传递给 promise2 </span></div><div class=\"line\">                           <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>; </div><div class=\"line\">                           called = <span class=\"literal\">true</span>;</div><div class=\"line\">                           resolvePromise(promise2, y, resolve, reject); <span class=\"comment\">// 验证 y 的类型</span></div><div class=\"line\">                       &#125;,</div><div class=\"line\">                        reason =&gt; &#123;</div><div class=\"line\">                            <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</div><div class=\"line\">                            called = <span class=\"literal\">true</span>;</div><div class=\"line\">                            reject(reason);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                       )</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   resolve(x);</div><div class=\"line\">               &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</div><div class=\"line\">                called = <span class=\"literal\">true</span>;</div><div class=\"line\">                reject(e);</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 普通值</span></div><div class=\"line\">              resolve(x);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>promise 错误处理</li>\n</ol>\n<p>promise 内部即使报错，它也不会强制导致代码停止运行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// promise内部代码都是在try...catch内部运行的</span></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// throw Error('错误');</span></div><div class=\"line\">        reject(<span class=\"string\">'错误'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'并不会捕获到'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// catch() === then(null, () =&gt; &#123;&#125;) catch其实就是then的另一种实现方式 </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> rejected  = <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'报错'</span>);</div><div class=\"line\"></div><div class=\"line\">rejected.catch(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(val);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ol>\n<li>Promise.race([]) 将可以迭代对象（数组）中最先被改变的promise的值 传给return promies </li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timerPromise</span>(<span class=\"params\">delay</span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">              setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                  <span class=\"keyword\">if</span> (delay === <span class=\"number\">40</span>) &#123;</div><div class=\"line\">                      reject(delay);</div><div class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                      resolve(delay);</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;, delay);</div><div class=\"line\">          &#125;);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">Promise</span>.race([ <span class=\"comment\">// 如果数组中的 promise 的状态改变了当前的promise状态也会随之改变</span></div><div class=\"line\">          timerPromise(<span class=\"number\">40</span>),</div><div class=\"line\">          timerPromise(<span class=\"number\">20</span>),</div><div class=\"line\">          timerPromise(<span class=\"number\">30</span>)</div><div class=\"line\">      ]).then(<span class=\"function\"><span class=\"params\">values</span> =&gt;</span> &#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(values);</div><div class=\"line\">      &#125;);</div><div class=\"line\">      </div><div class=\"line\">MyPromise.race = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">promises</span>) </span>&#123; <span class=\"comment\">// 内部实现</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">        promises.forEach(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> &#123;  </div><div class=\"line\">            p.then(resolve, reject);  <span class=\"comment\">// 如果 p 的状态不是pending 了 resolve这个回调就会调用</span></div><div class=\"line\">        &#125;)                            <span class=\"comment\">// resolve 中具有 return promise对象 的this指针     </span></div><div class=\"line\">                                      <span class=\"comment\">// p 通过then 可以把自己的值传递给 return promise</span></div><div class=\"line\">                                      <span class=\"comment\">// 状态改变逻辑不能重复调用</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>Promise.all([]); </li>\n</ol>\n<blockquote>\n<p>Promise.all可以将多个Promise实例包装成一个新的Promise实例。<br>同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，<br>而失败的时候则返回最先被reject失败状态的值。</p>\n</blockquote>\n<ul>\n<li>在处理多个异步处理时非常有用</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">promises</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; <span class=\"comment\">// 返回一个promise实例</span></div><div class=\"line\">        <span class=\"keyword\">const</span> length = promises.length;</div><div class=\"line\">        <span class=\"keyword\">let</span> result = gen(length, resolve)</div><div class=\"line\">        promises.forEach(<span class=\"function\">(<span class=\"params\">p, i</span>) =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 将所有的 promise 遍利出来</span></div><div class=\"line\">            p.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</div><div class=\"line\">                result(i, val)</div><div class=\"line\">            &#125;, reject)</div><div class=\"line\">        &#125;) <span class=\"comment\">// 如果有一个promise 被拒绝 就改变return promise 的状态</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gen</span> (<span class=\"params\">length, resolve</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>; <span class=\"comment\">// 记录循环次数</span></div><div class=\"line\">        <span class=\"keyword\">let</span> values = [];</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            values[i] = value;</div><div class=\"line\">            <span class=\"keyword\">if</span> (++count === length) &#123; <span class=\"comment\">// 遍历完成时改变 return promise 的状态</span></div><div class=\"line\">                resolve(values);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Iterator-迭代器、遍历器\"><a href=\"#Iterator-迭代器、遍历器\" class=\"headerlink\" title=\"Iterator (迭代器、遍历器)\"></a>Iterator (迭代器、遍历器)</h2><blockquote>\n<p>为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作</p>\n</blockquote>\n<h4 id=\"迭代器的组成接口\"><a href=\"#迭代器的组成接口\" class=\"headerlink\" title=\"迭代器的组成接口\"></a>迭代器的组成接口</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> IteratorResult &#123; <span class=\"comment\">// 迭代器结果</span></div><div class=\"line\">    done: <span class=\"built_in\">boolean</span>,</div><div class=\"line\">    value: <span class=\"built_in\">any</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">interface</span> Iterator &#123; <span class=\"comment\">// 迭代器</span></div><div class=\"line\">    next(): IteratorResult </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">interface</span> Iterable &#123; <span class=\"comment\">// 可迭代对象</span></div><div class=\"line\">    [Symbol.iterator]: Iterator  <span class=\"comment\">// 通过 Symbol.iterator(迭代器生成函数) 生成迭代器</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>什么是迭代器？</p>\n<blockquote>\n<p>迭代器是一个对象，它一定会有一个 ==next()== 方法，每次调用 ==next()== 方法，<br>就会返回一个迭代器结果。</p>\n</blockquote>\n<p>什么是迭代器结果？</p>\n<blockquote>\n<p>迭代器结也是一个对象，这个对象有两个属性：done和value，<br>其中done是一个布尔值，false表示迭代器迭代的序列没有结束；<br>true表示迭代器迭代的序列结束了。而value就是迭代器每次迭代真正返回的值。<br>（它们反应了当前元素和当前状态）</p>\n</blockquote>\n<p>什么是可迭代对象？</p>\n<blockquote>\n<p>具有 ==[Symbol.iterator]()== 这个接口的数据结构就叫可迭代对象</p>\n<p>es6中原生具备这个接口的数据结构如下：<br>Array、Map、Set、String、函数内部的Arguments对象、NodeList、TypedArray</p>\n<p>对象是非线性的数据结构所以没必要部署迭代器接口，因为迭代器是一种线性（有顺序的）处理，<br>而且对象实际上被当作 Map 结构使用，es6原生提供了，<br>如果非要可迭代可以自己添加 ==[Symbol.iterator]()== 这个属性。</p>\n</blockquote>\n<h4 id=\"用于操作可迭代对象的语法：\"><a href=\"#用于操作可迭代对象的语法：\" class=\"headerlink\" title=\"用于操作可迭代对象的语法：\"></a>用于操作可迭代对象的语法：</h4><ul>\n<li>for … of </li>\n<li>[…iterable] (扩展运算符)</li>\n<li>Array.from(iterable)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> sequence = &#123;</div><div class=\"line\">        [<span class=\"built_in\">Symbol</span>.iterator]() &#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">                next() &#123;</div><div class=\"line\">                    <span class=\"keyword\">const</span> value = arr[i];</div><div class=\"line\">                    i++;</div><div class=\"line\">                    <span class=\"keyword\">const</span> done = i &gt; arr.length;</div><div class=\"line\">                    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">                        value,</div><div class=\"line\">                        done</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> val <span class=\"keyword\">of</span> sequence) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(val) <span class=\"comment\">// 'a' 'b' 'c' 'd'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">console</span>.log([...sequence]) <span class=\"comment\">// [\"a\", \"b\", \"c\", \"d\"]</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(sequence)) <span class=\"comment\">// [\"a\", \"b\", \"c\", \"d\"]</span></div></pre></td></tr></table></figure>\n<h4 id=\"迭代器中的状态\"><a href=\"#迭代器中的状态\" class=\"headerlink\" title=\"迭代器中的状态\"></a>迭代器中的状态</h4><blockquote>\n<p>如果迭代器中没有设置终止状态，可以通过for … of 来手动终止</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> random = &#123; <span class=\"comment\">// 如果不改变迭代器结果的状态</span></div><div class=\"line\">      [<span class=\"built_in\">Symbol</span>.iterator]: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</div><div class=\"line\">        next: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123; <span class=\"attr\">value</span>: <span class=\"built_in\">Math</span>.random() &#125;) </div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    [...random] <span class=\"comment\">// 就会死循环</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> val <span class=\"keyword\">of</span> random) &#123; <span class=\"comment\">// for ... of可以通过 break 来退出循环</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (val &gt; <span class=\"number\">0.6</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(val);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h2><blockquote>\n<p>generator函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> Generator <span class=\"keyword\">extends</span> Iterator &#123;</div><div class=\"line\">    next(value?: <span class=\"built_in\">any</span>): IteratorResult; <span class=\"comment\">// 迭代器具有的特征</span></div><div class=\"line\">    [Symbol.iterator](): Iterator; <span class=\"comment\">// 可迭代对象具有的特征</span></div><div class=\"line\">    <span class=\"keyword\">throw</span>(exception: <span class=\"built_in\">any</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>生成器是什么？</p>\n<blockquote>\n<p>生成器函数返回的是一个生成器，它内部既有迭代器具有的特征，也有可迭代对象具有的特征，所以说，它既是一个迭代器，又是一个可迭代对象。  </p>\n<p>因为生成器还提供了一个 yield 关键字，它返回的序列值会自动包装在一个IteratorResult（迭代器结果）对象中,<br>所以生成器又是迭代器的“加强版”。</p>\n</blockquote>\n<p>验证一下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span></div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'c'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> g = gen();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 生成器具有可迭代对象的特征</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> g[<span class=\"built_in\">Symbol</span>.iterator] === <span class=\"string\">'function'</span> <span class=\"comment\">// g 是个可迭代对象</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 说明它可以被 操作可迭代对象的语法 来操纵</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> val <span class=\"keyword\">of</span> g) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(val) <span class=\"comment\">// a, b</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// for ... of 在 done 为 true 时就停止运行，所以 return 的返回值并不会被遍历出来。</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typeof</span> g.next === <span class=\"string\">'function'</span>  <span class=\"comment\">// g是迭代器</span></div><div class=\"line\"></div><div class=\"line\">g.next() <span class=\"comment\">// &#123;value: 'a', done: false&#125; // 迭代器是可以直接调用 next 方法的</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield\"></a>yield</h3><blockquote>\n<p>==yield== 关键字 它可以使生成器函数 ++执行暂停++，yield关键字后面的表达式的值 返回给生成器的调用者。</p>\n<p>yield关键字 返回一个IteratorResult对象，它有两个属性，value和done。value属性是对yield表达式求值的结果，而done是迭代完成的状态，一直都是false。（迭代完成或者return会改变done的状态）</p>\n</blockquote>\n<h4 id=\"生成器中的yield-与-return\"><a href=\"#生成器中的yield-与-return\" class=\"headerlink\" title=\"生成器中的yield 与 return\"></a>生成器中的yield 与 return</h4><blockquote>\n<p>它们有些作用是相似的，都可以返回函数中的值，都可以暂停函数的执行。但是yield只是将函数暂时的挂起，而return则表示函数运行结束；</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> y = x * (<span class=\"keyword\">yield</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> it = gen(<span class=\"number\">3</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//启动生成器 </span></div><div class=\"line\">it.next(); <span class=\"comment\">// &#123;value: undefined, done: false&#125; </span></div><div class=\"line\"></div><div class=\"line\">it.next(<span class=\"number\">4</span>); <span class=\"comment\">// &#123;value: 12, done: true&#125;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>生成器的独到之处，就是在于它的 ==yiled== 关键字，它的有俩个神奇之处：</p>\n<ol>\n<li>它是生成器函数暂停和恢复执行的分界点；</li>\n<li>它是向外和向内传值（包括错误/异常）的媒介。</li>\n</ol>\n</blockquote>\n<h4 id=\"生成器的单向执行且不可逆\"><a href=\"#生成器的单向执行且不可逆\" class=\"headerlink\" title=\"生成器的单向执行且不可逆\"></a>生成器的单向执行且不可逆</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span></div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'c'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> g = gen();</div><div class=\"line\">[...g] <span class=\"comment\">// ['a', 'b']</span></div><div class=\"line\">[...g] <span class=\"comment\">// []</span></div></pre></td></tr></table></figure>\n<h4 id=\"导致生成器暂停的情况还有两种\"><a href=\"#导致生成器暂停的情况还有两种\" class=\"headerlink\" title=\"导致生成器暂停的情况还有两种\"></a>导致生成器暂停的情况还有两种</h4><ol>\n<li>到达生成器底部也会停止，生成器执行完成</li>\n<li>生成器内部有throw语句它也会导致生成器完全停止执行</li>\n</ol>\n<h4 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h4><blockquote>\n<p>生成器的错误可以‘由内而外’也可以‘由外而内再由外’，具体表现如下：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 由内而外</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">testErr</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> x = yiled <span class=\"string\">'hi'</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> x.toLowerCase(); <span class=\"comment\">// 内部报错,返回异常</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> it = main();</div><div class=\"line\">it.next().value <span class=\"comment\">// 'hi'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span>&#123;</div><div class=\"line\">    it.next(<span class=\"number\">3</span>); <span class=\"comment\">// 传入导致数值类型错误，外部接收异常</span></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123; </div><div class=\"line\">    <span class=\"built_in\">console</span>.error(e) <span class=\"comment\">// TypeError</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 由外而内再由外</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"keyword\">yield</span> <span class=\"string\">'hi'</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'never gets here'</span>); </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> it = main();</div><div class=\"line\">it.next().value; <span class=\"comment\">// 'hi'</span></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\"><span class=\"comment\">// .throw 会给 yield 传递异常信息 和 .next() 传值相似</span></div><div class=\"line\">  it.throw(<span class=\"string\">'报错'</span>); <span class=\"comment\">//导致生成器终止运行</span></div><div class=\"line\">                    <span class=\"comment\">// 生成器接受到异常，又回抛出来</span></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.error(err); <span class=\"comment\">// 报错</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"异步迭代生成器\"><a href=\"#异步迭代生成器\" class=\"headerlink\" title=\"异步迭代生成器\"></a>异步迭代生成器</h3><blockquote>\n<p>生成器的异步在于 ==yield== ,因为它不是++必须++同步等待 .next(val) 来给它传值的，而是可以在异步操作中来调用 .next(val) 把值传给它，所以 yield 是可以等待一个异步操作结果的</p>\n<p>利用生成器，在生成器内部以同步的方式来写异步代码</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1 先封一个基于promise的http请求</span></div><div class=\"line\"></div><div class=\"line\">funtion get(url) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</div><div class=\"line\">        $.post(url, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!data.isErr) &#123;</div><div class=\"line\">                resolve(data);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                reject(data);</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 2. 在生成器中请求数据</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> data =  <span class=\"keyword\">yield</span> get(<span class=\"string\">'url'</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data); </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> f = foo();</div><div class=\"line\"><span class=\"keyword\">const</span> p = f.next().value; <span class=\"comment\">// 获取到get中的promise</span></div><div class=\"line\"></div><div class=\"line\">p.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</div><div class=\"line\">    f.next(val) <span class=\"comment\">// 获取到promise的值，再通过next返给yield，从而代码恢复执行，输出data</span></div><div class=\"line\">&#125;, err =&gt; &#123;</div><div class=\"line\">    f.throw(err)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"generator中-yiled-与-next\"><a href=\"#generator中-yiled-与-next\" class=\"headerlink\" title=\"generator中 yiled 与 next\"></a>generator中 yiled 与 next</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span> + <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">const</span> c = <span class=\"keyword\">yield</span> b;</div><div class=\"line\">    <span class=\"keyword\">yield</span> c;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> b = test();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.next());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.next(<span class=\"number\">1</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.next(<span class=\"number\">2</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.next());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// es5</span></div><div class=\"line\"><span class=\"keyword\">var</span> _marked = <span class=\"comment\">/*#__PURE__*/</span>regeneratorRuntime.mark(test);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a, b, c;</div><div class=\"line\">    <span class=\"keyword\">return</span> regeneratorRuntime.wrap(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test$</span>(<span class=\"params\">_context</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 可以发现通过 yield 将代码分割成几块</span></div><div class=\"line\">        <span class=\"comment\">// 每次执行 next 函数就执行一块代码</span></div><div class=\"line\">        <span class=\"comment\">// 并且表明下次需要执行哪块代码</span></div><div class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (_context.prev = _context.next) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">                    a = <span class=\"number\">1</span> + <span class=\"number\">2</span>;</div><div class=\"line\">                    _context.next = <span class=\"number\">3</span>;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">                    b = _context.sent;</div><div class=\"line\">                    _context.next = <span class=\"number\">6</span>;</div><div class=\"line\">                    <span class=\"keyword\">return</span> b;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</div><div class=\"line\">                    c = _context.sent;</div><div class=\"line\">                    _context.next = <span class=\"number\">9</span>;</div><div class=\"line\">                    <span class=\"keyword\">return</span> c;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">9</span>:</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"end\"</span>:</div><div class=\"line\">                    <span class=\"keyword\">return</span> _context.stop();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, _marked, <span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b = test();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.next());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.next(<span class=\"number\">1</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.next(<span class=\"number\">2</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.next());</div></pre></td></tr></table></figure>\n<h2 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async/await\"></a>async/await</h2><blockquote>\n<p>async 函数是 Generator 函数的语法糖。使用 关键字 async 来表示，在函数内部使用 await 来表示异步。</p>\n</blockquote>\n<h3 id=\"async-await-可以让异步代码以同步的方式来编写\"><a href=\"#async-await-可以让异步代码以同步的方式来编写\" class=\"headerlink\" title=\"async/await 可以让异步代码以同步的方式来编写\"></a>async/await 可以让异步代码以同步的方式来编写</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">get(url, () =&gt; &#123;</div><div class=\"line\">    get(url2, () =&gt; &#123;</div><div class=\"line\">    </div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> getData = <span class=\"keyword\">async</span> () =&gt; &#123; <span class=\"comment\">// 改善了嵌套的问题</span></div><div class=\"line\">    <span class=\"keyword\">const</span> g1 = <span class=\"keyword\">await</span> get(url1);  </div><div class=\"line\">    <span class=\"keyword\">const</span> g2 = <span class=\"keyword\">await</span> get(url2);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// async 中的await 等的就是Promise </span></div><div class=\"line\"><span class=\"comment\">// 它可以将promise中resolve或reject（所以也可以在async用try...catch来捕获primise拒绝的信息）的值返回出来</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 它也可以等待原始类型的值（Number，string，boolean，但这时等同于同步操作）</span></div><div class=\"line\"><span class=\"comment\">// 但是这并没有多大意义</span></div></pre></td></tr></table></figure>\n<h3 id=\"谨慎使用async-await\"><a href=\"#谨慎使用async-await\" class=\"headerlink\" title=\"谨慎使用async/await\"></a>谨慎使用async/await</h3><blockquote>\n<p>如果将并发的请求中写在同一个 async 函数中会造成性能损失</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">get(url1, () =&gt; &#123;</div><div class=\"line\">    get(url2, () =&gt; &#123;</div><div class=\"line\">    </div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">get(url3, () =&gt; &#123;</div><div class=\"line\">    get(url4, () =&gt; &#123;</div><div class=\"line\">    </div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> getData = <span class=\"keyword\">async</span> () =&gt; &#123; <span class=\"comment\">// 因为await会等待promise状态改变才会执行它下面的代码</span></div><div class=\"line\">    <span class=\"keyword\">const</span> g1 = <span class=\"keyword\">await</span> get(url1);</div><div class=\"line\">    <span class=\"keyword\">const</span> g2 = <span class=\"keyword\">await</span> get(url2);</div><div class=\"line\">    <span class=\"keyword\">const</span> g3 = <span class=\"keyword\">await</span> get(url3);</div><div class=\"line\">    <span class=\"keyword\">const</span> g4 = <span class=\"keyword\">await</span> get(url4);</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 所以这样的写法在运行的过程中，其实是将 g3 并发的请求也嵌套了进去</span></div><div class=\"line\">这就会加长请求的时间，影响性能</div><div class=\"line\">get(url1, () =&gt; &#123;</div><div class=\"line\">    get(url2, () =&gt; &#123;</div><div class=\"line\">        get(url3, () =&gt; &#123;</div><div class=\"line\">            get(url4, () =&gt; &#123;</div><div class=\"line\">            </div><div class=\"line\">            &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"Async-中-return-和-return-await\"><a href=\"#Async-中-return-和-return-await\" class=\"headerlink\" title=\"Async 中 return 和 return await ;\"></a>Async 中 return 和 return await ;</h3><blockquote>\n<p>函数前面加了async 该函数会默认返回一个promise</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    reutrn <span class=\"built_in\">Promise</span>.resolve(); <span class=\"comment\">// promise 的值默认为 undefined</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'valeu'</span>; <span class=\"comment\">// return返回的值 实际上是被包在了 promise 中</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Async 中的 await 后边的表达式是一个promise 才有有意义，promise 中值可以通过 await 来返回<br>Async 中 return 和 return await 只在 try…catch 中才有区别</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'错错错'</span>); <span class=\"comment\">// reject(new Error('错错错'));</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 类似与</span></div><div class=\"line\"><span class=\"keyword\">const</span> test = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'错错错'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Async 中的 return；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> test(); <span class=\"comment\">// 重点关注</span></div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span>(err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'这个并不会捕获到错误'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'resolved'</span>);</div><div class=\"line\">&#125;, (err) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'rejected'</span>); </div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 输出：rejected</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Async 中的 return await；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> test(); <span class=\"comment\">// 重点关注</span></div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span>(err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'会捕获到这个错误'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)().then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'resolved'</span>);</div><div class=\"line\">&#125;, () =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'rejected'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 输出：</span></div><div class=\"line\"><span class=\"comment\">// 会捕获到这个错误</span></div><div class=\"line\"><span class=\"comment\">// resolved</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Async-是-Generator的语法糖\"><a href=\"#Async-是-Generator的语法糖\" class=\"headerlink\" title=\"Async 是 Generator的语法糖\"></a>Async 是 Generator的语法糖</h3><blockquote>\n<p>async 内部的语法逻辑 可以通过Generator加一个运行器来实现</p>\n</blockquote>\n<h4 id=\"运行器\"><a href=\"#运行器\" class=\"headerlink\" title=\"运行器\"></a>运行器</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">generator</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 返回一个promise</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">const</span> it = generator() <span class=\"comment\">// 返回生成器</span></div><div class=\"line\">    </div><div class=\"line\">    step(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> it.next())</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\">nextFn</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> result = runNext(nextFn) <span class=\"comment\">// 得到IteratorResult</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (result.done) &#123; <span class=\"comment\">// done 为 true说明 return语句 运行结束 </span></div><div class=\"line\">        resolve(result.value) <span class=\"comment\">// 将请求返回的值转给当前的promise</span></div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"built_in\">Promise</span></div><div class=\"line\">        .resolve(result.value) <span class=\"comment\">// 获取生成器中的promise</span></div><div class=\"line\">        .then(                      </div><div class=\"line\">          value =&gt; step(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> it.next(value)), <span class=\"comment\">// 将promise中的值传给生成器中yield</span></div><div class=\"line\">          err =&gt; step(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> it.throw(err))</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runNext</span>(<span class=\"params\">nextFn</span>) </span>&#123; <span class=\"comment\">// 错误处理</span></div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> nextFn()</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (err) &#123;</div><div class=\"line\">        reject(err)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">  &#125;)</div><div class=\"line\">  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过生成器运行程序控制异步代码</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> run(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"keyword\">const</span> r1 = <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">            setTimeout(resolve, <span class=\"number\">500</span>, <span class=\"string\">'r1value'</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">         <span class=\"keyword\">const</span> r2 = <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">            setTimeout(resolve, <span class=\"number\">200</span>, <span class=\"string\">'r2value'</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> [r1, r2];</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">example.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> <span class=\"built_in\">console</span>.log(val)); <span class=\"comment\">// ['r1value', 'r2value']</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// async/await 来控制异步代码</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 内置了运行器函数</span></div><div class=\"line\">    <span class=\"keyword\">const</span> r1 = <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">            setTimeout(resolve, <span class=\"number\">500</span>, <span class=\"string\">'r1value'</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">const</span> r2 = <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">            setTimeout(resolve, <span class=\"number\">200</span>, <span class=\"string\">'r2value'</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">return</span> [r1, r2];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">example.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> <span class=\"built_in\">console</span>.log(val)); <span class=\"comment\">// ['r1value', 'r2value']</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p> async/await 其实是基于promise、iterator、generator的‘语法糖’</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"promise\"><a href=\"#promise\" class=\"headerlink\" title=\"promise\"></a>promise</h2><h4 id=\"Promise-是什么？\"><a href=\"#Promise-是什么？\" class=\"headerlink\" title=\"Promise 是什么？\"></a>Promise 是什么？</h4><p><a href=\"http://es6.ruanyifeng.com/#docs/promise\" target=\"_blank\" rel=\"external\">阮一峰: Promise 对象</a> </p>\n<blockquote>\n<p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。</p>\n</blockquote>\n<h4 id=\"Promise-的特点？\"><a href=\"#Promise-的特点？\" class=\"headerlink\" title=\"Promise 的特点？\"></a>Promise 的特点？</h4><blockquote>\n<p>首先我们知道 promise 对象有三个状态，分别被为pending（等待）、fulfilled（完成）、rejected（失败）<br>状态只可以从pending -&gt; fulfilled 或者 pending -&gt; rejected</p>\n</blockquote>\n<ul>\n<li>状态只能由它内部改变</li>\n<li>状态不可逆</li>\n</ul>","more":"<ol>\n<li>内部最好写异步操作，毕竟它是异步编程的一种解决方案 <blockquote>\n<p>可以很方便的解决回调地狱这种问题</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(<span class=\"string\">'url'</span>, params, funtion (res) &#123;</div><div class=\"line\"></div><div class=\"line\">  $.ajax(<span class=\"string\">'url'</span>, res , funtion (res1) &#123;</div><div class=\"line\">  </div><div class=\"line\">    $.ajax(<span class=\"string\">'url'</span>, res1, funtion (res2) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(res2)</div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">    &#125;)  </div><div class=\"line\">    </div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">fucntion ajax (url, params) &#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">         <span class=\"comment\">// 异步操作 才有意义</span></div><div class=\"line\">        $.ajax(url, params, funtion (res) &#123;</div><div class=\"line\">            resolve(res);</div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">    &#125;)</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">    ajax(<span class=\"string\">'u1'</span>, <span class=\"string\">'p1'</span>).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</div><div class=\"line\">         <span class=\"keyword\">return</span> ajax(<span class=\"string\">'u2'</span>, res); <span class=\"comment\">// 将 ajax 返回的 promise中的值传递给 then返回的promise。 </span></div><div class=\"line\">    &#125;).then(<span class=\"function\">(<span class=\"params\">res1</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> ajax(<span class=\"string\">'u3'</span>, res1);</div><div class=\"line\">    &#125;).then(<span class=\"function\">(<span class=\"params\">res2</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>)</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n<ol>\n<li>Promise 构造函数的基本实现</li>\n</ol>\n<ul>\n<li>再给实例化的promise中传递的回调中无法用return 代替 resolve <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// promise 其实就是一个状态机 通过不同的状态执行不同的操作</span></div><div class=\"line\">      <span class=\"keyword\">const</span> pending = <span class=\"string\">'pending'</span>;</div><div class=\"line\">      <span class=\"keyword\">const</span> resolved = <span class=\"string\">'resolved'</span>;</div><div class=\"line\">      <span class=\"keyword\">const</span> rejected = <span class=\"string\">'rejected'</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"comment\">// MyPromise 模拟 promise构造函数 简易的实现</span></div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyPromise</span> (<span class=\"params\">fn</span>) </span>&#123; <span class=\"comment\">// ‘func’ 方便this指向清晰</span></div><div class=\"line\">          <span class=\"keyword\">const</span> _this = <span class=\"keyword\">this</span>; <span class=\"comment\">// 缓存当前 promise 实例对象</span></div><div class=\"line\">          _this.state = pending; <span class=\"comment\">// 初始状态</span></div><div class=\"line\">          _this.value = <span class=\"literal\">undefined</span>; <span class=\"comment\">// promise 中存的值</span></div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">/*</span></div><div class=\"line\"><span class=\"comment\">          * 当promise在pending的时候</span></div><div class=\"line\"><span class=\"comment\">          * 会将我们写在.then(() =&gt; &#123;&#125;, () =&gt; &#123;&#125;)中的回调传给下边的俩个数组</span></div><div class=\"line\"><span class=\"comment\">          * */</span></div><div class=\"line\">          _this.resovleCallbacks = [];</div><div class=\"line\">          _this.rejectCallbacks = [];</div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// 为什么resolve 加setTimeout?</span></div><div class=\"line\">          <span class=\"comment\">// 实践中要确保 onFulfilled 和 onRejected 方法异步执行，且应该在 then </span></div><div class=\"line\">          <span class=\"comment\">// 方法被调用的那一轮事件循环之后的新执行栈中执行。</span></div><div class=\"line\"></div><div class=\"line\">          <span class=\"comment\">// 我在平常的时候 以为在回调中 resolve了 状态就会立即改变 然而 并不是</span></div><div class=\"line\">          _this.resolve = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123; <span class=\"comment\">// 当我们在回调中 调用它的时候就会触发 异步代码</span></div><div class=\"line\">              <span class=\"keyword\">if</span> (val <span class=\"keyword\">instanceof</span> MyPromise) &#123; <span class=\"comment\">// 检测 resolve(val) 的值是不是 promise对象</span></div><div class=\"line\">                <span class=\"keyword\">return</span> val.then(_this.resolve, _this.reject); <span class=\"comment\">// 通过递归 将 val(promise) 的值 传给最外层的promise </span></div><div class=\"line\">              &#125;</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">if</span> (_this.state !== resolved) &#123; <span class=\"comment\">// 第一次调用 状态是pending 所以为 true</span></div><div class=\"line\">                  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 这里异步 then 中回调就会传到 callbacks = []</span></div><div class=\"line\">                      <span class=\"comment\">// 一个 promise 状态只可以改变一次</span></div><div class=\"line\">                    _this.state = resolved;</div><div class=\"line\">                    _this.value = val;</div><div class=\"line\">                    _this.resovleCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn());</div><div class=\"line\">                  &#125;)</div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">this</span>.reject = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123; <span class=\"comment\">// 可以传递promise 但会报错</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (_this.state === rejected) &#123;</div><div class=\"line\">                setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                    _this.state = rejected;</div><div class=\"line\">                    _this.value = err;</div><div class=\"line\">                    _this.rejectCallbacks.forEach(<span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> fn());</div><div class=\"line\">                &#125;)</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125;;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            fn(_this.resolve, _this.reject); <span class=\"comment\">// 调用传入的回调函数</span></div><div class=\"line\">          &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">            _this.reject(e); <span class=\"comment\">// 捕获 回调内部 报错</span></div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li>then 方法<blockquote>\n<p>Promise.prototype 上的一个属性，所以每一个promise实例都可以用它<br>then 方法必须返回一个 promise 对象<br>then 方法可以被同一个 promise 调用多次</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>.then() 会生成一个新的promise实例</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">    MyPromise.prototype.then = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">onResolved, onRejected</span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">const</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">          <span class=\"keyword\">let</span> newPromise = <span class=\"literal\">null</span>;</div><div class=\"line\">          </div><div class=\"line\">          <span class=\"comment\">// 如果类型不是函数需要忽略，同时也实现了透传</span></div><div class=\"line\">          <span class=\"comment\">// Promise.resolve(4).then().then((value) =&gt; console.log(value))</span></div><div class=\"line\">          </div><div class=\"line\">         <span class=\"comment\">// onFulfilled 和 onRejected 必须被作为函数调用</span></div><div class=\"line\">          onResolved = <span class=\"keyword\">typeof</span> onResolved === <span class=\"string\">'function'</span> ? onResolved : <span class=\"function\"><span class=\"params\">v</span> =&gt;</span> v;</div><div class=\"line\">          onRejected = <span class=\"keyword\">typeof</span> onRejected === <span class=\"string\">'function'</span> ? onRejected : <span class=\"function\"><span class=\"params\">r</span> =&gt;</span> &#123;<span class=\"keyword\">throw</span> r&#125;;</div><div class=\"line\">          </div><div class=\"line\">          <span class=\"keyword\">if</span> (self.state === resolved) &#123;</div><div class=\"line\">              newPromise = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">                  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 保证 onResolved 和 onRejected 异步 // 该回调会在 当前promise实例的状态改变之后调用</span></div><div class=\"line\">                      <span class=\"keyword\">try</span> &#123; <span class=\"comment\">// 防止报错</span></div><div class=\"line\">                          <span class=\"keyword\">const</span> x = onResolved(self.value);</div><div class=\"line\">                          resolvePromise(newPromise, x, resolve, reject); <span class=\"comment\">//  判断 x 的类型执行对应操作</span></div><div class=\"line\">                      &#125; <span class=\"keyword\">catch</span> (err) &#123;</div><div class=\"line\">                          reject(err);</div><div class=\"line\">                      &#125;</div><div class=\"line\">                  &#125;);</div><div class=\"line\"></div><div class=\"line\">              &#125;);</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">return</span> newPromise;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">if</span> (self.state === pending) &#123;</div><div class=\"line\">              newPromise = <span class=\"keyword\">new</span> MyPromise(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">                  self.resovleCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"comment\">// 该回调会在 当前promise实例的状态改变之前push进去</span></div><div class=\"line\">                      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                          <span class=\"keyword\">const</span> x = onResolved(self.value);</div><div class=\"line\">                          resolvePromise(newPromise, x, resolve, reject);</div><div class=\"line\">                      &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">                          reject(e);</div><div class=\"line\">                      &#125;</div><div class=\"line\">                  &#125;);</div><div class=\"line\"></div><div class=\"line\">                  self.rejectCallbacks.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                          <span class=\"keyword\">const</span> x = onResolved(self.value);</div><div class=\"line\">                          resolvePromise(newPromise, x, resolve, reject);</div><div class=\"line\">                      &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">                          reject(e);</div><div class=\"line\">                      &#125;</div><div class=\"line\">                  &#125;);</div><div class=\"line\">              &#125;);</div><div class=\"line\"></div><div class=\"line\">              <span class=\"keyword\">return</span> newPromise;</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;;</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolvePromise</span> (<span class=\"params\">promise2, x, resolve, reject</span>) </span>&#123; <span class=\"comment\">// 对内部生成的 newPromise 进行resolve 给下一个then 传值</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (promise2 === x) &#123;</div><div class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'防止死循环'</span>);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">if</span> (x <span class=\"keyword\">instanceof</span> MyPromise) &#123; <span class=\"comment\">// 把 x 的值传给当前的 newPromise</span></div><div class=\"line\">              <span class=\"keyword\">if</span> (x === pending) &#123;</div><div class=\"line\">                  x.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">                      resolvePromise(promise2, val, resolve, reject); <span class=\"comment\">// 检测val的类型，如果合适就传给promise2</span></div><div class=\"line\">                  &#125;, reject)</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  x.then(resolve, reject); <span class=\"comment\">// 直接将x的值 传给promise2</span></div><div class=\"line\">              &#125;</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">          <span class=\"keyword\">let</span> called = <span class=\"literal\">false</span>; <span class=\"comment\">// 防止thenable内的方法多次调用 例如 resolve 多次调用</span></div><div class=\"line\">          <span class=\"comment\">//</span></div><div class=\"line\">          <span class=\"keyword\">if</span> (x !== <span class=\"literal\">null</span> &amp;&amp; (<span class=\"keyword\">typeof</span> x === <span class=\"string\">'object'</span> || <span class=\"keyword\">typeof</span> x === <span class=\"string\">'function'</span>)) &#123; <span class=\"comment\">// 判断当前 x thenable （函数或对象内具有then属性的方法）</span></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">               <span class=\"keyword\">let</span> then = x.then; <span class=\"comment\">// 获取 then 的值</span></div><div class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> then === <span class=\"string\">'function'</span>) &#123;</div><div class=\"line\">                   then.call(</div><div class=\"line\">                       x, <span class=\"comment\">// 绑定当前 x 对象</span></div><div class=\"line\">                       y =&gt; &#123; <span class=\"comment\">// 将 then 中resolve的 值传递给 promise2 </span></div><div class=\"line\">                           <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>; </div><div class=\"line\">                           called = <span class=\"literal\">true</span>;</div><div class=\"line\">                           resolvePromise(promise2, y, resolve, reject); <span class=\"comment\">// 验证 y 的类型</span></div><div class=\"line\">                       &#125;,</div><div class=\"line\">                        reason =&gt; &#123;</div><div class=\"line\">                            <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</div><div class=\"line\">                            called = <span class=\"literal\">true</span>;</div><div class=\"line\">                            reject(reason);</div><div class=\"line\">                        &#125;</div><div class=\"line\">                       )</div><div class=\"line\">               &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                   resolve(x);</div><div class=\"line\">               &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (called) <span class=\"keyword\">return</span>;</div><div class=\"line\">                called = <span class=\"literal\">true</span>;</div><div class=\"line\">                reject(e);</div><div class=\"line\">            &#125;</div><div class=\"line\">          &#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 普通值</span></div><div class=\"line\">              resolve(x);</div><div class=\"line\">          &#125;</div><div class=\"line\"></div><div class=\"line\">      &#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>promise 错误处理</li>\n</ol>\n<p>promise 内部即使报错，它也不会强制导致代码停止运行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// promise内部代码都是在try...catch内部运行的</span></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// throw Error('错误');</span></div><div class=\"line\">        reject(<span class=\"string\">'错误'</span>);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'并不会捕获到'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// catch() === then(null, () =&gt; &#123;&#125;) catch其实就是then的另一种实现方式 </span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> rejected  = <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'报错'</span>);</div><div class=\"line\"></div><div class=\"line\">rejected.catch(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(val);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ol>\n<li>Promise.race([]) 将可以迭代对象（数组）中最先被改变的promise的值 传给return promies </li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timerPromise</span>(<span class=\"params\">delay</span>) </span>&#123;</div><div class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">              setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                  <span class=\"keyword\">if</span> (delay === <span class=\"number\">40</span>) &#123;</div><div class=\"line\">                      reject(delay);</div><div class=\"line\">                  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                      resolve(delay);</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;, delay);</div><div class=\"line\">          &#125;);</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"built_in\">Promise</span>.race([ <span class=\"comment\">// 如果数组中的 promise 的状态改变了当前的promise状态也会随之改变</span></div><div class=\"line\">          timerPromise(<span class=\"number\">40</span>),</div><div class=\"line\">          timerPromise(<span class=\"number\">20</span>),</div><div class=\"line\">          timerPromise(<span class=\"number\">30</span>)</div><div class=\"line\">      ]).then(<span class=\"function\"><span class=\"params\">values</span> =&gt;</span> &#123;</div><div class=\"line\">          <span class=\"built_in\">console</span>.log(values);</div><div class=\"line\">      &#125;);</div><div class=\"line\">      </div><div class=\"line\">MyPromise.race = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">promises</span>) </span>&#123; <span class=\"comment\">// 内部实现</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">        promises.forEach(<span class=\"function\"><span class=\"params\">p</span> =&gt;</span> &#123;  </div><div class=\"line\">            p.then(resolve, reject);  <span class=\"comment\">// 如果 p 的状态不是pending 了 resolve这个回调就会调用</span></div><div class=\"line\">        &#125;)                            <span class=\"comment\">// resolve 中具有 return promise对象 的this指针     </span></div><div class=\"line\">                                      <span class=\"comment\">// p 通过then 可以把自己的值传递给 return promise</span></div><div class=\"line\">                                      <span class=\"comment\">// 状态改变逻辑不能重复调用</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ol>\n<li>Promise.all([]); </li>\n</ol>\n<blockquote>\n<p>Promise.all可以将多个Promise实例包装成一个新的Promise实例。<br>同时，成功和失败的返回值是不同的，成功的时候返回的是一个结果数组，<br>而失败的时候则返回最先被reject失败状态的值。</p>\n</blockquote>\n<ul>\n<li>在处理多个异步处理时非常有用</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Promise</span>.all = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">promises</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123; <span class=\"comment\">// 返回一个promise实例</span></div><div class=\"line\">        <span class=\"keyword\">const</span> length = promises.length;</div><div class=\"line\">        <span class=\"keyword\">let</span> result = gen(length, resolve)</div><div class=\"line\">        promises.forEach(<span class=\"function\">(<span class=\"params\">p, i</span>) =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// 将所有的 promise 遍利出来</span></div><div class=\"line\">            p.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</div><div class=\"line\">                result(i, val)</div><div class=\"line\">            &#125;, reject)</div><div class=\"line\">        &#125;) <span class=\"comment\">// 如果有一个promise 被拒绝 就改变return promise 的状态</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gen</span> (<span class=\"params\">length, resolve</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> count = <span class=\"number\">0</span>; <span class=\"comment\">// 记录循环次数</span></div><div class=\"line\">        <span class=\"keyword\">let</span> values = [];</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            values[i] = value;</div><div class=\"line\">            <span class=\"keyword\">if</span> (++count === length) &#123; <span class=\"comment\">// 遍历完成时改变 return promise 的状态</span></div><div class=\"line\">                resolve(values);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"Iterator-迭代器、遍历器\"><a href=\"#Iterator-迭代器、遍历器\" class=\"headerlink\" title=\"Iterator (迭代器、遍历器)\"></a>Iterator (迭代器、遍历器)</h2><blockquote>\n<p>为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作</p>\n</blockquote>\n<h4 id=\"迭代器的组成接口\"><a href=\"#迭代器的组成接口\" class=\"headerlink\" title=\"迭代器的组成接口\"></a>迭代器的组成接口</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> IteratorResult &#123; <span class=\"comment\">// 迭代器结果</span></div><div class=\"line\">    done: <span class=\"built_in\">boolean</span>,</div><div class=\"line\">    value: <span class=\"built_in\">any</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">interface</span> Iterator &#123; <span class=\"comment\">// 迭代器</span></div><div class=\"line\">    next(): IteratorResult </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">interface</span> Iterable &#123; <span class=\"comment\">// 可迭代对象</span></div><div class=\"line\">    [Symbol.iterator]: Iterator  <span class=\"comment\">// 通过 Symbol.iterator(迭代器生成函数) 生成迭代器</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>什么是迭代器？</p>\n<blockquote>\n<p>迭代器是一个对象，它一定会有一个 ==next()== 方法，每次调用 ==next()== 方法，<br>就会返回一个迭代器结果。</p>\n</blockquote>\n<p>什么是迭代器结果？</p>\n<blockquote>\n<p>迭代器结也是一个对象，这个对象有两个属性：done和value，<br>其中done是一个布尔值，false表示迭代器迭代的序列没有结束；<br>true表示迭代器迭代的序列结束了。而value就是迭代器每次迭代真正返回的值。<br>（它们反应了当前元素和当前状态）</p>\n</blockquote>\n<p>什么是可迭代对象？</p>\n<blockquote>\n<p>具有 ==[Symbol.iterator]()== 这个接口的数据结构就叫可迭代对象</p>\n<p>es6中原生具备这个接口的数据结构如下：<br>Array、Map、Set、String、函数内部的Arguments对象、NodeList、TypedArray</p>\n<p>对象是非线性的数据结构所以没必要部署迭代器接口，因为迭代器是一种线性（有顺序的）处理，<br>而且对象实际上被当作 Map 结构使用，es6原生提供了，<br>如果非要可迭代可以自己添加 ==[Symbol.iterator]()== 这个属性。</p>\n</blockquote>\n<h4 id=\"用于操作可迭代对象的语法：\"><a href=\"#用于操作可迭代对象的语法：\" class=\"headerlink\" title=\"用于操作可迭代对象的语法：\"></a>用于操作可迭代对象的语法：</h4><ul>\n<li>for … of </li>\n<li>[…iterable] (扩展运算符)</li>\n<li>Array.from(iterable)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> sequence = &#123;</div><div class=\"line\">        [<span class=\"built_in\">Symbol</span>.iterator]() &#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">                next() &#123;</div><div class=\"line\">                    <span class=\"keyword\">const</span> value = arr[i];</div><div class=\"line\">                    i++;</div><div class=\"line\">                    <span class=\"keyword\">const</span> done = i &gt; arr.length;</div><div class=\"line\">                    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">                        value,</div><div class=\"line\">                        done</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> val <span class=\"keyword\">of</span> sequence) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(val) <span class=\"comment\">// 'a' 'b' 'c' 'd'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"built_in\">console</span>.log([...sequence]) <span class=\"comment\">// [\"a\", \"b\", \"c\", \"d\"]</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(sequence)) <span class=\"comment\">// [\"a\", \"b\", \"c\", \"d\"]</span></div></pre></td></tr></table></figure>\n<h4 id=\"迭代器中的状态\"><a href=\"#迭代器中的状态\" class=\"headerlink\" title=\"迭代器中的状态\"></a>迭代器中的状态</h4><blockquote>\n<p>如果迭代器中没有设置终止状态，可以通过for … of 来手动终止</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> random = &#123; <span class=\"comment\">// 如果不改变迭代器结果的状态</span></div><div class=\"line\">      [<span class=\"built_in\">Symbol</span>.iterator]: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123;</div><div class=\"line\">        next: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (&#123; <span class=\"attr\">value</span>: <span class=\"built_in\">Math</span>.random() &#125;) </div><div class=\"line\">      &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    [...random] <span class=\"comment\">// 就会死循环</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> val <span class=\"keyword\">of</span> random) &#123; <span class=\"comment\">// for ... of可以通过 break 来退出循环</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (val &gt; <span class=\"number\">0.6</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(val);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Generator\"><a href=\"#Generator\" class=\"headerlink\" title=\"Generator\"></a>Generator</h2><blockquote>\n<p>generator函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">interface</span> Generator <span class=\"keyword\">extends</span> Iterator &#123;</div><div class=\"line\">    next(value?: <span class=\"built_in\">any</span>): IteratorResult; <span class=\"comment\">// 迭代器具有的特征</span></div><div class=\"line\">    [Symbol.iterator](): Iterator; <span class=\"comment\">// 可迭代对象具有的特征</span></div><div class=\"line\">    <span class=\"keyword\">throw</span>(exception: <span class=\"built_in\">any</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>生成器是什么？</p>\n<blockquote>\n<p>生成器函数返回的是一个生成器，它内部既有迭代器具有的特征，也有可迭代对象具有的特征，所以说，它既是一个迭代器，又是一个可迭代对象。  </p>\n<p>因为生成器还提供了一个 yield 关键字，它返回的序列值会自动包装在一个IteratorResult（迭代器结果）对象中,<br>所以生成器又是迭代器的“加强版”。</p>\n</blockquote>\n<p>验证一下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span></div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'c'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> g = gen();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 生成器具有可迭代对象的特征</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> g[<span class=\"built_in\">Symbol</span>.iterator] === <span class=\"string\">'function'</span> <span class=\"comment\">// g 是个可迭代对象</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 说明它可以被 操作可迭代对象的语法 来操纵</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> val <span class=\"keyword\">of</span> g) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(val) <span class=\"comment\">// a, b</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// for ... of 在 done 为 true 时就停止运行，所以 return 的返回值并不会被遍历出来。</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typeof</span> g.next === <span class=\"string\">'function'</span>  <span class=\"comment\">// g是迭代器</span></div><div class=\"line\"></div><div class=\"line\">g.next() <span class=\"comment\">// &#123;value: 'a', done: false&#125; // 迭代器是可以直接调用 next 方法的</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield\"></a>yield</h3><blockquote>\n<p>==yield== 关键字 它可以使生成器函数 ++执行暂停++，yield关键字后面的表达式的值 返回给生成器的调用者。</p>\n<p>yield关键字 返回一个IteratorResult对象，它有两个属性，value和done。value属性是对yield表达式求值的结果，而done是迭代完成的状态，一直都是false。（迭代完成或者return会改变done的状态）</p>\n</blockquote>\n<h4 id=\"生成器中的yield-与-return\"><a href=\"#生成器中的yield-与-return\" class=\"headerlink\" title=\"生成器中的yield 与 return\"></a>生成器中的yield 与 return</h4><blockquote>\n<p>它们有些作用是相似的，都可以返回函数中的值，都可以暂停函数的执行。但是yield只是将函数暂时的挂起，而return则表示函数运行结束；</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span> (<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> y = x * (<span class=\"keyword\">yield</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> y;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> it = gen(<span class=\"number\">3</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//启动生成器 </span></div><div class=\"line\">it.next(); <span class=\"comment\">// &#123;value: undefined, done: false&#125; </span></div><div class=\"line\"></div><div class=\"line\">it.next(<span class=\"number\">4</span>); <span class=\"comment\">// &#123;value: 12, done: true&#125;</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>生成器的独到之处，就是在于它的 ==yiled== 关键字，它的有俩个神奇之处：</p>\n<ol>\n<li>它是生成器函数暂停和恢复执行的分界点；</li>\n<li>它是向外和向内传值（包括错误/异常）的媒介。</li>\n</ol>\n</blockquote>\n<h4 id=\"生成器的单向执行且不可逆\"><a href=\"#生成器的单向执行且不可逆\" class=\"headerlink\" title=\"生成器的单向执行且不可逆\"></a>生成器的单向执行且不可逆</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> *<span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'a'</span></div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'b'</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'c'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> g = gen();</div><div class=\"line\">[...g] <span class=\"comment\">// ['a', 'b']</span></div><div class=\"line\">[...g] <span class=\"comment\">// []</span></div></pre></td></tr></table></figure>\n<h4 id=\"导致生成器暂停的情况还有两种\"><a href=\"#导致生成器暂停的情况还有两种\" class=\"headerlink\" title=\"导致生成器暂停的情况还有两种\"></a>导致生成器暂停的情况还有两种</h4><ol>\n<li>到达生成器底部也会停止，生成器执行完成</li>\n<li>生成器内部有throw语句它也会导致生成器完全停止执行</li>\n</ol>\n<h4 id=\"错误处理\"><a href=\"#错误处理\" class=\"headerlink\" title=\"错误处理\"></a>错误处理</h4><blockquote>\n<p>生成器的错误可以‘由内而外’也可以‘由外而内再由外’，具体表现如下：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 由内而外</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">testErr</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> x = yiled <span class=\"string\">'hi'</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> x.toLowerCase(); <span class=\"comment\">// 内部报错,返回异常</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> it = main();</div><div class=\"line\">it.next().value <span class=\"comment\">// 'hi'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">try</span>&#123;</div><div class=\"line\">    it.next(<span class=\"number\">3</span>); <span class=\"comment\">// 传入导致数值类型错误，外部接收异常</span></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span>(e) &#123; </div><div class=\"line\">    <span class=\"built_in\">console</span>.error(e) <span class=\"comment\">// TypeError</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 由外而内再由外</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">main</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"keyword\">yield</span> <span class=\"string\">'hi'</span>;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'never gets here'</span>); </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> it = main();</div><div class=\"line\">it.next().value; <span class=\"comment\">// 'hi'</span></div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\"><span class=\"comment\">// .throw 会给 yield 传递异常信息 和 .next() 传值相似</span></div><div class=\"line\">  it.throw(<span class=\"string\">'报错'</span>); <span class=\"comment\">//导致生成器终止运行</span></div><div class=\"line\">                    <span class=\"comment\">// 生成器接受到异常，又回抛出来</span></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.error(err); <span class=\"comment\">// 报错</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"异步迭代生成器\"><a href=\"#异步迭代生成器\" class=\"headerlink\" title=\"异步迭代生成器\"></a>异步迭代生成器</h3><blockquote>\n<p>生成器的异步在于 ==yield== ,因为它不是++必须++同步等待 .next(val) 来给它传值的，而是可以在异步操作中来调用 .next(val) 把值传给它，所以 yield 是可以等待一个异步操作结果的</p>\n<p>利用生成器，在生成器内部以同步的方式来写异步代码</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1 先封一个基于promise的http请求</span></div><div class=\"line\"></div><div class=\"line\">funtion get(url) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</div><div class=\"line\">        $.post(url, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (!data.isErr) &#123;</div><div class=\"line\">                resolve(data);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                reject(data);</div><div class=\"line\">            &#125;</div><div class=\"line\">            </div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 2. 在生成器中请求数据</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">foo</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> data =  <span class=\"keyword\">yield</span> get(<span class=\"string\">'url'</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data); </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> f = foo();</div><div class=\"line\"><span class=\"keyword\">const</span> p = f.next().value; <span class=\"comment\">// 获取到get中的promise</span></div><div class=\"line\"></div><div class=\"line\">p.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> &#123;</div><div class=\"line\">    f.next(val) <span class=\"comment\">// 获取到promise的值，再通过next返给yield，从而代码恢复执行，输出data</span></div><div class=\"line\">&#125;, err =&gt; &#123;</div><div class=\"line\">    f.throw(err)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"generator中-yiled-与-next\"><a href=\"#generator中-yiled-与-next\" class=\"headerlink\" title=\"generator中 yiled 与 next\"></a>generator中 yiled 与 next</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"number\">1</span> + <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">const</span> c = <span class=\"keyword\">yield</span> b;</div><div class=\"line\">    <span class=\"keyword\">yield</span> c;</div><div class=\"line\">    <span class=\"keyword\">return</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> b = test();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.next());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.next(<span class=\"number\">1</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.next(<span class=\"number\">2</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.next());</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// es5</span></div><div class=\"line\"><span class=\"keyword\">var</span> _marked = <span class=\"comment\">/*#__PURE__*/</span>regeneratorRuntime.mark(test);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a, b, c;</div><div class=\"line\">    <span class=\"keyword\">return</span> regeneratorRuntime.wrap(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test$</span>(<span class=\"params\">_context</span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 可以发现通过 yield 将代码分割成几块</span></div><div class=\"line\">        <span class=\"comment\">// 每次执行 next 函数就执行一块代码</span></div><div class=\"line\">        <span class=\"comment\">// 并且表明下次需要执行哪块代码</span></div><div class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (_context.prev = _context.next) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">                    a = <span class=\"number\">1</span> + <span class=\"number\">2</span>;</div><div class=\"line\">                    _context.next = <span class=\"number\">3</span>;</div><div class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</div><div class=\"line\">                    b = _context.sent;</div><div class=\"line\">                    _context.next = <span class=\"number\">6</span>;</div><div class=\"line\">                    <span class=\"keyword\">return</span> b;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</div><div class=\"line\">                    c = _context.sent;</div><div class=\"line\">                    _context.next = <span class=\"number\">9</span>;</div><div class=\"line\">                    <span class=\"keyword\">return</span> c;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"number\">9</span>:</div><div class=\"line\">                <span class=\"keyword\">case</span> <span class=\"string\">\"end\"</span>:</div><div class=\"line\">                    <span class=\"keyword\">return</span> _context.stop();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;, _marked, <span class=\"keyword\">this</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> b = test();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.next());</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.next(<span class=\"number\">1</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.next(<span class=\"number\">2</span>));</div><div class=\"line\"><span class=\"built_in\">console</span>.log(b.next());</div></pre></td></tr></table></figure>\n<h2 id=\"async-await\"><a href=\"#async-await\" class=\"headerlink\" title=\"async/await\"></a>async/await</h2><blockquote>\n<p>async 函数是 Generator 函数的语法糖。使用 关键字 async 来表示，在函数内部使用 await 来表示异步。</p>\n</blockquote>\n<h3 id=\"async-await-可以让异步代码以同步的方式来编写\"><a href=\"#async-await-可以让异步代码以同步的方式来编写\" class=\"headerlink\" title=\"async/await 可以让异步代码以同步的方式来编写\"></a>async/await 可以让异步代码以同步的方式来编写</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">get(url, () =&gt; &#123;</div><div class=\"line\">    get(url2, () =&gt; &#123;</div><div class=\"line\">    </div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> getData = <span class=\"keyword\">async</span> () =&gt; &#123; <span class=\"comment\">// 改善了嵌套的问题</span></div><div class=\"line\">    <span class=\"keyword\">const</span> g1 = <span class=\"keyword\">await</span> get(url1);  </div><div class=\"line\">    <span class=\"keyword\">const</span> g2 = <span class=\"keyword\">await</span> get(url2);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// async 中的await 等的就是Promise </span></div><div class=\"line\"><span class=\"comment\">// 它可以将promise中resolve或reject（所以也可以在async用try...catch来捕获primise拒绝的信息）的值返回出来</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 它也可以等待原始类型的值（Number，string，boolean，但这时等同于同步操作）</span></div><div class=\"line\"><span class=\"comment\">// 但是这并没有多大意义</span></div></pre></td></tr></table></figure>\n<h3 id=\"谨慎使用async-await\"><a href=\"#谨慎使用async-await\" class=\"headerlink\" title=\"谨慎使用async/await\"></a>谨慎使用async/await</h3><blockquote>\n<p>如果将并发的请求中写在同一个 async 函数中会造成性能损失</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">get(url1, () =&gt; &#123;</div><div class=\"line\">    get(url2, () =&gt; &#123;</div><div class=\"line\">    </div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">get(url3, () =&gt; &#123;</div><div class=\"line\">    get(url4, () =&gt; &#123;</div><div class=\"line\">    </div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> getData = <span class=\"keyword\">async</span> () =&gt; &#123; <span class=\"comment\">// 因为await会等待promise状态改变才会执行它下面的代码</span></div><div class=\"line\">    <span class=\"keyword\">const</span> g1 = <span class=\"keyword\">await</span> get(url1);</div><div class=\"line\">    <span class=\"keyword\">const</span> g2 = <span class=\"keyword\">await</span> get(url2);</div><div class=\"line\">    <span class=\"keyword\">const</span> g3 = <span class=\"keyword\">await</span> get(url3);</div><div class=\"line\">    <span class=\"keyword\">const</span> g4 = <span class=\"keyword\">await</span> get(url4);</div><div class=\"line\">    </div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 所以这样的写法在运行的过程中，其实是将 g3 并发的请求也嵌套了进去</span></div><div class=\"line\">这就会加长请求的时间，影响性能</div><div class=\"line\">get(url1, () =&gt; &#123;</div><div class=\"line\">    get(url2, () =&gt; &#123;</div><div class=\"line\">        get(url3, () =&gt; &#123;</div><div class=\"line\">            get(url4, () =&gt; &#123;</div><div class=\"line\">            </div><div class=\"line\">            &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h3 id=\"Async-中-return-和-return-await\"><a href=\"#Async-中-return-和-return-await\" class=\"headerlink\" title=\"Async 中 return 和 return await ;\"></a>Async 中 return 和 return await ;</h3><blockquote>\n<p>函数前面加了async 该函数会默认返回一个promise</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    reutrn <span class=\"built_in\">Promise</span>.resolve(); <span class=\"comment\">// promise 的值默认为 undefined</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'valeu'</span>; <span class=\"comment\">// return返回的值 实际上是被包在了 promise 中</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>Async 中的 await 后边的表达式是一个promise 才有有意义，promise 中值可以通过 await 来返回<br>Async 中 return 和 return await 只在 try…catch 中才有区别</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'错错错'</span>); <span class=\"comment\">// reject(new Error('错错错'));</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 类似与</span></div><div class=\"line\"><span class=\"keyword\">const</span> test = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'错错错'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<ul>\n<li><p>Async 中的 return；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> test(); <span class=\"comment\">// 重点关注</span></div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span>(err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'这个并不会捕获到错误'</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)().then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'resolved'</span>);</div><div class=\"line\">&#125;, (err) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'rejected'</span>); </div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 输出：rejected</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>Async 中的 return await；</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> test(); <span class=\"comment\">// 重点关注</span></div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span>(err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'会捕获到这个错误'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)().then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'resolved'</span>);</div><div class=\"line\">&#125;, () =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'rejected'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 输出：</span></div><div class=\"line\"><span class=\"comment\">// 会捕获到这个错误</span></div><div class=\"line\"><span class=\"comment\">// resolved</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"Async-是-Generator的语法糖\"><a href=\"#Async-是-Generator的语法糖\" class=\"headerlink\" title=\"Async 是 Generator的语法糖\"></a>Async 是 Generator的语法糖</h3><blockquote>\n<p>async 内部的语法逻辑 可以通过Generator加一个运行器来实现</p>\n</blockquote>\n<h4 id=\"运行器\"><a href=\"#运行器\" class=\"headerlink\" title=\"运行器\"></a>运行器</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\">generator</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 返回一个promise</span></div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">  </div><div class=\"line\">    <span class=\"keyword\">const</span> it = generator() <span class=\"comment\">// 返回生成器</span></div><div class=\"line\">    </div><div class=\"line\">    step(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> it.next())</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">step</span>(<span class=\"params\">nextFn</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">const</span> result = runNext(nextFn) <span class=\"comment\">// 得到IteratorResult</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (result.done) &#123; <span class=\"comment\">// done 为 true说明 return语句 运行结束 </span></div><div class=\"line\">        resolve(result.value) <span class=\"comment\">// 将请求返回的值转给当前的promise</span></div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"built_in\">Promise</span></div><div class=\"line\">        .resolve(result.value) <span class=\"comment\">// 获取生成器中的promise</span></div><div class=\"line\">        .then(                      </div><div class=\"line\">          value =&gt; step(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> it.next(value)), <span class=\"comment\">// 将promise中的值传给生成器中yield</span></div><div class=\"line\">          err =&gt; step(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> it.throw(err))</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">runNext</span>(<span class=\"params\">nextFn</span>) </span>&#123; <span class=\"comment\">// 错误处理</span></div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> nextFn()</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span> (err) &#123;</div><div class=\"line\">        reject(err)</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">  &#125;)</div><div class=\"line\">  </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 通过生成器运行程序控制异步代码</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> run(<span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">        <span class=\"keyword\">const</span> r1 = <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">            setTimeout(resolve, <span class=\"number\">500</span>, <span class=\"string\">'r1value'</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">         <span class=\"keyword\">const</span> r2 = <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">            setTimeout(resolve, <span class=\"number\">200</span>, <span class=\"string\">'r2value'</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> [r1, r2];</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">example.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> <span class=\"built_in\">console</span>.log(val)); <span class=\"comment\">// ['r1value', 'r2value']</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// async/await 来控制异步代码</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 内置了运行器函数</span></div><div class=\"line\">    <span class=\"keyword\">const</span> r1 = <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">            setTimeout(resolve, <span class=\"number\">500</span>, <span class=\"string\">'r1value'</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">const</span> r2 = <span class=\"keyword\">yield</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> &#123;</div><div class=\"line\">            setTimeout(resolve, <span class=\"number\">200</span>, <span class=\"string\">'r2value'</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">    <span class=\"keyword\">return</span> [r1, r2];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">example.then(<span class=\"function\"><span class=\"params\">val</span> =&gt;</span> <span class=\"built_in\">console</span>.log(val)); <span class=\"comment\">// ['r1value', 'r2value']</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p> async/await 其实是基于promise、iterator、generator的‘语法糖’</p>\n</blockquote>"},{"title":"网络模型与tcp协议","date":"2019-03-14T07:25:33.000Z","description":"网络模型与tcp协议","_content":"\n\nOSI模型是ISO制定的网络模型规范，而TCP/IP模型是实际中更通用的协议族。\n\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276540_10.png)\n\n\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276563_65.png)\n\n一个网络请求的顺序如下:\n即IP路由寻址，再根据MAC地址确认目标机器，然后通过TCP/UDP进行端口数据传输，最后通过应用层协议解析数据。\nMAC地址可以使用`ifconfig`，osx系统可以用`networksetup -listallhardwareports`,ether即MAC地址。\n\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276575_7.png)\n\n\n## 以太帧\n在TCP/IP模型中，数据是自顶向下包装的。最后的一个以太网帧如下结构\n\n\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276585_16.png)\n\n## IP\nIP是无连接，无状态，不保证发送的包是否有序到达。\n```$xslt\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |Version|  IHL  |Type of Service|          Total Length         |\n   |版本号  | 头长度 |  服务类型(8位) |           总长度(16位)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |         Identification        |Flags   |    Fragment Offset   |\n   |            标识(16位）         |标志(3位)|      分偏移段(13位)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  Time to Live |    Protocol   |         Header Checksum       |\n   |  生存时间(8位) | 挂载协议标识(8位)|            校验和(16位)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                       Source Address                          |\n   |                        源IP地址(16位）                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                    Destination Address                        |\n   |                      目标IP地址(16位)                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                    Options                    |    Padding    |\n   |                      选项                      |     填充      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                             Data                              |\n   |                          TCP/UDP数据                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n         \n- Version: IPv4/IPv6\n- Total Length: IP报文头与数据总长度，<=MTU(Maximum Transmission Unit,以太网一般1500字节)\n- Identification：分片后+1，用于分片重组\n- Flags：3bit, 第一位0，第二位0可以分片1不可分片，第三位0最后一片，1不是最后一片\n- Fragment Offset: 分片后再原组中的相对偏移量\n- Time to Live: 可经过最大的路由器数\n- Protocol: 下一层协议，ICMP/TCP/UDP    \n```\n      \n## TCP\n\n> Transmission Control Protocol (TCP): TCP provides reliable, ordered, and error-checked delivery of a stream of octets (bytes) between applications running on hosts communicating via an IP network\n>\nTCP是面向连接、确保数据在端对端可靠传输的协议。\n```$xslt\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-------------------------------+-------------------------------+\n   |          Source Port          |       Destination Port        |\n   |        源机器端口号(16位)        |      目标机器端口号(16位)       |\n   +-------------------------------+-------------------------------+\n   |                        Sequence Number                        |\n   |                        序列号(32位）seq=？                      |\n   +---------------------------------------------------------------+\n   |                    Acknowledgment Number                      |\n   |                     确认序号(32位）ack=？                       |\n   +-------+-----------+-+-+-+-+-+-+-------------------------------+\n   |  Data |           |U|A|P|R|S|F|                               |\n   | Offset| Reserved  |R|C|S|S|Y|I|            Window             |\n   |       |           |G|K|H|T|N|N|                               |\n   |  头部  |           |           |                               |\n   |  长度  |   保留    |    FALG   |          滑动窗口大小           |\n   | (4位) |   (6位）   |           |           （16位）             |\n   +-------+-----------+-+-+-+-+-+-+-------------------------------+\n   |           Checksum            |         Urgent Pointer        |\n   |           校验和(16位)         |          紧急指针(16位）        |\n   +-------------------------------+---------------+---------------+\n   |                    Options                    |    Padding    |\n   +-----------------------------------------------+---------------+\n   |                             data                              |\n   +---------------------------------------------------------------+\n- Sequence Number: seq,本报文段所发送的数据的第1个字节的序号。解决的是包乱序的问题\n- Acknowledgment Number: ack,接受的seq+1。即解决是否丢包的问题\n- ACK(Acknowledgement Number): 根据ack确认收到的数据\n- SYN(Synchronize Sequence Numbers): 建立连接时的同步信息\n- FIN(Finish): 意味将要关闭连接\n- Window:TCP的流量控制，这个值是接收端期望接收的字节数。睡着ack一起发给发送方。\n```\n\n### 可靠传输保证\n\n#### seq+ack\nseq的编号可以保障报传递时候的顺序\nack=seq+1，可以保证是否丢包，同时期望下次请求的seq=ack\n\n##### 三次握手与四次挥手\n\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276603_53.jpg)\n我们通过WireShark抓包验证下：\n\n3次握手抓包\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276617_99.png)\n4次挥手抓包\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276624_40.png)\n\n#### TCP重传机制\nseq+ack可以保证理想情况下的可靠和有序传播，如果遇到丢包或者网络超时这种非理想情况下，就需要重传机制来进行补偿。\n\n重传触发有两种机制：\n1. 时间维度(超时重传)。通过RTT(Round Trip Time)推算出Timeout，RTO（Retransmission TimeOut）。\n2. 数据维度(快速重传)。发送方连续收到3次相同的ack，就重传。\n无论是哪种机制，都需要做一个选择，即丢包之后的数据如何处理？\n例如发送端发送了1,2,3,4,5\n其中3丢包了。\n接收端实际接受了1,2,4,5，同时ack返回了3，但是4,5的ack并没有返回，发送方无法判断4,5是否丢包。\n一种是仅重传timeout的包。也就是第3份数据。\n另一种是重传timeout后所有的数据，也就是第3，4，5这三份数据。\n\n##### SACK(Selective Acknowledgment)\n在TCP头里加一个SACK,SACK存储的是收到的数据碎片，如下图所示。\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276654_94.jpg)\n   \n### 流量控制\n在保证可靠传输的情况下，我们还需要根据网络拥堵情况与数据处理速度来进行流量控制，防止出现阻塞丢包的情况。\n#### 滑动窗口\n滑动窗口类似`背压`的作用，接收端通过传给发送端window大小，从而控制发送端发送数据的大小。\n滑动窗口分为接受窗口，发送窗口。\n对于TCP字节流，分为4部分:  \n1. 已发送且已ack\n2. 已发送但未ack\n3. 未发送但对方可接受\n4. 对方未允许发送  \n\n其中2和3即是发送窗口。\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276663_14.png)\n\n下面是一个完整的请求实例：\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276671_32.png)\n\n#### 拥塞控制\n\n滑动窗口只解决的客户端处理数据的能力，TCP协议还对拥堵控制进行一些管控。\nTCP通过通信双方维护一个拥塞窗口（cwnd，congesion window）值来决定发送速率。网络越阻塞，cwnd值越小，发送越缓慢。\n\n拥塞控制一般以慢热启动，即刚连接时，速率较慢，根据网络情况，指数级的增加cwnd值。\n当到达ssthresh（slow start threshold，一般65535字节）后会运用拥塞避免算法进行一个线性增加，直至一个最佳的速率。\n当然还有很多算法没有介绍，但最终的目的都是为了结合网络情况找到一个合适的传输速率、\n\n\n----\n## 参考文献\n1. [TCP 的那些事儿](https://coolshell.cn/articles/11564.html) \n2. https://zh.wikipedia.org/wiki/TCP/IP%E5%8D%8F%E8%AE%AE%E6%97%8F\n3. https://support.huawei.com/hedex/pages/EDOC100010596730006905/04/EDOC100010596730006905/04/resources/message/cd_feature_cover.html\n4. [码出高效](https://www.amazon.cn/dp/B07HCDC3C2/ref=sr_1_1?s=books&ie=UTF8&qid=1546455236&sr=1-1&keywords=%E7%A0%81%E5%87%BA%E9%AB%98%E6%95%88)\n\n","source":"_posts/网络模型与tcp协议.md","raw":"---\ntitle: 网络模型与tcp协议\ncategories: Hexo教程\ndate: 2019-03-14 15:25:33\ntags: [\"tcp\"]\ndescription: 网络模型与tcp协议\n---\n\n\nOSI模型是ISO制定的网络模型规范，而TCP/IP模型是实际中更通用的协议族。\n\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276540_10.png)\n\n\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276563_65.png)\n\n一个网络请求的顺序如下:\n即IP路由寻址，再根据MAC地址确认目标机器，然后通过TCP/UDP进行端口数据传输，最后通过应用层协议解析数据。\nMAC地址可以使用`ifconfig`，osx系统可以用`networksetup -listallhardwareports`,ether即MAC地址。\n\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276575_7.png)\n\n\n## 以太帧\n在TCP/IP模型中，数据是自顶向下包装的。最后的一个以太网帧如下结构\n\n\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276585_16.png)\n\n## IP\nIP是无连接，无状态，不保证发送的包是否有序到达。\n```$xslt\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |Version|  IHL  |Type of Service|          Total Length         |\n   |版本号  | 头长度 |  服务类型(8位) |           总长度(16位)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |         Identification        |Flags   |    Fragment Offset   |\n   |            标识(16位）         |标志(3位)|      分偏移段(13位)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  Time to Live |    Protocol   |         Header Checksum       |\n   |  生存时间(8位) | 挂载协议标识(8位)|            校验和(16位)\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                       Source Address                          |\n   |                        源IP地址(16位）                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                    Destination Address                        |\n   |                      目标IP地址(16位)                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                    Options                    |    Padding    |\n   |                      选项                      |     填充      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                             Data                              |\n   |                          TCP/UDP数据                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n         \n- Version: IPv4/IPv6\n- Total Length: IP报文头与数据总长度，<=MTU(Maximum Transmission Unit,以太网一般1500字节)\n- Identification：分片后+1，用于分片重组\n- Flags：3bit, 第一位0，第二位0可以分片1不可分片，第三位0最后一片，1不是最后一片\n- Fragment Offset: 分片后再原组中的相对偏移量\n- Time to Live: 可经过最大的路由器数\n- Protocol: 下一层协议，ICMP/TCP/UDP    \n```\n      \n## TCP\n\n> Transmission Control Protocol (TCP): TCP provides reliable, ordered, and error-checked delivery of a stream of octets (bytes) between applications running on hosts communicating via an IP network\n>\nTCP是面向连接、确保数据在端对端可靠传输的协议。\n```$xslt\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-------------------------------+-------------------------------+\n   |          Source Port          |       Destination Port        |\n   |        源机器端口号(16位)        |      目标机器端口号(16位)       |\n   +-------------------------------+-------------------------------+\n   |                        Sequence Number                        |\n   |                        序列号(32位）seq=？                      |\n   +---------------------------------------------------------------+\n   |                    Acknowledgment Number                      |\n   |                     确认序号(32位）ack=？                       |\n   +-------+-----------+-+-+-+-+-+-+-------------------------------+\n   |  Data |           |U|A|P|R|S|F|                               |\n   | Offset| Reserved  |R|C|S|S|Y|I|            Window             |\n   |       |           |G|K|H|T|N|N|                               |\n   |  头部  |           |           |                               |\n   |  长度  |   保留    |    FALG   |          滑动窗口大小           |\n   | (4位) |   (6位）   |           |           （16位）             |\n   +-------+-----------+-+-+-+-+-+-+-------------------------------+\n   |           Checksum            |         Urgent Pointer        |\n   |           校验和(16位)         |          紧急指针(16位）        |\n   +-------------------------------+---------------+---------------+\n   |                    Options                    |    Padding    |\n   +-----------------------------------------------+---------------+\n   |                             data                              |\n   +---------------------------------------------------------------+\n- Sequence Number: seq,本报文段所发送的数据的第1个字节的序号。解决的是包乱序的问题\n- Acknowledgment Number: ack,接受的seq+1。即解决是否丢包的问题\n- ACK(Acknowledgement Number): 根据ack确认收到的数据\n- SYN(Synchronize Sequence Numbers): 建立连接时的同步信息\n- FIN(Finish): 意味将要关闭连接\n- Window:TCP的流量控制，这个值是接收端期望接收的字节数。睡着ack一起发给发送方。\n```\n\n### 可靠传输保证\n\n#### seq+ack\nseq的编号可以保障报传递时候的顺序\nack=seq+1，可以保证是否丢包，同时期望下次请求的seq=ack\n\n##### 三次握手与四次挥手\n\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276603_53.jpg)\n我们通过WireShark抓包验证下：\n\n3次握手抓包\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276617_99.png)\n4次挥手抓包\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276624_40.png)\n\n#### TCP重传机制\nseq+ack可以保证理想情况下的可靠和有序传播，如果遇到丢包或者网络超时这种非理想情况下，就需要重传机制来进行补偿。\n\n重传触发有两种机制：\n1. 时间维度(超时重传)。通过RTT(Round Trip Time)推算出Timeout，RTO（Retransmission TimeOut）。\n2. 数据维度(快速重传)。发送方连续收到3次相同的ack，就重传。\n无论是哪种机制，都需要做一个选择，即丢包之后的数据如何处理？\n例如发送端发送了1,2,3,4,5\n其中3丢包了。\n接收端实际接受了1,2,4,5，同时ack返回了3，但是4,5的ack并没有返回，发送方无法判断4,5是否丢包。\n一种是仅重传timeout的包。也就是第3份数据。\n另一种是重传timeout后所有的数据，也就是第3，4，5这三份数据。\n\n##### SACK(Selective Acknowledgment)\n在TCP头里加一个SACK,SACK存储的是收到的数据碎片，如下图所示。\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276654_94.jpg)\n   \n### 流量控制\n在保证可靠传输的情况下，我们还需要根据网络拥堵情况与数据处理速度来进行流量控制，防止出现阻塞丢包的情况。\n#### 滑动窗口\n滑动窗口类似`背压`的作用，接收端通过传给发送端window大小，从而控制发送端发送数据的大小。\n滑动窗口分为接受窗口，发送窗口。\n对于TCP字节流，分为4部分:  \n1. 已发送且已ack\n2. 已发送但未ack\n3. 未发送但对方可接受\n4. 对方未允许发送  \n\n其中2和3即是发送窗口。\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276663_14.png)\n\n下面是一个完整的请求实例：\n![图片描述](/tfl/pictures/201901/tapd_20091751_1547276671_32.png)\n\n#### 拥塞控制\n\n滑动窗口只解决的客户端处理数据的能力，TCP协议还对拥堵控制进行一些管控。\nTCP通过通信双方维护一个拥塞窗口（cwnd，congesion window）值来决定发送速率。网络越阻塞，cwnd值越小，发送越缓慢。\n\n拥塞控制一般以慢热启动，即刚连接时，速率较慢，根据网络情况，指数级的增加cwnd值。\n当到达ssthresh（slow start threshold，一般65535字节）后会运用拥塞避免算法进行一个线性增加，直至一个最佳的速率。\n当然还有很多算法没有介绍，但最终的目的都是为了结合网络情况找到一个合适的传输速率、\n\n\n----\n## 参考文献\n1. [TCP 的那些事儿](https://coolshell.cn/articles/11564.html) \n2. https://zh.wikipedia.org/wiki/TCP/IP%E5%8D%8F%E8%AE%AE%E6%97%8F\n3. https://support.huawei.com/hedex/pages/EDOC100010596730006905/04/EDOC100010596730006905/04/resources/message/cd_feature_cover.html\n4. [码出高效](https://www.amazon.cn/dp/B07HCDC3C2/ref=sr_1_1?s=books&ie=UTF8&qid=1546455236&sr=1-1&keywords=%E7%A0%81%E5%87%BA%E9%AB%98%E6%95%88)\n\n","slug":"网络模型与tcp协议","published":1,"updated":"2021-09-29T10:29:58.738Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv7i9bqy000q6o9kiw99r451","content":"<p>OSI模型是ISO制定的网络模型规范，而TCP/IP模型是实际中更通用的协议族。</p>\n<p><img src=\"/tfl/pictures/201901/tapd_20091751_1547276540_10.png\" alt=\"图片描述\"></p>\n<p><img src=\"/tfl/pictures/201901/tapd_20091751_1547276563_65.png\" alt=\"图片描述\"></p>\n<p>一个网络请求的顺序如下:<br>即IP路由寻址，再根据MAC地址确认目标机器，然后通过TCP/UDP进行端口数据传输，最后通过应用层协议解析数据。<br>MAC地址可以使用<code>ifconfig</code>，osx系统可以用<code>networksetup -listallhardwareports</code>,ether即MAC地址。</p>\n<p><img src=\"/tfl/pictures/201901/tapd_20091751_1547276575_7.png\" alt=\"图片描述\"></p>\n<h2 id=\"以太帧\"><a href=\"#以太帧\" class=\"headerlink\" title=\"以太帧\"></a>以太帧</h2><p>在TCP/IP模型中，数据是自顶向下包装的。最后的一个以太网帧如下结构</p>\n<p><img src=\"/tfl/pictures/201901/tapd_20091751_1547276585_16.png\" alt=\"图片描述\"></p>\n<h2 id=\"IP\"><a href=\"#IP\" class=\"headerlink\" title=\"IP\"></a>IP</h2><p>IP是无连接，无状态，不保证发送的包是否有序到达。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</div><div class=\"line\">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class=\"line\">   |Version|  IHL  |Type of Service|          Total Length         |</div><div class=\"line\">   |版本号  | 头长度 |  服务类型(8位) |           总长度(16位)</div><div class=\"line\">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class=\"line\">   |         Identification        |Flags   |    Fragment Offset   |</div><div class=\"line\">   |            标识(16位）         |标志(3位)|      分偏移段(13位)</div><div class=\"line\">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class=\"line\">   |  Time to Live |    Protocol   |         Header Checksum       |</div><div class=\"line\">   |  生存时间(8位) | 挂载协议标识(8位)|            校验和(16位)</div><div class=\"line\">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class=\"line\">   |                       Source Address                          |</div><div class=\"line\">   |                        源IP地址(16位）                          |</div><div class=\"line\">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class=\"line\">   |                    Destination Address                        |</div><div class=\"line\">   |                      目标IP地址(16位)                           |</div><div class=\"line\">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class=\"line\">   |                    Options                    |    Padding    |</div><div class=\"line\">   |                      选项                      |     填充      |</div><div class=\"line\">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class=\"line\">   |                             Data                              |</div><div class=\"line\">   |                          TCP/UDP数据                           |</div><div class=\"line\">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class=\"line\">         </div><div class=\"line\">- Version: IPv4/IPv6</div><div class=\"line\">- Total Length: IP报文头与数据总长度，&lt;=MTU(Maximum Transmission Unit,以太网一般1500字节)</div><div class=\"line\">- Identification：分片后+1，用于分片重组</div><div class=\"line\">- Flags：3bit, 第一位0，第二位0可以分片1不可分片，第三位0最后一片，1不是最后一片</div><div class=\"line\">- Fragment Offset: 分片后再原组中的相对偏移量</div><div class=\"line\">- Time to Live: 可经过最大的路由器数</div><div class=\"line\">- Protocol: 下一层协议，ICMP/TCP/UDP</div></pre></td></tr></table></figure></p>\n<h2 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h2><blockquote>\n<p>Transmission Control Protocol (TCP): TCP provides reliable, ordered, and error-checked delivery of a stream of octets (bytes) between applications running on hosts communicating via an IP network</p>\n<p>TCP是面向连接、确保数据在端对端可靠传输的协议。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</div><div class=\"line\">   +-------------------------------+-------------------------------+</div><div class=\"line\">   |          Source Port          |       Destination Port        |</div><div class=\"line\">   |        源机器端口号(16位)        |      目标机器端口号(16位)       |</div><div class=\"line\">   +-------------------------------+-------------------------------+</div><div class=\"line\">   |                        Sequence Number                        |</div><div class=\"line\">   |                        序列号(32位）seq=？                      |</div><div class=\"line\">   +---------------------------------------------------------------+</div><div class=\"line\">   |                    Acknowledgment Number                      |</div><div class=\"line\">   |                     确认序号(32位）ack=？                       |</div><div class=\"line\">   +-------+-----------+-+-+-+-+-+-+-------------------------------+</div><div class=\"line\">   |  Data |           |U|A|P|R|S|F|                               |</div><div class=\"line\">   | Offset| Reserved  |R|C|S|S|Y|I|            Window             |</div><div class=\"line\">   |       |           |G|K|H|T|N|N|                               |</div><div class=\"line\">   |  头部  |           |           |                               |</div><div class=\"line\">   |  长度  |   保留    |    FALG   |          滑动窗口大小           |</div><div class=\"line\">   | (4位) |   (6位）   |           |           （16位）             |</div><div class=\"line\">   +-------+-----------+-+-+-+-+-+-+-------------------------------+</div><div class=\"line\">   |           Checksum            |         Urgent Pointer        |</div><div class=\"line\">   |           校验和(16位)         |          紧急指针(16位）        |</div><div class=\"line\">   +-------------------------------+---------------+---------------+</div><div class=\"line\">   |                    Options                    |    Padding    |</div><div class=\"line\">   +-----------------------------------------------+---------------+</div><div class=\"line\">   |                             data                              |</div><div class=\"line\">   +---------------------------------------------------------------+</div><div class=\"line\">- Sequence Number: seq,本报文段所发送的数据的第1个字节的序号。解决的是包乱序的问题</div><div class=\"line\">- Acknowledgment Number: ack,接受的seq+1。即解决是否丢包的问题</div><div class=\"line\">- ACK(Acknowledgement Number): 根据ack确认收到的数据</div><div class=\"line\">- SYN(Synchronize Sequence Numbers): 建立连接时的同步信息</div><div class=\"line\">- FIN(Finish): 意味将要关闭连接</div><div class=\"line\">- Window:TCP的流量控制，这个值是接收端期望接收的字节数。睡着ack一起发给发送方。</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"可靠传输保证\"><a href=\"#可靠传输保证\" class=\"headerlink\" title=\"可靠传输保证\"></a>可靠传输保证</h3><h4 id=\"seq-ack\"><a href=\"#seq-ack\" class=\"headerlink\" title=\"seq+ack\"></a>seq+ack</h4><p>seq的编号可以保障报传递时候的顺序<br>ack=seq+1，可以保证是否丢包，同时期望下次请求的seq=ack</p>\n<h5 id=\"三次握手与四次挥手\"><a href=\"#三次握手与四次挥手\" class=\"headerlink\" title=\"三次握手与四次挥手\"></a>三次握手与四次挥手</h5><p><img src=\"/tfl/pictures/201901/tapd_20091751_1547276603_53.jpg\" alt=\"图片描述\"><br>我们通过WireShark抓包验证下：</p>\n<p>3次握手抓包<br><img src=\"/tfl/pictures/201901/tapd_20091751_1547276617_99.png\" alt=\"图片描述\"><br>4次挥手抓包<br><img src=\"/tfl/pictures/201901/tapd_20091751_1547276624_40.png\" alt=\"图片描述\"></p>\n<h4 id=\"TCP重传机制\"><a href=\"#TCP重传机制\" class=\"headerlink\" title=\"TCP重传机制\"></a>TCP重传机制</h4><p>seq+ack可以保证理想情况下的可靠和有序传播，如果遇到丢包或者网络超时这种非理想情况下，就需要重传机制来进行补偿。</p>\n<p>重传触发有两种机制：</p>\n<ol>\n<li>时间维度(超时重传)。通过RTT(Round Trip Time)推算出Timeout，RTO（Retransmission TimeOut）。</li>\n<li>数据维度(快速重传)。发送方连续收到3次相同的ack，就重传。<br>无论是哪种机制，都需要做一个选择，即丢包之后的数据如何处理？<br>例如发送端发送了1,2,3,4,5<br>其中3丢包了。<br>接收端实际接受了1,2,4,5，同时ack返回了3，但是4,5的ack并没有返回，发送方无法判断4,5是否丢包。<br>一种是仅重传timeout的包。也就是第3份数据。<br>另一种是重传timeout后所有的数据，也就是第3，4，5这三份数据。</li>\n</ol>\n<h5 id=\"SACK-Selective-Acknowledgment\"><a href=\"#SACK-Selective-Acknowledgment\" class=\"headerlink\" title=\"SACK(Selective Acknowledgment)\"></a>SACK(Selective Acknowledgment)</h5><p>在TCP头里加一个SACK,SACK存储的是收到的数据碎片，如下图所示。<br><img src=\"/tfl/pictures/201901/tapd_20091751_1547276654_94.jpg\" alt=\"图片描述\"></p>\n<h3 id=\"流量控制\"><a href=\"#流量控制\" class=\"headerlink\" title=\"流量控制\"></a>流量控制</h3><p>在保证可靠传输的情况下，我们还需要根据网络拥堵情况与数据处理速度来进行流量控制，防止出现阻塞丢包的情况。</p>\n<h4 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h4><p>滑动窗口类似<code>背压</code>的作用，接收端通过传给发送端window大小，从而控制发送端发送数据的大小。<br>滑动窗口分为接受窗口，发送窗口。<br>对于TCP字节流，分为4部分:  </p>\n<ol>\n<li>已发送且已ack</li>\n<li>已发送但未ack</li>\n<li>未发送但对方可接受</li>\n<li>对方未允许发送  </li>\n</ol>\n<p>其中2和3即是发送窗口。<br><img src=\"/tfl/pictures/201901/tapd_20091751_1547276663_14.png\" alt=\"图片描述\"></p>\n<p>下面是一个完整的请求实例：<br><img src=\"/tfl/pictures/201901/tapd_20091751_1547276671_32.png\" alt=\"图片描述\"></p>\n<h4 id=\"拥塞控制\"><a href=\"#拥塞控制\" class=\"headerlink\" title=\"拥塞控制\"></a>拥塞控制</h4><p>滑动窗口只解决的客户端处理数据的能力，TCP协议还对拥堵控制进行一些管控。<br>TCP通过通信双方维护一个拥塞窗口（cwnd，congesion window）值来决定发送速率。网络越阻塞，cwnd值越小，发送越缓慢。</p>\n<p>拥塞控制一般以慢热启动，即刚连接时，速率较慢，根据网络情况，指数级的增加cwnd值。<br>当到达ssthresh（slow start threshold，一般65535字节）后会运用拥塞避免算法进行一个线性增加，直至一个最佳的速率。<br>当然还有很多算法没有介绍，但最终的目的都是为了结合网络情况找到一个合适的传输速率、</p>\n<hr>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><a href=\"https://coolshell.cn/articles/11564.html\" target=\"_blank\" rel=\"external\">TCP 的那些事儿</a> </li>\n<li><a href=\"https://zh.wikipedia.org/wiki/TCP/IP%E5%8D%8F%E8%AE%AE%E6%97%8F\" target=\"_blank\" rel=\"external\">https://zh.wikipedia.org/wiki/TCP/IP%E5%8D%8F%E8%AE%AE%E6%97%8F</a></li>\n<li><a href=\"https://support.huawei.com/hedex/pages/EDOC100010596730006905/04/EDOC100010596730006905/04/resources/message/cd_feature_cover.html\" target=\"_blank\" rel=\"external\">https://support.huawei.com/hedex/pages/EDOC100010596730006905/04/EDOC100010596730006905/04/resources/message/cd_feature_cover.html</a></li>\n<li><a href=\"https://www.amazon.cn/dp/B07HCDC3C2/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1546455236&amp;sr=1-1&amp;keywords=%E7%A0%81%E5%87%BA%E9%AB%98%E6%95%88\" target=\"_blank\" rel=\"external\">码出高效</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>OSI模型是ISO制定的网络模型规范，而TCP/IP模型是实际中更通用的协议族。</p>\n<p><img src=\"/tfl/pictures/201901/tapd_20091751_1547276540_10.png\" alt=\"图片描述\"></p>\n<p><img src=\"/tfl/pictures/201901/tapd_20091751_1547276563_65.png\" alt=\"图片描述\"></p>\n<p>一个网络请求的顺序如下:<br>即IP路由寻址，再根据MAC地址确认目标机器，然后通过TCP/UDP进行端口数据传输，最后通过应用层协议解析数据。<br>MAC地址可以使用<code>ifconfig</code>，osx系统可以用<code>networksetup -listallhardwareports</code>,ether即MAC地址。</p>\n<p><img src=\"/tfl/pictures/201901/tapd_20091751_1547276575_7.png\" alt=\"图片描述\"></p>\n<h2 id=\"以太帧\"><a href=\"#以太帧\" class=\"headerlink\" title=\"以太帧\"></a>以太帧</h2><p>在TCP/IP模型中，数据是自顶向下包装的。最后的一个以太网帧如下结构</p>\n<p><img src=\"/tfl/pictures/201901/tapd_20091751_1547276585_16.png\" alt=\"图片描述\"></p>\n<h2 id=\"IP\"><a href=\"#IP\" class=\"headerlink\" title=\"IP\"></a>IP</h2><p>IP是无连接，无状态，不保证发送的包是否有序到达。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</div><div class=\"line\">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class=\"line\">   |Version|  IHL  |Type of Service|          Total Length         |</div><div class=\"line\">   |版本号  | 头长度 |  服务类型(8位) |           总长度(16位)</div><div class=\"line\">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class=\"line\">   |         Identification        |Flags   |    Fragment Offset   |</div><div class=\"line\">   |            标识(16位）         |标志(3位)|      分偏移段(13位)</div><div class=\"line\">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class=\"line\">   |  Time to Live |    Protocol   |         Header Checksum       |</div><div class=\"line\">   |  生存时间(8位) | 挂载协议标识(8位)|            校验和(16位)</div><div class=\"line\">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class=\"line\">   |                       Source Address                          |</div><div class=\"line\">   |                        源IP地址(16位）                          |</div><div class=\"line\">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class=\"line\">   |                    Destination Address                        |</div><div class=\"line\">   |                      目标IP地址(16位)                           |</div><div class=\"line\">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class=\"line\">   |                    Options                    |    Padding    |</div><div class=\"line\">   |                      选项                      |     填充      |</div><div class=\"line\">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class=\"line\">   |                             Data                              |</div><div class=\"line\">   |                          TCP/UDP数据                           |</div><div class=\"line\">   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</div><div class=\"line\">         </div><div class=\"line\">- Version: IPv4/IPv6</div><div class=\"line\">- Total Length: IP报文头与数据总长度，&lt;=MTU(Maximum Transmission Unit,以太网一般1500字节)</div><div class=\"line\">- Identification：分片后+1，用于分片重组</div><div class=\"line\">- Flags：3bit, 第一位0，第二位0可以分片1不可分片，第三位0最后一片，1不是最后一片</div><div class=\"line\">- Fragment Offset: 分片后再原组中的相对偏移量</div><div class=\"line\">- Time to Live: 可经过最大的路由器数</div><div class=\"line\">- Protocol: 下一层协议，ICMP/TCP/UDP</div></pre></td></tr></table></figure></p>\n<h2 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h2><blockquote>\n<p>Transmission Control Protocol (TCP): TCP provides reliable, ordered, and error-checked delivery of a stream of octets (bytes) between applications running on hosts communicating via an IP network</p>\n<p>TCP是面向连接、确保数据在端对端可靠传输的协议。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</div><div class=\"line\">   +-------------------------------+-------------------------------+</div><div class=\"line\">   |          Source Port          |       Destination Port        |</div><div class=\"line\">   |        源机器端口号(16位)        |      目标机器端口号(16位)       |</div><div class=\"line\">   +-------------------------------+-------------------------------+</div><div class=\"line\">   |                        Sequence Number                        |</div><div class=\"line\">   |                        序列号(32位）seq=？                      |</div><div class=\"line\">   +---------------------------------------------------------------+</div><div class=\"line\">   |                    Acknowledgment Number                      |</div><div class=\"line\">   |                     确认序号(32位）ack=？                       |</div><div class=\"line\">   +-------+-----------+-+-+-+-+-+-+-------------------------------+</div><div class=\"line\">   |  Data |           |U|A|P|R|S|F|                               |</div><div class=\"line\">   | Offset| Reserved  |R|C|S|S|Y|I|            Window             |</div><div class=\"line\">   |       |           |G|K|H|T|N|N|                               |</div><div class=\"line\">   |  头部  |           |           |                               |</div><div class=\"line\">   |  长度  |   保留    |    FALG   |          滑动窗口大小           |</div><div class=\"line\">   | (4位) |   (6位）   |           |           （16位）             |</div><div class=\"line\">   +-------+-----------+-+-+-+-+-+-+-------------------------------+</div><div class=\"line\">   |           Checksum            |         Urgent Pointer        |</div><div class=\"line\">   |           校验和(16位)         |          紧急指针(16位）        |</div><div class=\"line\">   +-------------------------------+---------------+---------------+</div><div class=\"line\">   |                    Options                    |    Padding    |</div><div class=\"line\">   +-----------------------------------------------+---------------+</div><div class=\"line\">   |                             data                              |</div><div class=\"line\">   +---------------------------------------------------------------+</div><div class=\"line\">- Sequence Number: seq,本报文段所发送的数据的第1个字节的序号。解决的是包乱序的问题</div><div class=\"line\">- Acknowledgment Number: ack,接受的seq+1。即解决是否丢包的问题</div><div class=\"line\">- ACK(Acknowledgement Number): 根据ack确认收到的数据</div><div class=\"line\">- SYN(Synchronize Sequence Numbers): 建立连接时的同步信息</div><div class=\"line\">- FIN(Finish): 意味将要关闭连接</div><div class=\"line\">- Window:TCP的流量控制，这个值是接收端期望接收的字节数。睡着ack一起发给发送方。</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"可靠传输保证\"><a href=\"#可靠传输保证\" class=\"headerlink\" title=\"可靠传输保证\"></a>可靠传输保证</h3><h4 id=\"seq-ack\"><a href=\"#seq-ack\" class=\"headerlink\" title=\"seq+ack\"></a>seq+ack</h4><p>seq的编号可以保障报传递时候的顺序<br>ack=seq+1，可以保证是否丢包，同时期望下次请求的seq=ack</p>\n<h5 id=\"三次握手与四次挥手\"><a href=\"#三次握手与四次挥手\" class=\"headerlink\" title=\"三次握手与四次挥手\"></a>三次握手与四次挥手</h5><p><img src=\"/tfl/pictures/201901/tapd_20091751_1547276603_53.jpg\" alt=\"图片描述\"><br>我们通过WireShark抓包验证下：</p>\n<p>3次握手抓包<br><img src=\"/tfl/pictures/201901/tapd_20091751_1547276617_99.png\" alt=\"图片描述\"><br>4次挥手抓包<br><img src=\"/tfl/pictures/201901/tapd_20091751_1547276624_40.png\" alt=\"图片描述\"></p>\n<h4 id=\"TCP重传机制\"><a href=\"#TCP重传机制\" class=\"headerlink\" title=\"TCP重传机制\"></a>TCP重传机制</h4><p>seq+ack可以保证理想情况下的可靠和有序传播，如果遇到丢包或者网络超时这种非理想情况下，就需要重传机制来进行补偿。</p>\n<p>重传触发有两种机制：</p>\n<ol>\n<li>时间维度(超时重传)。通过RTT(Round Trip Time)推算出Timeout，RTO（Retransmission TimeOut）。</li>\n<li>数据维度(快速重传)。发送方连续收到3次相同的ack，就重传。<br>无论是哪种机制，都需要做一个选择，即丢包之后的数据如何处理？<br>例如发送端发送了1,2,3,4,5<br>其中3丢包了。<br>接收端实际接受了1,2,4,5，同时ack返回了3，但是4,5的ack并没有返回，发送方无法判断4,5是否丢包。<br>一种是仅重传timeout的包。也就是第3份数据。<br>另一种是重传timeout后所有的数据，也就是第3，4，5这三份数据。</li>\n</ol>\n<h5 id=\"SACK-Selective-Acknowledgment\"><a href=\"#SACK-Selective-Acknowledgment\" class=\"headerlink\" title=\"SACK(Selective Acknowledgment)\"></a>SACK(Selective Acknowledgment)</h5><p>在TCP头里加一个SACK,SACK存储的是收到的数据碎片，如下图所示。<br><img src=\"/tfl/pictures/201901/tapd_20091751_1547276654_94.jpg\" alt=\"图片描述\"></p>\n<h3 id=\"流量控制\"><a href=\"#流量控制\" class=\"headerlink\" title=\"流量控制\"></a>流量控制</h3><p>在保证可靠传输的情况下，我们还需要根据网络拥堵情况与数据处理速度来进行流量控制，防止出现阻塞丢包的情况。</p>\n<h4 id=\"滑动窗口\"><a href=\"#滑动窗口\" class=\"headerlink\" title=\"滑动窗口\"></a>滑动窗口</h4><p>滑动窗口类似<code>背压</code>的作用，接收端通过传给发送端window大小，从而控制发送端发送数据的大小。<br>滑动窗口分为接受窗口，发送窗口。<br>对于TCP字节流，分为4部分:  </p>\n<ol>\n<li>已发送且已ack</li>\n<li>已发送但未ack</li>\n<li>未发送但对方可接受</li>\n<li>对方未允许发送  </li>\n</ol>\n<p>其中2和3即是发送窗口。<br><img src=\"/tfl/pictures/201901/tapd_20091751_1547276663_14.png\" alt=\"图片描述\"></p>\n<p>下面是一个完整的请求实例：<br><img src=\"/tfl/pictures/201901/tapd_20091751_1547276671_32.png\" alt=\"图片描述\"></p>\n<h4 id=\"拥塞控制\"><a href=\"#拥塞控制\" class=\"headerlink\" title=\"拥塞控制\"></a>拥塞控制</h4><p>滑动窗口只解决的客户端处理数据的能力，TCP协议还对拥堵控制进行一些管控。<br>TCP通过通信双方维护一个拥塞窗口（cwnd，congesion window）值来决定发送速率。网络越阻塞，cwnd值越小，发送越缓慢。</p>\n<p>拥塞控制一般以慢热启动，即刚连接时，速率较慢，根据网络情况，指数级的增加cwnd值。<br>当到达ssthresh（slow start threshold，一般65535字节）后会运用拥塞避免算法进行一个线性增加，直至一个最佳的速率。<br>当然还有很多算法没有介绍，但最终的目的都是为了结合网络情况找到一个合适的传输速率、</p>\n<hr>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><ol>\n<li><a href=\"https://coolshell.cn/articles/11564.html\" target=\"_blank\" rel=\"external\">TCP 的那些事儿</a> </li>\n<li><a href=\"https://zh.wikipedia.org/wiki/TCP/IP%E5%8D%8F%E8%AE%AE%E6%97%8F\" target=\"_blank\" rel=\"external\">https://zh.wikipedia.org/wiki/TCP/IP%E5%8D%8F%E8%AE%AE%E6%97%8F</a></li>\n<li><a href=\"https://support.huawei.com/hedex/pages/EDOC100010596730006905/04/EDOC100010596730006905/04/resources/message/cd_feature_cover.html\" target=\"_blank\" rel=\"external\">https://support.huawei.com/hedex/pages/EDOC100010596730006905/04/EDOC100010596730006905/04/resources/message/cd_feature_cover.html</a></li>\n<li><a href=\"https://www.amazon.cn/dp/B07HCDC3C2/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1546455236&amp;sr=1-1&amp;keywords=%E7%A0%81%E5%87%BA%E9%AB%98%E6%95%88\" target=\"_blank\" rel=\"external\">码出高效</a></li>\n</ol>\n"},{"title":"超过存储范围的数相加","date":"2019-03-15T02:44:07.000Z","description":null,"_content":"\n实现 字符串类型的数字 相加的一个方法\n\n> JavaScript 能表示的最大安全整数是 9007199254740991 (Number.MAX_SAFE_INTEGER) 超出范围就会发生精度丢失\n\n```\nfunction add(a,b){\n    // 保存最终结果\n    var res='';\n\n    // 保存两位相加的结果 和 进位值\n    var c=0;\n\n    // 字符串转数组\n    a = a.split('');\n\tb = b.split('');\n\n    while (a.length || b.length || c){\n        // ~~ 用来把String类型 转为 Number类型\n        // 把两位相加的结果 和 进位值相加\n        c += ~~a.pop() + ~~b.pop();\n\n        // 取余，把余数拼接到最终结果中\n        res = c % 10 + res;\n\n        // 保存进位，true 或者 false\n        c = c>9;\n    }\n    return res;\n}\n```\n\n原文和资料\n[https://blog.csdn.net/FE_dev/article/details/80079372](https://blog.csdn.net/FE_dev/article/details/80079372)\n[https://www.cnblogs.com/happy1992/p/7064114.html](https://www.cnblogs.com/happy1992/p/7064114.html)","source":"_posts/超过存储范围的数相加.md","raw":"---\ntitle: 超过存储范围的数相加\ncategories: 面试题\ndate: 2019-03-15 10:44:07\ntags: [\"面试\"]\ndescription: \n---\n\n实现 字符串类型的数字 相加的一个方法\n\n> JavaScript 能表示的最大安全整数是 9007199254740991 (Number.MAX_SAFE_INTEGER) 超出范围就会发生精度丢失\n\n```\nfunction add(a,b){\n    // 保存最终结果\n    var res='';\n\n    // 保存两位相加的结果 和 进位值\n    var c=0;\n\n    // 字符串转数组\n    a = a.split('');\n\tb = b.split('');\n\n    while (a.length || b.length || c){\n        // ~~ 用来把String类型 转为 Number类型\n        // 把两位相加的结果 和 进位值相加\n        c += ~~a.pop() + ~~b.pop();\n\n        // 取余，把余数拼接到最终结果中\n        res = c % 10 + res;\n\n        // 保存进位，true 或者 false\n        c = c>9;\n    }\n    return res;\n}\n```\n\n原文和资料\n[https://blog.csdn.net/FE_dev/article/details/80079372](https://blog.csdn.net/FE_dev/article/details/80079372)\n[https://www.cnblogs.com/happy1992/p/7064114.html](https://www.cnblogs.com/happy1992/p/7064114.html)","slug":"超过存储范围的数相加","published":1,"updated":"2021-09-29T10:29:58.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv7i9bqz000s6o9kbcl0k5tv","content":"<p>实现 字符串类型的数字 相加的一个方法</p>\n<blockquote>\n<p>JavaScript 能表示的最大安全整数是 9007199254740991 (Number.MAX_SAFE_INTEGER) 超出范围就会发生精度丢失</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">function add(a,b)&#123;</div><div class=\"line\">    // 保存最终结果</div><div class=\"line\">    var res=&apos;&apos;;</div><div class=\"line\"></div><div class=\"line\">    // 保存两位相加的结果 和 进位值</div><div class=\"line\">    var c=0;</div><div class=\"line\"></div><div class=\"line\">    // 字符串转数组</div><div class=\"line\">    a = a.split(&apos;&apos;);</div><div class=\"line\">\tb = b.split(&apos;&apos;);</div><div class=\"line\"></div><div class=\"line\">    while (a.length || b.length || c)&#123;</div><div class=\"line\">        // ~~ 用来把String类型 转为 Number类型</div><div class=\"line\">        // 把两位相加的结果 和 进位值相加</div><div class=\"line\">        c += ~~a.pop() + ~~b.pop();</div><div class=\"line\"></div><div class=\"line\">        // 取余，把余数拼接到最终结果中</div><div class=\"line\">        res = c % 10 + res;</div><div class=\"line\"></div><div class=\"line\">        // 保存进位，true 或者 false</div><div class=\"line\">        c = c&gt;9;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return res;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>原文和资料<br><a href=\"https://blog.csdn.net/FE_dev/article/details/80079372\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/FE_dev/article/details/80079372</a><br><a href=\"https://www.cnblogs.com/happy1992/p/7064114.html\" target=\"_blank\" rel=\"external\">https://www.cnblogs.com/happy1992/p/7064114.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>实现 字符串类型的数字 相加的一个方法</p>\n<blockquote>\n<p>JavaScript 能表示的最大安全整数是 9007199254740991 (Number.MAX_SAFE_INTEGER) 超出范围就会发生精度丢失</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">function add(a,b)&#123;</div><div class=\"line\">    // 保存最终结果</div><div class=\"line\">    var res=&apos;&apos;;</div><div class=\"line\"></div><div class=\"line\">    // 保存两位相加的结果 和 进位值</div><div class=\"line\">    var c=0;</div><div class=\"line\"></div><div class=\"line\">    // 字符串转数组</div><div class=\"line\">    a = a.split(&apos;&apos;);</div><div class=\"line\">\tb = b.split(&apos;&apos;);</div><div class=\"line\"></div><div class=\"line\">    while (a.length || b.length || c)&#123;</div><div class=\"line\">        // ~~ 用来把String类型 转为 Number类型</div><div class=\"line\">        // 把两位相加的结果 和 进位值相加</div><div class=\"line\">        c += ~~a.pop() + ~~b.pop();</div><div class=\"line\"></div><div class=\"line\">        // 取余，把余数拼接到最终结果中</div><div class=\"line\">        res = c % 10 + res;</div><div class=\"line\"></div><div class=\"line\">        // 保存进位，true 或者 false</div><div class=\"line\">        c = c&gt;9;</div><div class=\"line\">    &#125;</div><div class=\"line\">    return res;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>原文和资料<br><a href=\"https://blog.csdn.net/FE_dev/article/details/80079372\" target=\"_blank\" rel=\"external\">https://blog.csdn.net/FE_dev/article/details/80079372</a><br><a href=\"https://www.cnblogs.com/happy1992/p/7064114.html\" target=\"_blank\" rel=\"external\">https://www.cnblogs.com/happy1992/p/7064114.html</a></p>\n"},{"title":"防抖和节流","date":"2019-03-15T07:06:48.000Z","description":"防抖和节流","_content":"\n> 防抖（Debouncing）和节流（Throttling）\n\n针对高频度触发事件问题（例如页面 scroll ，屏幕 resize，监听用户输入等）\n\n\n### 防抖（Debouncing）\n防抖技术即是可以把多个顺序地调用合并成一次，也就是在一定时间内，规定事件被触发的次数。\n\n```\n// 防抖动函数\nfunction debounce(func, wait, immediate) {\n    var timeout;\n    return function() {\n        var context = this, args = arguments;\n        var later = function() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n};\n \nvar myEfficientFn = debounce(function() {\n    // 滚动中的真正的操作\n}, 250);\n \n// 绑定监听\nwindow.addEventListener('resize', myEfficientFn);\n\n```\n\n###节流（Throttling）\n当我们做图片懒加载（lazyload）时，需要通过滚动位置，实时显示图片时，如果使用防抖函数，懒加载（lazyload）函数将会不断被延时，\n只有停下来的时候才会被执行，对于这种需要实时触发事件的情况，就显得不是很友好了。\n下面开始介绍函数节流，通过设定时间片，控制事件函数间断性的触发。\n\n\n节流函数，只允许一个函数在 X 毫秒内执行一次。\n\n```\n// 简单的节流函数\nfunction throttle(func, wait, mustRun) {\n    var timeout,\n        startTime = new Date();\n \n    return function() {\n        var context = this,\n            args = arguments,\n            curTime = new Date();\n \n        clearTimeout(timeout);\n        // 如果达到了规定的触发时间间隔，触发 handler\n        if(curTime - startTime >= mustRun){\n            func.apply(context,args);\n            startTime = curTime;\n        // 没达到触发间隔，重新设定定时器\n        }else{\n            timeout = setTimeout(func, wait);\n        }\n    };\n};\n// 实际想绑定在 scroll 事件上的 handler\nfunction realFunc(){\n    console.log(\"Success\");\n}\n// 采用了节流函数\nwindow.addEventListener('scroll',throttle(realFunc,500,1000));\n\n```\n\n###requestAnimationFrame触发滚动事件\nwindow.requestAnimationFrame() 这个方法是用来在页面重绘之前，通知浏览器调用一个指定的函数。这个方法接受一个函数为参，该函数会在重绘前调用。\nrAF 常用于 web 动画的制作，用于准确控制页面的帧刷新渲染，让动画效果更加流畅，当然它的作用不仅仅局限于动画制作，我们可以利用它的特性将它视为一个定时器。（当然它不是定时器）\n通常来说，rAF 被调用的频率是每秒 60 次，也就是 1000/60 ，触发频率大概是 16.7ms 。（当执行复杂操作时，当它发现无法维持 60fps 的频率时，它会把频率降低到 30fps 来保持帧数的稳定。）\n\n```\n\nvar ticking = false; // rAF 触发锁\n \nfunction onScroll(){\n  if(!ticking) {\n    requestAnimationFrame(realFunc);\n    ticking = true;\n  }\n}\n \nfunction realFunc(){\n    // do something...\n    console.log(\"Success\");\n    ticking = false;\n}\n// 滚动事件监听\nwindow.addEventListener('scroll', onScroll, false);\n\n```","source":"_posts/防抖和节流.md","raw":"---\ntitle: 防抖和节流\ncategories: Javascript\ndate: 2019-03-15 15:06:48\ntags: [\"javascript\"]\ndescription: 防抖和节流\n---\n\n> 防抖（Debouncing）和节流（Throttling）\n\n针对高频度触发事件问题（例如页面 scroll ，屏幕 resize，监听用户输入等）\n\n\n### 防抖（Debouncing）\n防抖技术即是可以把多个顺序地调用合并成一次，也就是在一定时间内，规定事件被触发的次数。\n\n```\n// 防抖动函数\nfunction debounce(func, wait, immediate) {\n    var timeout;\n    return function() {\n        var context = this, args = arguments;\n        var later = function() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        };\n        var callNow = immediate && !timeout;\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n        if (callNow) func.apply(context, args);\n    };\n};\n \nvar myEfficientFn = debounce(function() {\n    // 滚动中的真正的操作\n}, 250);\n \n// 绑定监听\nwindow.addEventListener('resize', myEfficientFn);\n\n```\n\n###节流（Throttling）\n当我们做图片懒加载（lazyload）时，需要通过滚动位置，实时显示图片时，如果使用防抖函数，懒加载（lazyload）函数将会不断被延时，\n只有停下来的时候才会被执行，对于这种需要实时触发事件的情况，就显得不是很友好了。\n下面开始介绍函数节流，通过设定时间片，控制事件函数间断性的触发。\n\n\n节流函数，只允许一个函数在 X 毫秒内执行一次。\n\n```\n// 简单的节流函数\nfunction throttle(func, wait, mustRun) {\n    var timeout,\n        startTime = new Date();\n \n    return function() {\n        var context = this,\n            args = arguments,\n            curTime = new Date();\n \n        clearTimeout(timeout);\n        // 如果达到了规定的触发时间间隔，触发 handler\n        if(curTime - startTime >= mustRun){\n            func.apply(context,args);\n            startTime = curTime;\n        // 没达到触发间隔，重新设定定时器\n        }else{\n            timeout = setTimeout(func, wait);\n        }\n    };\n};\n// 实际想绑定在 scroll 事件上的 handler\nfunction realFunc(){\n    console.log(\"Success\");\n}\n// 采用了节流函数\nwindow.addEventListener('scroll',throttle(realFunc,500,1000));\n\n```\n\n###requestAnimationFrame触发滚动事件\nwindow.requestAnimationFrame() 这个方法是用来在页面重绘之前，通知浏览器调用一个指定的函数。这个方法接受一个函数为参，该函数会在重绘前调用。\nrAF 常用于 web 动画的制作，用于准确控制页面的帧刷新渲染，让动画效果更加流畅，当然它的作用不仅仅局限于动画制作，我们可以利用它的特性将它视为一个定时器。（当然它不是定时器）\n通常来说，rAF 被调用的频率是每秒 60 次，也就是 1000/60 ，触发频率大概是 16.7ms 。（当执行复杂操作时，当它发现无法维持 60fps 的频率时，它会把频率降低到 30fps 来保持帧数的稳定。）\n\n```\n\nvar ticking = false; // rAF 触发锁\n \nfunction onScroll(){\n  if(!ticking) {\n    requestAnimationFrame(realFunc);\n    ticking = true;\n  }\n}\n \nfunction realFunc(){\n    // do something...\n    console.log(\"Success\");\n    ticking = false;\n}\n// 滚动事件监听\nwindow.addEventListener('scroll', onScroll, false);\n\n```","slug":"防抖和节流","published":1,"updated":"2021-09-29T10:29:58.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckv7i9br1000x6o9k2kynsi6l","content":"<blockquote>\n<p>防抖（Debouncing）和节流（Throttling）</p>\n</blockquote>\n<p>针对高频度触发事件问题（例如页面 scroll ，屏幕 resize，监听用户输入等）</p>\n<h3 id=\"防抖（Debouncing）\"><a href=\"#防抖（Debouncing）\" class=\"headerlink\" title=\"防抖（Debouncing）\"></a>防抖（Debouncing）</h3><p>防抖技术即是可以把多个顺序地调用合并成一次，也就是在一定时间内，规定事件被触发的次数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 防抖动函数</div><div class=\"line\">function debounce(func, wait, immediate) &#123;</div><div class=\"line\">    var timeout;</div><div class=\"line\">    return function() &#123;</div><div class=\"line\">        var context = this, args = arguments;</div><div class=\"line\">        var later = function() &#123;</div><div class=\"line\">            timeout = null;</div><div class=\"line\">            if (!immediate) func.apply(context, args);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        var callNow = immediate &amp;&amp; !timeout;</div><div class=\"line\">        clearTimeout(timeout);</div><div class=\"line\">        timeout = setTimeout(later, wait);</div><div class=\"line\">        if (callNow) func.apply(context, args);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\">var myEfficientFn = debounce(function() &#123;</div><div class=\"line\">    // 滚动中的真正的操作</div><div class=\"line\">&#125;, 250);</div><div class=\"line\"> </div><div class=\"line\">// 绑定监听</div><div class=\"line\">window.addEventListener(&apos;resize&apos;, myEfficientFn);</div></pre></td></tr></table></figure>\n<p>###节流（Throttling）<br>当我们做图片懒加载（lazyload）时，需要通过滚动位置，实时显示图片时，如果使用防抖函数，懒加载（lazyload）函数将会不断被延时，<br>只有停下来的时候才会被执行，对于这种需要实时触发事件的情况，就显得不是很友好了。<br>下面开始介绍函数节流，通过设定时间片，控制事件函数间断性的触发。</p>\n<p>节流函数，只允许一个函数在 X 毫秒内执行一次。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 简单的节流函数</div><div class=\"line\">function throttle(func, wait, mustRun) &#123;</div><div class=\"line\">    var timeout,</div><div class=\"line\">        startTime = new Date();</div><div class=\"line\"> </div><div class=\"line\">    return function() &#123;</div><div class=\"line\">        var context = this,</div><div class=\"line\">            args = arguments,</div><div class=\"line\">            curTime = new Date();</div><div class=\"line\"> </div><div class=\"line\">        clearTimeout(timeout);</div><div class=\"line\">        // 如果达到了规定的触发时间间隔，触发 handler</div><div class=\"line\">        if(curTime - startTime &gt;= mustRun)&#123;</div><div class=\"line\">            func.apply(context,args);</div><div class=\"line\">            startTime = curTime;</div><div class=\"line\">        // 没达到触发间隔，重新设定定时器</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            timeout = setTimeout(func, wait);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\">// 实际想绑定在 scroll 事件上的 handler</div><div class=\"line\">function realFunc()&#123;</div><div class=\"line\">    console.log(&quot;Success&quot;);</div><div class=\"line\">&#125;</div><div class=\"line\">// 采用了节流函数</div><div class=\"line\">window.addEventListener(&apos;scroll&apos;,throttle(realFunc,500,1000));</div></pre></td></tr></table></figure>\n<p>###requestAnimationFrame触发滚动事件<br>window.requestAnimationFrame() 这个方法是用来在页面重绘之前，通知浏览器调用一个指定的函数。这个方法接受一个函数为参，该函数会在重绘前调用。<br>rAF 常用于 web 动画的制作，用于准确控制页面的帧刷新渲染，让动画效果更加流畅，当然它的作用不仅仅局限于动画制作，我们可以利用它的特性将它视为一个定时器。（当然它不是定时器）<br>通常来说，rAF 被调用的频率是每秒 60 次，也就是 1000/60 ，触发频率大概是 16.7ms 。（当执行复杂操作时，当它发现无法维持 60fps 的频率时，它会把频率降低到 30fps 来保持帧数的稳定。）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">var ticking = false; // rAF 触发锁</div><div class=\"line\"> </div><div class=\"line\">function onScroll()&#123;</div><div class=\"line\">  if(!ticking) &#123;</div><div class=\"line\">    requestAnimationFrame(realFunc);</div><div class=\"line\">    ticking = true;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">function realFunc()&#123;</div><div class=\"line\">    // do something...</div><div class=\"line\">    console.log(&quot;Success&quot;);</div><div class=\"line\">    ticking = false;</div><div class=\"line\">&#125;</div><div class=\"line\">// 滚动事件监听</div><div class=\"line\">window.addEventListener(&apos;scroll&apos;, onScroll, false);</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>防抖（Debouncing）和节流（Throttling）</p>\n</blockquote>\n<p>针对高频度触发事件问题（例如页面 scroll ，屏幕 resize，监听用户输入等）</p>\n<h3 id=\"防抖（Debouncing）\"><a href=\"#防抖（Debouncing）\" class=\"headerlink\" title=\"防抖（Debouncing）\"></a>防抖（Debouncing）</h3><p>防抖技术即是可以把多个顺序地调用合并成一次，也就是在一定时间内，规定事件被触发的次数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 防抖动函数</div><div class=\"line\">function debounce(func, wait, immediate) &#123;</div><div class=\"line\">    var timeout;</div><div class=\"line\">    return function() &#123;</div><div class=\"line\">        var context = this, args = arguments;</div><div class=\"line\">        var later = function() &#123;</div><div class=\"line\">            timeout = null;</div><div class=\"line\">            if (!immediate) func.apply(context, args);</div><div class=\"line\">        &#125;;</div><div class=\"line\">        var callNow = immediate &amp;&amp; !timeout;</div><div class=\"line\">        clearTimeout(timeout);</div><div class=\"line\">        timeout = setTimeout(later, wait);</div><div class=\"line\">        if (callNow) func.apply(context, args);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\">var myEfficientFn = debounce(function() &#123;</div><div class=\"line\">    // 滚动中的真正的操作</div><div class=\"line\">&#125;, 250);</div><div class=\"line\"> </div><div class=\"line\">// 绑定监听</div><div class=\"line\">window.addEventListener(&apos;resize&apos;, myEfficientFn);</div></pre></td></tr></table></figure>\n<p>###节流（Throttling）<br>当我们做图片懒加载（lazyload）时，需要通过滚动位置，实时显示图片时，如果使用防抖函数，懒加载（lazyload）函数将会不断被延时，<br>只有停下来的时候才会被执行，对于这种需要实时触发事件的情况，就显得不是很友好了。<br>下面开始介绍函数节流，通过设定时间片，控制事件函数间断性的触发。</p>\n<p>节流函数，只允许一个函数在 X 毫秒内执行一次。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 简单的节流函数</div><div class=\"line\">function throttle(func, wait, mustRun) &#123;</div><div class=\"line\">    var timeout,</div><div class=\"line\">        startTime = new Date();</div><div class=\"line\"> </div><div class=\"line\">    return function() &#123;</div><div class=\"line\">        var context = this,</div><div class=\"line\">            args = arguments,</div><div class=\"line\">            curTime = new Date();</div><div class=\"line\"> </div><div class=\"line\">        clearTimeout(timeout);</div><div class=\"line\">        // 如果达到了规定的触发时间间隔，触发 handler</div><div class=\"line\">        if(curTime - startTime &gt;= mustRun)&#123;</div><div class=\"line\">            func.apply(context,args);</div><div class=\"line\">            startTime = curTime;</div><div class=\"line\">        // 没达到触发间隔，重新设定定时器</div><div class=\"line\">        &#125;else&#123;</div><div class=\"line\">            timeout = setTimeout(func, wait);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\">// 实际想绑定在 scroll 事件上的 handler</div><div class=\"line\">function realFunc()&#123;</div><div class=\"line\">    console.log(&quot;Success&quot;);</div><div class=\"line\">&#125;</div><div class=\"line\">// 采用了节流函数</div><div class=\"line\">window.addEventListener(&apos;scroll&apos;,throttle(realFunc,500,1000));</div></pre></td></tr></table></figure>\n<p>###requestAnimationFrame触发滚动事件<br>window.requestAnimationFrame() 这个方法是用来在页面重绘之前，通知浏览器调用一个指定的函数。这个方法接受一个函数为参，该函数会在重绘前调用。<br>rAF 常用于 web 动画的制作，用于准确控制页面的帧刷新渲染，让动画效果更加流畅，当然它的作用不仅仅局限于动画制作，我们可以利用它的特性将它视为一个定时器。（当然它不是定时器）<br>通常来说，rAF 被调用的频率是每秒 60 次，也就是 1000/60 ，触发频率大概是 16.7ms 。（当执行复杂操作时，当它发现无法维持 60fps 的频率时，它会把频率降低到 30fps 来保持帧数的稳定。）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">var ticking = false; // rAF 触发锁</div><div class=\"line\"> </div><div class=\"line\">function onScroll()&#123;</div><div class=\"line\">  if(!ticking) &#123;</div><div class=\"line\">    requestAnimationFrame(realFunc);</div><div class=\"line\">    ticking = true;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">function realFunc()&#123;</div><div class=\"line\">    // do something...</div><div class=\"line\">    console.log(&quot;Success&quot;);</div><div class=\"line\">    ticking = false;</div><div class=\"line\">&#125;</div><div class=\"line\">// 滚动事件监听</div><div class=\"line\">window.addEventListener(&apos;scroll&apos;, onScroll, false);</div></pre></td></tr></table></figure>"},{"title":"Github Actions Config","date":"2021-10-26T03:14:51.366Z","_content":"\n\n1. 生成ssh-key\n\n2. 在 blog 仓库 Settings -> Secrets -> Add a new secret 页面上添加生成的私钥\n\n3. 在 your.github.io 仓库 Settings -> Deploy keys -> Add deploy key 页面上添加生成的公钥, 并勾选 Allow write access 选项\n\n4. 编写 Github Actions\n    - 在 blog 仓库根目录下创建 .github/workflows/deploy.yml 文件\n\n```\nname: CI\non:\n  push:\n    branches:\n      - hexo\n\nenv:\n  GIT_USER: Pepsi33\n  GIT_EMAIL: xxx@xx.com\n\njobs:\n  build:\n    name: Build on node ${{ matrix.node_version }} and ${{ matrix.os }}\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        node_version: [12.x]\n\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v1\n        with:\n          ref: hexo\n\n      - name: Use Node.js ${{ matrix.node_version }}\n        uses: actions/setup-node@v1\n        with:\n          version: ${{ matrix.node_version }}\n\n      - name: Configuration environment\n        env:\n          ACTION_DEPLOY_KEY: ${{ secrets.HEXO_DEPLOY_KEY }}\n        run: |\n          sudo timedatectl set-timezone \"Asia/Shanghai\"\n          mkdir -p ~/.ssh/\n          echo \"$ACTION_DEPLOY_KEY\" > ~/.ssh/id_rsa\n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan github.com >> ~/.ssh/known_hosts\n          git config --global user.name $GIT_USER\n          git config --global user.email $GIT_EMAIL\n\n      - name: Install dependencies\n        run: |\n          npm install hexo-cli -g\n          npm install\n\n      - name: Hexo deploy\n        run: |\n          hexo clean\n          hexo d\n```\n","source":"_posts/github actions配置.md","raw":"---\ntitle: Github Actions Config\ndate: 2021-1026-14 11:15:36\ntags: [\"CICD\"]\n---\n\n\n1. 生成ssh-key\n\n2. 在 blog 仓库 Settings -> Secrets -> Add a new secret 页面上添加生成的私钥\n\n3. 在 your.github.io 仓库 Settings -> Deploy keys -> Add deploy key 页面上添加生成的公钥, 并勾选 Allow write access 选项\n\n4. 编写 Github Actions\n    - 在 blog 仓库根目录下创建 .github/workflows/deploy.yml 文件\n\n```\nname: CI\non:\n  push:\n    branches:\n      - hexo\n\nenv:\n  GIT_USER: Pepsi33\n  GIT_EMAIL: xxx@xx.com\n\njobs:\n  build:\n    name: Build on node ${{ matrix.node_version }} and ${{ matrix.os }}\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        os: [ubuntu-latest]\n        node_version: [12.x]\n\n    steps:\n      - name: Checkout source\n        uses: actions/checkout@v1\n        with:\n          ref: hexo\n\n      - name: Use Node.js ${{ matrix.node_version }}\n        uses: actions/setup-node@v1\n        with:\n          version: ${{ matrix.node_version }}\n\n      - name: Configuration environment\n        env:\n          ACTION_DEPLOY_KEY: ${{ secrets.HEXO_DEPLOY_KEY }}\n        run: |\n          sudo timedatectl set-timezone \"Asia/Shanghai\"\n          mkdir -p ~/.ssh/\n          echo \"$ACTION_DEPLOY_KEY\" > ~/.ssh/id_rsa\n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan github.com >> ~/.ssh/known_hosts\n          git config --global user.name $GIT_USER\n          git config --global user.email $GIT_EMAIL\n\n      - name: Install dependencies\n        run: |\n          npm install hexo-cli -g\n          npm install\n\n      - name: Hexo deploy\n        run: |\n          hexo clean\n          hexo d\n```\n","slug":"github actions配置","published":1,"updated":"2021-10-26T03:24:18.466Z","_id":"ckv7imqi200186o9kcg2wettc","comments":1,"layout":"post","photos":[],"link":"","content":"<ol>\n<li><p>生成ssh-key</p>\n</li>\n<li><p>在 blog 仓库 Settings -&gt; Secrets -&gt; Add a new secret 页面上添加生成的私钥</p>\n</li>\n<li><p>在 your.github.io 仓库 Settings -&gt; Deploy keys -&gt; Add deploy key 页面上添加生成的公钥, 并勾选 Allow write access 选项</p>\n</li>\n<li><p>编写 Github Actions</p>\n<ul>\n<li>在 blog 仓库根目录下创建 .github/workflows/deploy.yml 文件</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">name: CI</div><div class=\"line\">on:</div><div class=\"line\">  push:</div><div class=\"line\">    branches:</div><div class=\"line\">      - hexo</div><div class=\"line\"></div><div class=\"line\">env:</div><div class=\"line\">  GIT_USER: Pepsi33</div><div class=\"line\">  GIT_EMAIL: xxx@xx.com</div><div class=\"line\"></div><div class=\"line\">jobs:</div><div class=\"line\">  build:</div><div class=\"line\">    name: Build on node $&#123;&#123; matrix.node_version &#125;&#125; and $&#123;&#123; matrix.os &#125;&#125;</div><div class=\"line\">    runs-on: ubuntu-latest</div><div class=\"line\">    strategy:</div><div class=\"line\">      matrix:</div><div class=\"line\">        os: [ubuntu-latest]</div><div class=\"line\">        node_version: [12.x]</div><div class=\"line\"></div><div class=\"line\">    steps:</div><div class=\"line\">      - name: Checkout source</div><div class=\"line\">        uses: actions/checkout@v1</div><div class=\"line\">        with:</div><div class=\"line\">          ref: hexo</div><div class=\"line\"></div><div class=\"line\">      - name: Use Node.js $&#123;&#123; matrix.node_version &#125;&#125;</div><div class=\"line\">        uses: actions/setup-node@v1</div><div class=\"line\">        with:</div><div class=\"line\">          version: $&#123;&#123; matrix.node_version &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">      - name: Configuration environment</div><div class=\"line\">        env:</div><div class=\"line\">          ACTION_DEPLOY_KEY: $&#123;&#123; secrets.HEXO_DEPLOY_KEY &#125;&#125;</div><div class=\"line\">        run: |</div><div class=\"line\">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</div><div class=\"line\">          mkdir -p ~/.ssh/</div><div class=\"line\">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</div><div class=\"line\">          chmod 600 ~/.ssh/id_rsa</div><div class=\"line\">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</div><div class=\"line\">          git config --global user.name $GIT_USER</div><div class=\"line\">          git config --global user.email $GIT_EMAIL</div><div class=\"line\"></div><div class=\"line\">      - name: Install dependencies</div><div class=\"line\">        run: |</div><div class=\"line\">          npm install hexo-cli -g</div><div class=\"line\">          npm install</div><div class=\"line\"></div><div class=\"line\">      - name: Hexo deploy</div><div class=\"line\">        run: |</div><div class=\"line\">          hexo clean</div><div class=\"line\">          hexo d</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>生成ssh-key</p>\n</li>\n<li><p>在 blog 仓库 Settings -&gt; Secrets -&gt; Add a new secret 页面上添加生成的私钥</p>\n</li>\n<li><p>在 your.github.io 仓库 Settings -&gt; Deploy keys -&gt; Add deploy key 页面上添加生成的公钥, 并勾选 Allow write access 选项</p>\n</li>\n<li><p>编写 Github Actions</p>\n<ul>\n<li>在 blog 仓库根目录下创建 .github/workflows/deploy.yml 文件</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">name: CI</div><div class=\"line\">on:</div><div class=\"line\">  push:</div><div class=\"line\">    branches:</div><div class=\"line\">      - hexo</div><div class=\"line\"></div><div class=\"line\">env:</div><div class=\"line\">  GIT_USER: Pepsi33</div><div class=\"line\">  GIT_EMAIL: xxx@xx.com</div><div class=\"line\"></div><div class=\"line\">jobs:</div><div class=\"line\">  build:</div><div class=\"line\">    name: Build on node $&#123;&#123; matrix.node_version &#125;&#125; and $&#123;&#123; matrix.os &#125;&#125;</div><div class=\"line\">    runs-on: ubuntu-latest</div><div class=\"line\">    strategy:</div><div class=\"line\">      matrix:</div><div class=\"line\">        os: [ubuntu-latest]</div><div class=\"line\">        node_version: [12.x]</div><div class=\"line\"></div><div class=\"line\">    steps:</div><div class=\"line\">      - name: Checkout source</div><div class=\"line\">        uses: actions/checkout@v1</div><div class=\"line\">        with:</div><div class=\"line\">          ref: hexo</div><div class=\"line\"></div><div class=\"line\">      - name: Use Node.js $&#123;&#123; matrix.node_version &#125;&#125;</div><div class=\"line\">        uses: actions/setup-node@v1</div><div class=\"line\">        with:</div><div class=\"line\">          version: $&#123;&#123; matrix.node_version &#125;&#125;</div><div class=\"line\"></div><div class=\"line\">      - name: Configuration environment</div><div class=\"line\">        env:</div><div class=\"line\">          ACTION_DEPLOY_KEY: $&#123;&#123; secrets.HEXO_DEPLOY_KEY &#125;&#125;</div><div class=\"line\">        run: |</div><div class=\"line\">          sudo timedatectl set-timezone &quot;Asia/Shanghai&quot;</div><div class=\"line\">          mkdir -p ~/.ssh/</div><div class=\"line\">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</div><div class=\"line\">          chmod 600 ~/.ssh/id_rsa</div><div class=\"line\">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</div><div class=\"line\">          git config --global user.name $GIT_USER</div><div class=\"line\">          git config --global user.email $GIT_EMAIL</div><div class=\"line\"></div><div class=\"line\">      - name: Install dependencies</div><div class=\"line\">        run: |</div><div class=\"line\">          npm install hexo-cli -g</div><div class=\"line\">          npm install</div><div class=\"line\"></div><div class=\"line\">      - name: Hexo deploy</div><div class=\"line\">        run: |</div><div class=\"line\">          hexo clean</div><div class=\"line\">          hexo d</div></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckv7i9bn800026o9kq5q3ill3","category_id":"ckv7i9bnd00056o9km31oz1qx","_id":"ckv7i9bng000a6o9kk5mvmlbg"},{"post_id":"ckv7i9bnb00046o9klsw2egjx","category_id":"ckv7i9bnd00056o9km31oz1qx","_id":"ckv7i9bng000c6o9k52bmzp6l"},{"post_id":"ckv7i9bqu000l6o9ktencdrg7","category_id":"ckv7i9bnd00056o9km31oz1qx","_id":"ckv7i9br0000t6o9kaf3s7pvg"},{"post_id":"ckv7i9bqy000q6o9kiw99r451","category_id":"ckv7i9br0000u6o9ko8lkepyu","_id":"ckv7i9br200136o9k9o3qotbs"},{"post_id":"ckv7i9bqz000s6o9kbcl0k5tv","category_id":"ckv7i9br200106o9koyl9v6s7","_id":"ckv7i9br300166o9k1n814qr2"},{"post_id":"ckv7i9br1000x6o9k2kynsi6l","category_id":"ckv7i9br300146o9kl495f49f","_id":"ckv7i9br300176o9kvziohsrn"}],"PostTag":[{"post_id":"ckv7i9bn500016o9ka2rb46xs","tag_id":"ckv7i9bna00036o9kqo4iimgj","_id":"ckv7i9bne00076o9kuflsw1lp"},{"post_id":"ckv7i9bn800026o9kq5q3ill3","tag_id":"ckv7i9bna00036o9kqo4iimgj","_id":"ckv7i9bng000d6o9ktfa7cv83"},{"post_id":"ckv7i9bn800026o9kq5q3ill3","tag_id":"ckv7i9bnf00096o9kz2uvjx99","_id":"ckv7i9bnh000e6o9kjwliupoq"},{"post_id":"ckv7i9bnb00046o9klsw2egjx","tag_id":"ckv7i9bng000b6o9kauirdkfi","_id":"ckv7i9bnh000f6o9ki4huphc0"},{"post_id":"ckv7i9bqq000g6o9kmecr71mm","tag_id":"ckv7i9bna00036o9kqo4iimgj","_id":"ckv7i9bqu000k6o9kipdjywy7"},{"post_id":"ckv7i9bqu000l6o9ktencdrg7","tag_id":"ckv7i9bna00036o9kqo4iimgj","_id":"ckv7i9bqx000p6o9k9smmby7m"},{"post_id":"ckv7i9bqu000l6o9ktencdrg7","tag_id":"ckv7i9bnf00096o9kz2uvjx99","_id":"ckv7i9bqz000r6o9kiq7fcbzt"},{"post_id":"ckv7i9bqw000o6o9koij9zilv","tag_id":"ckv7i9bna00036o9kqo4iimgj","_id":"ckv7i9br1000w6o9kov37wadv"},{"post_id":"ckv7i9bqs000i6o9kpxep3pj3","tag_id":"ckv7i9bqw000n6o9kgvxd0trk","_id":"ckv7i9br1000y6o9k11l2eu1r"},{"post_id":"ckv7i9br1000x6o9k2kynsi6l","tag_id":"ckv7i9bna00036o9kqo4iimgj","_id":"ckv7i9br2000z6o9k1snudfz8"},{"post_id":"ckv7i9bqy000q6o9kiw99r451","tag_id":"ckv7i9br0000v6o9kxbbrem4g","_id":"ckv7i9br200126o9k1vochrkl"},{"post_id":"ckv7i9bqz000s6o9kbcl0k5tv","tag_id":"ckv7i9br200116o9kfx5xuem0","_id":"ckv7i9br300156o9k3a8tlcde"},{"post_id":"ckv7imqi200186o9kcg2wettc","tag_id":"ckv7iyw2f00196o9klf7jdf7u","_id":"ckv7iyw2i001a6o9ko6kul1n8"}],"Tag":[{"name":"javascript","_id":"ckv7i9bna00036o9kqo4iimgj"},{"name":"YDKJS","_id":"ckv7i9bnf00096o9kz2uvjx99"},{"name":"css","_id":"ckv7i9bng000b6o9kauirdkfi"},{"name":"性能优化","_id":"ckv7i9bqw000n6o9kgvxd0trk"},{"name":"tcp","_id":"ckv7i9br0000v6o9kxbbrem4g"},{"name":"面试","_id":"ckv7i9br200116o9kfx5xuem0"},{"name":"CICD","_id":"ckv7iyw2f00196o9klf7jdf7u"}]}}